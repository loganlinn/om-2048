/**
 * React v0.9.0
 */
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      this.getDOMNode().focus();
    }
  }
};

module.exports = AutoFocusMixin;

},{}],2:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  fillOpacity: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],3:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

var dangerousStyleValue = require("./dangerousStyleValue");
var escapeTextForBrowser = require("./escapeTextForBrowser");
var hyphenate = require("./hyphenate");
var memoizeStringOnly = require("./memoizeStringOnly");

var processStyleName = memoizeStringOnly(function(styleName) {
  return escapeTextForBrowser(hyphenate(styleName));
});

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":2,"./dangerousStyleValue":94,"./escapeTextForBrowser":96,"./hyphenate":107,"./memoizeStringOnly":116}],4:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactEventTopLevelCallback. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":14,"./EventPluginHub":16,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactUpdates":70,"./SyntheticEvent":77,"./isEventSupported":109,"./isTextInputElement":111,"./keyOf":115}],5:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],6:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");

var getTextContentAccessor = require("./getTextContentAccessor");
var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  'documentMode' in document && document.documentMode > 8
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactInputSelection":52,"./SyntheticCompositionEvent":75,"./getTextContentAccessor":105,"./keyOf":115}],7:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  var childNodes = parentNode.childNodes;
  if (childNodes[index] === childNode) {
    return;
  }
  // If `childNode` is already a child of `parentNode`, remove it so that
  // computing `childNodes[index]` takes into account the removal.
  if (childNode.parentNode === parentNode) {
    parentNode.removeChild(childNode);
  }
  if (index >= childNodes.length) {
    parentNode.appendChild(childNode);
  } else {
    parentNode.insertBefore(childNode, childNodes[index]);
  }
}

/**
 * Sets the text content of `node` to `text`.
 *
 * @param {DOMElement} node Node to change
 * @param {string} text New text content
 */
var updateTextContent;
if (textContentAccessor === 'textContent') {
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":10,"./ReactMultiChildUpdateTypes":58,"./getTextContentAccessor":105}],8:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = require("./invariant");

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName[propName],
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName[propName]));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      var attributeName = DOMAttributeNames[propName];
      if (attributeName) {
        DOMProperty.getPossibleStandardName[attributeName] = propName;
      }

      DOMProperty.getAttributeName[propName] = attributeName || lowerCased;

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames[propName] || propName;

      var mutationMethod = DOMMutationMethods[propName];
      if (mutationMethod) {
        DOMProperty.getMutationMethod[propName] = mutationMethod;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_ATTRIBUTE;
      DOMProperty.mustUseProperty[propName] =
        propConfig & DOMPropertyInjection.MUST_USE_PROPERTY;
      DOMProperty.hasSideEffects[propName] =
        propConfig & DOMPropertyInjection.HAS_SIDE_EFFECTS;
      DOMProperty.hasBooleanValue[propName] =
        propConfig & DOMPropertyInjection.HAS_BOOLEAN_VALUE;
      DOMProperty.hasPositiveNumericValue[propName] =
        propConfig & DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE;

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !DOMProperty.hasBooleanValue[propName] ||
          !DOMProperty.hasPositiveNumericValue[propName],
        'DOMProperty: Cannot have both boolean and positive numeric value: %s',
        propName
      ) : invariant(!DOMProperty.hasBooleanValue[propName] ||
        !DOMProperty.hasPositiveNumericValue[propName]));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    return DOMProperty._isCustomAttributeFunctions.some(
      function(isCustomAttributeFn) {
        return isCustomAttributeFn.call(null, attributeName);
      }
    );
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":108}],9:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var memoizeStringOnly = require("./memoizeStringOnly");

function shouldIgnoreValue(name, value) {
  return value == null ||
    DOMProperty.hasBooleanValue[name] && !value ||
    DOMProperty.hasPositiveNumericValue[name] && (isNaN(value) || value < 1);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps[name] || warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ?
      lowerCasedName : DOMProperty.getPossibleStandardName[lowerCasedName];

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    if (standardName != null) {
      console.warn(
        'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
      );
    }

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name]) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        if (!DOMProperty.hasSideEffects[name] || node[propName] !== value) {
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          name
        );
        if (!DOMProperty.hasSideEffects[name] ||
            node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":8,"./escapeTextForBrowser":96,"./memoizeStringOnly":116}],10:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a Worker ' +
      'thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. This is likely a bug in the framework. Please report ' +
      'immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":20,"./createNodesFromMarkup":92,"./emptyFunction":95,"./getMarkupWrap":102,"./invariant":108}],11:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DefaultDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;

var DefaultDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    className: MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: null,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: null,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrollLeft: MUST_USE_PROPERTY,
    scrollTop: MUST_USE_PROPERTY,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    property: null, // Supports OG in meta tags

    /**
     * SVG Properties
     */
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    className: 'class',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    htmlFor: 'for',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeLinecap: 'stroke-linecap',
    strokeWidth: 'stroke-width',
    viewBox: 'viewBox'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc'
  },
  DOMMutationMethods: {
    /**
     * Setting `className` to null may cause it to be set to the string "null".
     *
     * @param {DOMElement} node
     * @param {*} value
     */
    className: function(node, value) {
      node.className = value || '';
    }
  }
};

module.exports = DefaultDOMPropertyConfig;

},{"./DOMProperty":8}],12:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":115}],13:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ReactMount":55,"./SyntheticMouseEvent":80,"./keyOf":115}],14:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":114}],15:[function(require,module,exports){
/**
 * @providesModule EventListener
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent(eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  }
};

module.exports = EventListener;

},{"./emptyFunction":95}],16:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'Cannot call putListener() in a non-DOM environment.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    if ("production" !== "development") {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      if (registrationName === 'onScroll' &&
          !isEventSupported('scroll', true)) {
        console.warn('This browser doesn\'t support the `onScroll` event');
      }
    }
    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulate(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulate(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":17,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./accumulate":86,"./forEachAccumulated":98,"./invariant":108,"./isEventSupported":109}],17:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs[eventName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than once.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":108}],18:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":14,"./invariant":108}],19:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulate = require("./accumulate");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulate(event._dispatchListeners, listener);
    event._dispatchIDs = accumulate(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulate(event._dispatchListeners, listener);
      event._dispatchIDs = accumulate(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":14,"./EventPluginHub":16,"./accumulate":86,"./forEachAccumulated":98}],20:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = typeof window !== 'undefined';

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && (window.addEventListener || window.attachEvent),

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],21:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
      input.props.checkedLink == null || input.props.valueLink == null,
      'Cannot provide a checkedLink and a valueLink. If you want to use ' +
      'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if ("production" !== "development") {
          if (props[propName] &&
              !hasReadOnlyValue[props.type] &&
              !props.onChange &&
              !props.readOnly &&
              !props.disabled) {
            console.warn(
              'You provided a `value` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultValue`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          }
        }
      },
      checked: function(props, propName, componentName) {
        if ("production" !== "development") {
          if (props[propName] &&
              !props.onChange &&
              !props.readOnly &&
              !props.disabled) {
            console.warn(
              'You provided a `checked` prop to a form field without an ' +
              '`onChange` handler. This will render a read-only field. If ' +
              'the field should be mutable use `defaultChecked`. Otherwise, ' +
              'set either `onChange` or `readOnly`.'
            );
          }
        }
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":64,"./invariant":108}],22:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":14,"./emptyFunction":95}],23:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":108}],24:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactDOM = require("./ReactDOM");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactServerRendering = require("./ReactServerRendering");
var ReactTextComponent = require("./ReactTextComponent");

var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  renderComponent: ReactPerf.measure(
    'React',
    'renderComponent',
    ReactMount.renderComponent
  ),
  renderComponentToString: ReactServerRendering.renderComponentToString,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactCompositeComponent.isValidClass,
  isValidComponent: ReactComponent.isValidComponent,
  withContext: ReactContext.withContext,
  __internals: {
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  }
};

if ("production" !== "development") {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM &&
      window.top === window.self &&
      navigator.userAgent.indexOf('Chrome') > -1) {
    console.debug(
      'Download the React DevTools for a better development experience: ' +
      'http://fb.me/react-devtools'
    );
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.9.0';

module.exports = React;

},{"./DOMPropertyOperations":9,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./ReactChildren":25,"./ReactComponent":26,"./ReactCompositeComponent":29,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactDOM":32,"./ReactDOMComponent":34,"./ReactDefaultInjection":44,"./ReactInstanceHandles":53,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./ReactPropTypes":64,"./ReactServerRendering":68,"./ReactTextComponent":69,"./onlyChild":123}],25:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = require("./PooledClass");

var invariant = require("./invariant");
var traverseAllChildren = require("./traverseAllChildren");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;
  var mappedChild =
    mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
  // We found a component instance
  ("production" !== "development" ? invariant(
    !mapResult.hasOwnProperty(name),
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Children keys must be unique.',
    name
  ) : invariant(!mapResult.hasOwnProperty(name)));
  mapResult[name] = mappedChild;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren
};

module.exports = ReactChildren;

},{"./PooledClass":23,"./invariant":108,"./traverseAllChildren":128}],26:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactOwner = require("./ReactOwner");
var ReactUpdates = require("./ReactUpdates");

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

var ownerHasExplicitKeyWarning = {};
var ownerHasPropertyWarning = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 */
function validateExplicitKey(component) {
  if (component.__keyValidated__ || component.props.key != null) {
    return;
  }
  component.__keyValidated__ = true;

  // We can't provide friendly warnings for top level components.
  if (!ReactCurrentOwner.current) {
    return;
  }

  // Name of the component whose render method tried to pass children.
  var currentName = ReactCurrentOwner.current.constructor.displayName;
  if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasExplicitKeyWarning[currentName] = true;

  var message = 'Each child in an array should have a unique "key" prop. ' +
                'Check the render method of ' + currentName + '.';
  if (!component.isOwnedBy(ReactCurrentOwner.current)) {
    // Name of the component that originally created this child.
    var childOwnerName =
      component._owner &&
      component._owner.constructor.displayName;

    // Usually the current owner is the offender, but if it accepts
    // children as a property, it may be the creator of the child that's
    // responsible for assigning it a key.
    message += ' It was passed a child from ' + childOwnerName + '.';
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  console.warn(message);
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 */
function validatePropertyKey(name) {
  if (NUMERIC_PROPERTY_REGEX.test(name)) {
    // Name of the component whose render method tried to pass children.
    var currentName = ReactCurrentOwner.current.constructor.displayName;
    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) {
      return;
    }
    ownerHasPropertyWarning[currentName] = true;

    console.warn(
      'Child objects should have non-numeric keys so ordering is preserved. ' +
      'Check the render method of ' + currentName + '. ' +
      'See http://fb.me/react-warning-keys for more information.'
    );
  }
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @return {boolean}
 */
function validateChildKeys(component) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactComponent.isValidComponent(child)) {
        validateExplicitKey(child);
      }
    }
  } else if (ReactComponent.isValidComponent(component)) {
    // This component was passed in a valid location.
    component.__keyValidated__ = true;
  } else if (component && typeof component === 'object') {
    for (var name in component) {
      validatePropertyKey(name, component);
    }
  }
}

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  isValidComponent: function(object) {
    if (!object || !object.type || !object.type.prototype) {
      return false;
    }
    // This is the safer way of duck checking the type of instance this is.
    // The object can be a generic descriptor but the type property refers to
    // the constructor and it's prototype can be used to inspect the type that
    // will actually get mounted.
    var prototype = object.type.prototype;
    return (
      typeof prototype.mountComponentIntoNode === 'function' &&
      typeof prototype.receiveComponent === 'function'
    );
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: ReactComponentEnvironment.BackendIDOperations,

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   *
   * @private
   */
  unmountIDFromEnvironment: ReactComponentEnvironment.unmountIDFromEnvironment,

  /**
   * The "image" of a component tree, is the platform specific (typically
   * serialized) data that represents a tree of lower level UI building blocks.
   * On the web, this "image" is HTML markup which describes a construction of
   * low level `div` and `span` nodes. Other platforms may have different
   * encoding of this "image". This must be injected.
   *
   * @private
   */
  mountImageIntoNode: ReactComponentEnvironment.mountImageIntoNode,

  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction:
    ReactComponentEnvironment.ReactReconcileTransaction,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: merge(ReactComponentEnvironment.Mixin, {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with `_pendingProps` if it exists, otherwise with existing props.
      this.replaceProps(
        merge(this._pendingProps || this.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      this._pendingProps = props;
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {?object} initialProps
     * @param {*} children
     * @internal
     */
    construct: function(initialProps, children) {
      this.props = initialProps || {};
      // Record the component responsible for creating this component.
      this._owner = ReactCurrentOwner.current;
      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      this._pendingProps = null;
      this._pendingCallbacks = null;

      // Unlike _pendingProps and _pendingCallbacks, we won't use null to
      // indicate that nothing is pending because it's possible for a component
      // to have a null owner. Instead, an owner change is pending when
      // this._owner !== this._pendingOwner.
      this._pendingOwner = this._owner;

      // Children can be more than one argument
      var childrenLength = arguments.length - 1;
      if (childrenLength === 1) {
        if ("production" !== "development") {
          validateChildKeys(children);
        }
        this.props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          if ("production" !== "development") {
            validateChildKeys(arguments[i + 1]);
          }
          childArray[i] = arguments[i + 1];
        }
        this.props.children = childArray;
      }
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var props = this.props;
      if (props.ref != null) {
        ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var props = this.props;
      if (props.ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);
      }
      ReactComponent.unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextComponent, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingOwner = nextComponent._owner;
      this._pendingProps = nextComponent.props;
      this._performUpdateIfNecessary(transaction);
    },

    /**
     * Call `_performUpdateIfNecessary` within a new transaction.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function() {
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
      transaction.perform(this._performUpdateIfNecessary, this, transaction);
      ReactComponent.ReactReconcileTransaction.release(transaction);
    },

    /**
     * If `_pendingProps` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _performUpdateIfNecessary: function(transaction) {
      if (this._pendingProps == null) {
        return;
      }
      var prevProps = this.props;
      var prevOwner = this._owner;
      this.props = this._pendingProps;
      this._owner = this._pendingOwner;
      this._pendingProps = null;
      this.updateComponent(transaction, prevProps, prevOwner);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevProps
     * @internal
     */
    updateComponent: function(transaction, prevProps, prevOwner) {
      var props = this.props;
      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`.
      if (this._owner !== prevOwner || props.ref !== prevProps.ref) {
        if (prevProps.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevProps.ref, prevOwner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (props.ref != null) {
          ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.renderComponent}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactComponent.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      ReactComponent.mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  })
};

module.exports = ReactComponent;

},{"./ReactComponentEnvironment":28,"./ReactCurrentOwner":31,"./ReactOwner":59,"./ReactUpdates":70,"./invariant":108,"./keyMirror":114,"./merge":117}],27:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  /**
   * Mixed into every component instance.
   */
  Mixin: {
    /**
     * Returns the DOM node rendered by this component.
     *
     * @return {DOMElement} The root node of this component.
     * @final
     * @protected
     */
    getDOMNode: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'getDOMNode(): A component must be mounted to have a DOM node.'
      ) : invariant(this.isMounted()));
      return ReactMount.getNode(this._rootNodeID);
    }
  },

  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      // Asynchronously inject markup by ensuring that the container is not in
      // the document when settings its `innerHTML`.
      var parent = container.parentNode;
      if (parent) {
        var next = container.nextSibling;
        parent.removeChild(container);
        container.innerHTML = markup;
        if (next) {
          parent.insertBefore(container, next);
        } else {
          parent.appendChild(container);
        }
      } else {
        container.innerHTML = markup;
      }
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":36,"./ReactMarkupChecksum":54,"./ReactMount":55,"./ReactPerf":60,"./ReactReconcileTransaction":66,"./getReactRootElementInContainer":104,"./invariant":108}],28:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactComponentEnvironment
 */

"use strict";

var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");

var ReactComponentEnvironment = ReactComponentBrowserEnvironment;

module.exports = ReactComponentEnvironment;

},{"./ReactComponentBrowserEnvironment":27}],29:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactOwner = require("./ReactOwner");
var ReactPerf = require("./ReactPerf");
var ReactPropTransferer = require("./ReactPropTransferer");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdates = require("./ReactUpdates");

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var merge = require("./merge");
var mixInto = require("./mixInto");
var objMap = require("./objMap");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(ConvenienceConstructor, displayName) {
    ConvenienceConstructor.componentConstructor.displayName = displayName;
  },
  mixins: function(ConvenienceConstructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(ConvenienceConstructor, childContextTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = merge(
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(ConvenienceConstructor, contextTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);
  },
  propTypes: function(ConvenienceConstructor, propTypes) {
    var Constructor = ConvenienceConstructor.componentConstructor;
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = merge(Constructor.propTypes, propTypes);
  },
  statics: function(ConvenienceConstructor, statics) {
    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface[name];

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). This could potentially cause an infinite ' +
    'loop so it is forbidden.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Custom version of `mixInto` which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(ConvenienceConstructor, spec) {
  ("production" !== "development" ? invariant(
    !isValidClass(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!isValidClass(spec)));
  ("production" !== "development" ? invariant(
    !ReactComponent.isValidComponent(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactComponent.isValidComponent(spec)));

  var Constructor = ConvenienceConstructor.componentConstructor;
  var proto = Constructor.prototype;
  for (var name in spec) {
    var property = spec[name];
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;
      var isInherited = name in proto;
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isInherited &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isInherited) {
          // For methods which are defined more than once, call the existing
          // methods before calling the new property.
          if (ReactCompositeComponentInterface[name] ===
              SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name) || !property) {
      return;
    }

    var isInherited = name in ConvenienceConstructor;
    var result = property;
    if (isInherited) {
      var existingProperty = ConvenienceConstructor[name];
      var existingType = typeof existingProperty;
      var propertyType = typeof property;
      ("production" !== "development" ? invariant(
        existingType === 'function' && propertyType === 'function',
        'ReactCompositeComponent: You are attempting to define ' +
        '`%s` on your component more than once, but that is only supported ' +
        'for functions, which are chained together. This conflict may be ' +
        'due to a mixin.',
        name
      ) : invariant(existingType === 'function' && propertyType === 'function'));
      result = createChainedFunction(existingProperty, property);
    }
    ConvenienceConstructor[name] = result;
    ConvenienceConstructor.componentConstructor[name] = result;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  objMap(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: %s',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

if ("production" !== "development") {

  var unmountedPropertyWhitelist = {
    constructor: true,
    construct: true,
    isOwnedBy: true, // should be deprecated but can have code mod (internal)
    mountComponent: true,
    mountComponentIntoNode: true,
    props: true,
    type: true,
    _checkPropTypes: true,
    _mountComponentIntoNode: true,
    _processContext: true
  };

  var hasWarnedOnComponentType = {};

  var warnIfUnmounted = function(instance, key) {
    if (instance.__hasBeenMounted) {
      return;
    }
    var name = instance.constructor.displayName || 'Unknown';
    var owner = ReactCurrentOwner.current;
    var ownerName = (owner && owner.constructor.displayName) || 'Unknown';
    var warningKey = key + '|' + name + '|' + ownerName;
    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) {
      // We have already warned for this combination. Skip it this time.
      return;
    }
    hasWarnedOnComponentType[warningKey] = true;

    var context = owner ? ' in ' + ownerName + '.' : ' at the top level.';
    var staticMethodExample = '<' + name + ' />.type.' + key + '(...)';

    console.warn(
      'Invalid access to component property "' + key + '" on ' + name +
      context + ' See http://fb.me/react-warning-descriptors .' +
      ' Use a static method instead: ' + staticMethodExample
    );
  };

  var defineMembraneProperty = function(membrane, prototype, key) {
    Object.defineProperty(membrane, key, {

      configurable: false,
      enumerable: true,

      get: function() {
        if (this !== membrane) {
          // When this is accessed through a prototype chain we need to check if
          // this component was mounted.
          warnIfUnmounted(this, key);
        }
        return prototype[key];
      },

      set: function(value) {
        if (this !== membrane) {
          // When this is accessed through a prototype chain, we first check if
          // this component was mounted. Then we define a value on "this"
          // instance, effectively disabling the membrane on that prototype
          // chain.
          warnIfUnmounted(this, key);
          Object.defineProperty(this, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        } else {
          // Otherwise, this should modify the prototype
          prototype[key] = value;
        }
      }

    });
  };

  /**
   * Creates a membrane prototype which wraps the original prototype. If any
   * property is accessed in an unmounted state, a warning is issued.
   *
   * @param {object} prototype Original prototype.
   * @return {object} The membrane prototype.
   * @private
   */
  var createMountWarningMembrane = function(prototype) {
    try {
      var membrane = Object.create(prototype);
      for (var key in prototype) {
        if (unmountedPropertyWhitelist.hasOwnProperty(key)) {
          continue;
        }
        defineMembraneProperty(membrane, prototype, key);
      }

      membrane.mountComponent = function() {
        this.__hasBeenMounted = true;
        return prototype.mountComponent.apply(this, arguments);
      };

      return membrane;
    } catch(x) {
      // In IE8 define property will fail on non-DOM objects. If anything in
      // the membrane creation fails, we'll bail out and just use the prototype
      // without warnings.
      return prototype;
    }
  };

}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+------------------------------------------------------+--------+
 * |  UN   |                    MOUNTED                           |   UN   |
 * |MOUNTED|                                                      | MOUNTED|
 * +-------+------------------------------------------------------+--------+
 * |       ^--------+   +------+   +------+   +------+   +--------^        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |
 * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       |        |   |      |   |      |   |      |   |        |        |
 * |       +--------+   +------+   +------+   +------+   +--------+        |
 * |       |                                                      |        |
 * +-------+------------------------------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null,
  /**
   * Components that are mounted and receiving new state are guarded against
   * additional state changes.
   */
  RECEIVING_STATE: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {?object} initialProps
   * @param {*} children
   * @final
   * @internal
   */
  construct: function(initialProps, children) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    this.context = this._processContext(ReactContext.current);
    this._currentContext = ReactContext.current;
    this._pendingContext = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;
      this.props = this._processProps(this.props);

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = this._renderValidatedComponent();

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this, this.componentDidMount);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._defaultProps = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    if (this.refs) {
      this.refs = null;
    }

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development") {
      if (partialState == null) {
        console.warn(
          'setState(...): You passed an undefined or null state object; ' +
          'instead, use forceUpdate().'
        );
      }
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      merge(this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return merge(currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    var props = merge(newProps);
    var defaultProps = this._defaultProps;
    for (var propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);
      }
    }
    return props;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        propTypes[propName](props, propName, componentName, location);
      }
    }
  },

  performUpdateIfNecessary: function() {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }
    ReactComponent.Mixin.performUpdateIfNecessary.call(this);
  },

  /**
   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is
   * set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _performUpdateIfNecessary: function(transaction) {
    if (this._pendingProps == null &&
        this._pendingState == null &&
        this._pendingContext == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextFullContext = this._pendingContext || this._currentContext;
    var nextContext = this._processContext(nextFullContext);
    this._pendingContext = null;

    var nextProps = this.props;
    if (this._pendingProps != null) {
      nextProps = this._processProps(this._pendingProps);
      this._pendingProps = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;

    // Unlike props, state, and context, we specifically don't want to set
    // _pendingOwner to null here because it's possible for a component to have
    // a null owner, so we instead make `this._owner === this._pendingOwner`
    // mean that there's no owner change pending.
    var nextOwner = this._pendingOwner;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    try {
      if (this._pendingForceUpdate ||
          !this.shouldComponentUpdate ||
          this.shouldComponentUpdate(nextProps, nextState, nextContext)) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(
          nextProps,
          nextOwner,
          nextState,
          nextFullContext,
          nextContext,
          transaction
        );
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state.
        this.props = nextProps;
        this._owner = nextOwner;
        this.state = nextState;
        this._currentContext = nextFullContext;
        this.context = nextContext;
      }
    } finally {
      this._compositeLifeCycleState = null;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {object} nextProps Next object to set as properties.
   * @param {?ReactComponent} nextOwner Next component to set as owner
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextFullContext Next object to set as _currentContext.
   * @param {?object} nextContext Next object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextProps,
    nextOwner,
    nextState,
    nextFullContext,
    nextContext,
    transaction
  ) {
    var prevProps = this.props;
    var prevOwner = this._owner;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this.props = nextProps;
    this._owner = nextOwner;
    this.state = nextState;
    this._currentContext = nextFullContext;
    this.context = nextContext;

    this.updateComponent(
      transaction,
      prevProps,
      prevOwner,
      prevState,
      prevContext
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this,
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext)
      );
    }
  },

  receiveComponent: function(nextComponent, transaction) {
    if (nextComponent === this) {
      // Since props and context are immutable after the component is
      // mounted, we can do a cheap identity compare here to determine
      // if this is a superfluous reconcile.
      return;
    }

    this._pendingContext = nextComponent._currentContext;
    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextComponent,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {object} prevProps
   * @param {?ReactComponent} prevOwner
   * @param {?object} prevState
   * @param {?object} prevContext
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevProps, prevOwner, prevState, prevContext) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevProps,
        prevOwner
      );
      var prevComponent = this._renderedComponent;
      var nextComponent = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {
        prevComponent.receiveComponent(nextComponent, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponent._rootNodeID;
        prevComponent.unmountComponent();
        this._renderedComponent = nextComponent;
        var nextMarkup = nextComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or during an existing state transition (such as within `render`).'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&
    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(this._currentContext);
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactComponent.isValidComponent(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned null, undefined, an array, or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactComponent.isValidComponent(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = function() {
      return method.apply(component, arguments);
    };
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
mixInto(ReactCompositeComponentBase, ReactComponent.Mixin);
mixInto(ReactCompositeComponentBase, ReactOwner.Mixin);
mixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);
mixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);

/**
 * Checks if a value is a valid component constructor.
 *
 * @param {*}
 * @return {boolean}
 * @public
 */
function isValidClass(componentClass) {
  return componentClass instanceof Function &&
         'componentConstructor' in componentClass &&
         componentClass.componentConstructor instanceof Function;
}
/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function() {};
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    var ConvenienceConstructor = function(props, children) {
      var instance = new Constructor();
      instance.construct.apply(instance, arguments);
      return instance;
    };
    ConvenienceConstructor.componentConstructor = Constructor;
    Constructor.ConvenienceConstructor = ConvenienceConstructor;
    ConvenienceConstructor.originalSpec = spec;

    mixSpecIntoComponent(ConvenienceConstructor, spec);

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Expose the convience constructor on the prototype so that it can be
    // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for
    // static methods like <Foo />.type.staticMethod();
    // This should not be named constructor since this may not be the function
    // that created the descriptor, and it may not even be a constructor.
    ConvenienceConstructor.type = Constructor;
    Constructor.prototype.type = Constructor;

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      Constructor.prototype = createMountWarningMembrane(Constructor.prototype);
    }

    return ConvenienceConstructor;
  },

  isValidClass: isValidClass
};

module.exports = ReactCompositeComponent;

},{"./ReactComponent":26,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactErrorUtils":47,"./ReactOwner":59,"./ReactPerf":60,"./ReactPropTransferer":61,"./ReactPropTypeLocationNames":62,"./ReactPropTypeLocations":63,"./ReactUpdates":70,"./invariant":108,"./keyMirror":114,"./merge":117,"./mixInto":120,"./objMap":121,"./shouldUpdateReactComponent":126}],30:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactContext
 */

"use strict";

var merge = require("./merge");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'} () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = merge(previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./merge":117}],31:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],32:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactDOMComponent = require("./ReactDOMComponent");

var mergeInto = require("./mergeInto");
var objMapKeyVal = require("./objMapKeyVal");

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @param {boolean} omitClose True if the close tag should be omitted.
 * @private
 */
function createDOMComponentClass(tag, omitClose) {
  var Constructor = function() {};
  Constructor.prototype = new ReactDOMComponent(tag, omitClose);
  Constructor.prototype.constructor = Constructor;
  Constructor.displayName = tag;

  var ConvenienceConstructor = function(props, children) {
    var instance = new Constructor();
    instance.construct.apply(instance, arguments);
    return instance;
  };

  // Expose the constructor on the ConvenienceConstructor and prototype so that
  // it can be easily easily accessed on descriptors.
  // E.g. <div />.type === div.type
  ConvenienceConstructor.type = Constructor;
  Constructor.prototype.type = Constructor;

  Constructor.ConvenienceConstructor = ConvenienceConstructor;
  ConvenienceConstructor.componentConstructor = Constructor;
  return ConvenienceConstructor;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = objMapKeyVal({
  a: false,
  abbr: false,
  address: false,
  area: false,
  article: false,
  aside: false,
  audio: false,
  b: false,
  base: false,
  bdi: false,
  bdo: false,
  big: false,
  blockquote: false,
  body: false,
  br: true,
  button: false,
  canvas: false,
  caption: false,
  cite: false,
  code: false,
  col: true,
  colgroup: false,
  data: false,
  datalist: false,
  dd: false,
  del: false,
  details: false,
  dfn: false,
  div: false,
  dl: false,
  dt: false,
  em: false,
  embed: true,
  fieldset: false,
  figcaption: false,
  figure: false,
  footer: false,
  form: false, // NOTE: Injected, see `ReactDOMForm`.
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  head: false,
  header: false,
  hr: true,
  html: false,
  i: false,
  iframe: false,
  img: true,
  input: true,
  ins: false,
  kbd: false,
  keygen: true,
  label: false,
  legend: false,
  li: false,
  link: false,
  main: false,
  map: false,
  mark: false,
  menu: false,
  menuitem: false, // NOTE: Close tag should be omitted, but causes problems.
  meta: true,
  meter: false,
  nav: false,
  noscript: false,
  object: false,
  ol: false,
  optgroup: false,
  option: false,
  output: false,
  p: false,
  param: true,
  pre: false,
  progress: false,
  q: false,
  rp: false,
  rt: false,
  ruby: false,
  s: false,
  samp: false,
  script: false,
  section: false,
  select: false,
  small: false,
  source: false,
  span: false,
  strong: false,
  style: false,
  sub: false,
  summary: false,
  sup: false,
  table: false,
  tbody: false,
  td: false,
  textarea: false, // NOTE: Injected, see `ReactDOMTextarea`.
  tfoot: false,
  th: false,
  thead: false,
  time: false,
  title: false,
  tr: false,
  track: true,
  u: false,
  ul: false,
  'var': false,
  video: false,
  wbr: false,

  // SVG
  circle: false,
  defs: false,
  g: false,
  line: false,
  linearGradient: false,
  path: false,
  polygon: false,
  polyline: false,
  radialGradient: false,
  rect: false,
  stop: false,
  svg: false,
  text: false
}, createDOMComponentClass);

var injection = {
  injectComponentClasses: function(componentClasses) {
    mergeInto(ReactDOM, componentClasses);
  }
};

ReactDOM.injection = injection;

module.exports = ReactDOM;

},{"./ReactDOMComponent":34,"./mergeInto":119,"./objMapKeyVal":122}],33:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var keyMirror = require("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`.
var button = ReactDOM.button;

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":1,"./ReactCompositeComponent":29,"./ReactDOM":32,"./keyMirror":114}],34:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var invariant = require("./invariant");
var keyOf = require("./keyOf");
var merge = require("./merge");
var mixInto = require("./mixInto");

var deleteListener = ReactEventEmitter.deleteListener;
var listenTo = ReactEventEmitter.listenTo;
var registrationNameModules = ReactEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}


/**
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag, omitClose) {
  this._tagOpen = '<' + tag;
  this._tagClose = omitClose ? '' : '</' + tag + '>';
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        this._tagClose
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = this._tagOpen;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules[propKey]) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = merge(props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    var idMarkup = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + idMarkup + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextComponent, transaction) {
    assertValidProps(nextComponent.props);
    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextComponent,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {object} prevProps
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevProps, prevOwner) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevProps,
        prevOwner
      );
      this._updateDOMProperties(prevProps, transaction);
      this._updateDOMChildren(prevProps, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules[propKey]) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = merge(nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                !nextProp.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules[propKey]) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

mixInto(ReactDOMComponent, ReactComponent.Mixin);
mixInto(ReactDOMComponent, ReactDOMComponent.Mixin);
mixInto(ReactDOMComponent, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":3,"./DOMProperty":8,"./DOMPropertyOperations":9,"./ReactComponent":26,"./ReactEventEmitter":48,"./ReactMount":55,"./ReactMultiChild":57,"./ReactPerf":60,"./escapeTextForBrowser":96,"./invariant":108,"./keyOf":115,"./merge":117,"./mixInto":120}],35:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var EventConstants = require("./EventConstants");

// Store a reference to the <form> `ReactDOMComponent`.
var form = ReactDOM.form;

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return this.transferPropsTo(form(null, this.props.children));
  },

  componentDidMount: function() {
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topReset,
      'reset',
      this.getDOMNode()
    );
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topSubmit,
      'submit',
      this.getDOMNode()
    );
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],36:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

var useWhitespaceWorkaround;

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);

      // IE8: When updating a just created node with innerHTML only leading
      // whitespace is removed. When updating an existing node with innerHTML
      // whitespace in root TextNodes is also collapsed.
      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

      if (useWhitespaceWorkaround === undefined) {
        // Feature detection; only IE8 is known to behave improperly like this.
        var temp = document.createElement('div');
        temp.innerHTML = ' ';
        useWhitespaceWorkaround = temp.innerHTML === '';
      }

      if (useWhitespaceWorkaround) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        node.parentNode.replaceChild(node, node);
      }

      if (useWhitespaceWorkaround && html.match(/^[ \r\n\t\f]/)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;
        node.firstChild.deleteData(0, 1);
      } else {
        node.innerHTML = html;
      }
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":3,"./DOMChildrenOperations":7,"./DOMPropertyOperations":9,"./ReactMount":55,"./ReactPerf":60,"./invariant":108}],37:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var EventConstants = require("./EventConstants");

// Store a reference to the <img> `ReactDOMComponent`.
var img = ReactDOM.img;

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    var node = this.getDOMNode();
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topLoad,
      'load',
      node
    );
    ReactEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topError,
      'error',
      node
    );
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":48}],38:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <input> `ReactDOMComponent`.
var input = ReactDOM.input;

var instancesByReactID = {};

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      checked: this.props.defaultChecked || false,
      value: defaultValue != null ? defaultValue : null
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.value;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.checked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({
      checked: event.target.checked,
      value: event.target.value
    });

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // In some cases, this will actually change the `checked` state value.
        // In other cases, there's no change but this forces a reconcile upon
        // which componentDidUpdate will reset the DOM property to whatever it
        // should be.
        otherInstance.setState({
          checked: false
        });
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactMount":55,"./invariant":108,"./merge":117}],39:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

// Store a reference to the <option> `ReactDOMComponent`.
var option = ReactDOM.option;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (this.props.selected != null) {
      if ("production" !== "development") {
        console.warn(
          'Use the `defaultValue` or `value` props on <select> instead of ' +
          'setting `selected` on <option>.'
        );
      }
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactCompositeComponent":29,"./ReactDOM":32}],40:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <select> `ReactDOMComponent`.
var select = ReactDOM.select;

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    ("production" !== "development" ? invariant(
      Array.isArray(props[propName]),
      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +
      'true.',
      propName
    ) : invariant(Array.isArray(props[propName])));
  } else {
    ("production" !== "development" ? invariant(
      !Array.isArray(props[propName]),
      'The `%s` prop supplied to <select> must be a scalar value if ' +
      '`multiple` is false.',
      propName
    ) : invariant(!Array.isArray(props[propName])));
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this.setState({value: selectedValue});
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":1,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":108,"./merge":117}],41:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection();

  if (selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);
  var rangeLength = currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var start = tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;
  detectionRange.detach();

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  var selection = window.getSelection();

  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }

    range.detach();
  }
}

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: function(node) {
    var getOffsets = document.selection ? getIEOffsets : getModernOffsets;
    return getOffsets(node);
  },

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: function(node, offsets) {
    var setOffsets = document.selection ? setIEOffsets : setModernOffsets;
    setOffsets(node, offsets);
  }
};

module.exports = ReactDOMSelection;

},{"./getNodeForCharacterOffset":103,"./getTextContentAccessor":105}],42:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactDOM = require("./ReactDOM");

var invariant = require("./invariant");
var merge = require("./merge");

// Store a reference to the <textarea> `ReactDOMComponent`.
var textarea = ReactDOM.textarea;

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        console.warn(
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        );
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      value: defaultValue
    };
  },

  shouldComponentUpdate: function() {
    // Defer any updates to this component during the `onChange` handler.
    return !this._isChanging;
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = merge(this.props);
    var value = LinkedValueUtils.getValue(this);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = value != null ? value : this.state.value;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      this._isChanging = true;
      returnValue = onChange.call(this, event);
      this._isChanging = false;
    }
    this.setState({value: event.target.value});
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":108,"./merge":117}],43:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var emptyFunction = require("./emptyFunction");
var mixInto = require("./mixInto");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

mixInto(ReactDefaultBatchingStrategyTransaction, Transaction.Mixin);
mixInto(ReactDefaultBatchingStrategyTransaction, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, param) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(param);
    } else {
      transaction.perform(callback, null, param);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./ReactUpdates":70,"./Transaction":84,"./emptyFunction":95,"./mixInto":120}],44:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var ReactInjection = require("./ReactInjection");

var ExecutionEnvironment = require("./ExecutionEnvironment");

var DefaultDOMPropertyConfig = require("./DefaultDOMPropertyConfig");

var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var CompositionEventPlugin = require("./CompositionEventPlugin");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactEventTopLevelCallback = require("./ReactEventTopLevelCallback");
var ReactDOM = require("./ReactDOM");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");

var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");

var createFullPageComponent = require("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectTopLevelCallbackCreator(
    ReactEventTopLevelCallback
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin
  });

  ReactInjection.DOM.injectComponentClasses({
    button: ReactDOMButton,
    form: ReactDOMForm,
    img: ReactDOMImg,
    input: ReactDOMInput,
    option: ReactDOMOption,
    select: ReactDOMSelect,
    textarea: ReactDOMTextarea,

    html: createFullPageComponent(ReactDOM.html),
    head: createFullPageComponent(ReactDOM.head),
    title: createFullPageComponent(ReactDOM.title),
    body: createFullPageComponent(ReactDOM.body)
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(DefaultDOMPropertyConfig);

  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./ChangeEventPlugin":4,"./ClientReactRootIndex":5,"./CompositionEventPlugin":6,"./DefaultDOMPropertyConfig":11,"./DefaultEventPluginOrder":12,"./EnterLeaveEventPlugin":13,"./ExecutionEnvironment":20,"./MobileSafariClickEventPlugin":22,"./ReactDOM":32,"./ReactDOMButton":33,"./ReactDOMForm":35,"./ReactDOMImg":37,"./ReactDOMInput":38,"./ReactDOMOption":39,"./ReactDOMSelect":40,"./ReactDOMTextarea":42,"./ReactDefaultBatchingStrategy":43,"./ReactDefaultPerf":45,"./ReactEventTopLevelCallback":50,"./ReactInjection":51,"./ReactInstanceHandles":53,"./ReactMount":55,"./SelectEventPlugin":71,"./ServerReactRootIndex":72,"./SimpleEventPlugin":73,"./createFullPageComponent":91}],45:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Total exclusive time (ms)': roundFloat(item.exclusive),
        'Exclusive time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {var args=Array.prototype.slice.call(arguments,0);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;
          entry.counts[rootNodeID] += 1;
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        var typeOfLog = isRender ? entry.exclusive : entry.inclusive;
        typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;
        typeOfLog[rootNodeID] += totalTime;

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":8,"./ReactDefaultPerfAnalysis":46,"./ReactMount":55,"./ReactPerf":60,"./performanceNow":124}],46:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var merge = require("./merge");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        count: 0
      };
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = merge(measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = merge(measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggerd
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./merge":117}],47:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],48:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventListener = require("./EventListener");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var merge = require("./merge");

/**
 * Summary of `ReactEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap native browser events. We normalize
 *    and de-duplicate events to account for browser quirks.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 *                   .
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .                         +-----------+
 *       +           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  if (mountAt[topListenersIDKey] == null) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {DOMEventTarget} element Element on which to attach listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, handlerBaseName, element) {
  EventListener.listen(
    element,
    handlerBaseName,
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(
      topLevelType
    )
  );
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {DOMEventTarget} element Element on which to attach listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, handlerBaseName, element) {
  EventListener.capture(
    element,
    handlerBaseName,
    ReactEventEmitter.TopLevelCallbackCreator.createTopLevelCallback(
      topLevelType
    )
  );
}

/**
 * `ReactEventEmitter` is used to attach top-level event listeners. For example:
 *
 *   ReactEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactEventEmitter = merge(ReactEventEmitterMixin, {

  /**
   * React references `ReactEventTopLevelCallback` using this property in order
   * to allow dependency injection.
   */
  TopLevelCallbackCreator: null,

  injection: {
    /**
     * @param {function} TopLevelCallbackCreator
     */
    injectTopLevelCallbackCreator: function(TopLevelCallbackCreator) {
      ReactEventEmitter.TopLevelCallbackCreator = TopLevelCallbackCreator;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'setEnabled(...): Cannot toggle event listening in a Worker thread. ' +
      'This is likely a bug in the framework. Please report immediately.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    if (ReactEventEmitter.TopLevelCallbackCreator) {
      ReactEventEmitter.TopLevelCallbackCreator.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactEventEmitter.TopLevelCallbackCreator &&
      ReactEventEmitter.TopLevelCallbackCreator.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {DOMDocument} contentDocument Document which owns the container
   */
  listenTo: function(registrationName, contentDocument) {
    var mountAt = contentDocument;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!isListening[dependency]) {
        var topLevelType = topLevelTypes[dependency];

        if (topLevelType === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt);
          }
        } else if (topLevelType === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            trapBubbledEvent(topLevelTypes.topScroll, 'scroll', window);
          }
        } else if (topLevelType === topLevelTypes.topFocus ||
            topLevelType === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping[dependency]) {
          trapBubbledEvent(topLevelType, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      EventListener.listen(window, 'scroll', refresh);
      EventListener.listen(window, 'resize', refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners,

  trapBubbledEvent: trapBubbledEvent,

  trapCapturedEvent: trapCapturedEvent

});

module.exports = ReactEventEmitter;

},{"./EventConstants":14,"./EventListener":15,"./EventPluginHub":16,"./EventPluginRegistry":17,"./ExecutionEnvironment":20,"./ReactEventEmitterMixin":49,"./ViewportMetrics":85,"./invariant":108,"./isEventSupported":109,"./merge":117}],49:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = require("./EventPluginHub");
var ReactUpdates = require("./ReactUpdates");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    // Event queue being processed in the same cycle allows `preventDefault`.
    ReactUpdates.batchedUpdates(runEventQueueInBatch, events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":16,"./ReactUpdates":70}],50:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactEventTopLevelCallback
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");

var getEventTarget = require("./getEventTarget");
var mixInto = require("./mixInto");

/**
 * @type {boolean}
 * @private
 */
var _topLevelListenersEnabled = true;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

/**
 * Calls ReactEventEmitter.handleTopLevel for each node stored in bookKeeping's
 * ancestor list. Separated from createTopLevelCallback to avoid try/finally
 * deoptimization.
 *
 * @param {string} topLevelType
 * @param {DOMEvent} nativeEvent
 * @param {TopLevelCallbackBookKeeping} bookKeeping
 */
function handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventEmitter.handleTopLevel(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );
  }
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping() {
  this.ancestors = [];
}
mixInto(TopLevelCallbackBookKeeping, {
  destructor: function() {
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping);

/**
 * Top-level callback creator used to implement event handling using delegation.
 * This is used via dependency injection.
 */
var ReactEventTopLevelCallback = {

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    _topLevelListenersEnabled = !!enabled;
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return _topLevelListenersEnabled;
  },

  /**
   * Creates a callback for the supplied `topLevelType` that could be added as
   * a listener to the document. The callback computes a `topLevelTarget` which
   * should be the root node of a mounted React component where the listener
   * is attached.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @return {function} Callback for handling top-level events.
   */
  createTopLevelCallback: function(topLevelType) {
    return function(nativeEvent) {
      if (!_topLevelListenersEnabled) {
        return;
      }

      var bookKeeping = TopLevelCallbackBookKeeping.getPooled();
      try {
        handleTopLevelImpl(topLevelType, nativeEvent, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    };
  }

};

module.exports = ReactEventTopLevelCallback;

},{"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactMount":55,"./getEventTarget":101,"./mixInto":120}],51:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactDOM = require("./ReactDOM");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  DOMProperty: DOMProperty.injection,
  EventPluginHub: EventPluginHub.injection,
  DOM: ReactDOM.injection,
  EventEmitter: ReactEventEmitter.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":8,"./EventPluginHub":16,"./ReactDOM":32,"./ReactEventEmitter":48,"./ReactPerf":60,"./ReactRootIndex":67,"./ReactUpdates":70}],52:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      priorFocusedElem.focus();
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":41,"./containsNode":88,"./getActiveElement":99}],53:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":67,"./invariant":108}],54:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":87}],55:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = require("./DOMProperty");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactPerf = require("./ReactPerf");

var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.renderComponent(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Time spent generating markup. */
  totalInstantiationTime: 0,

  /** Time spent inserting markup into the DOM. */
  totalInjectionTime: 0,

  /** Whether support for touch events should be initialized. */
  useTouchEvents: false,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      var reactRootID = ReactMount._registerComponent(nextComponent, container);
      nextComponent.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return nextComponent;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} nextComponent Component instance to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderComponent: function(nextComponent, container, callback) {
    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextComponent,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextComponent,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    return ReactMount.renderComponent(constructor(props), container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser). ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

module.exports = ReactMount;

},{"./DOMProperty":8,"./ReactEventEmitter":48,"./ReactInstanceHandles":53,"./ReactPerf":60,"./containsNode":88,"./getReactRootElementInContainer":104,"./invariant":108,"./shouldUpdateReactComponent":126}],56:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMountReady
 */

"use strict";

var PooledClass = require("./PooledClass");

var mixInto = require("./mixInto");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `ReactMountReady.getPooled()`.
 *
 * @param {?array<function>} initialCollection
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function ReactMountReady(initialCollection) {
  this._queue = initialCollection || null;
}

mixInto(ReactMountReady, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked. This is used
   * to enqueue calls to `componentDidMount` and `componentDidUpdate`.
   *
   * @param {ReactComponent} component Component being rendered.
   * @param {function(DOMElement)} callback Invoked when `notifyAll` is invoked.
   * @internal
   */
  enqueue: function(component, callback) {
    this._queue = this._queue || [];
    this._queue.push({component: component, callback: callback});
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var queue = this._queue;
    if (queue) {
      this._queue = null;
      for (var i = 0, l = queue.length; i < l; i++) {
        var component = queue[i].component;
        var callback = queue[i].callback;
        callback.call(component);
      }
      queue.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._queue = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(ReactMountReady);

module.exports = ReactMountReady;

},{"./PooledClass":23,"./mixInto":120}],57:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var flattenChildren = require("./flattenChildren");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = child.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (shouldUpdateReactComponent(prevChild, nextChild)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextChild, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      // TODO: When is this not true?
      if (ReactComponent.isValidComponent(child)) {
        this.removeChild(child);
        child._mountIndex = null;
        child.unmountComponent();
        delete this._renderedChildren[name];
      }
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":26,"./ReactMultiChildUpdateTypes":58,"./flattenChildren":97,"./shouldUpdateReactComponent":126}],58:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":114}],59:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactOwner
 */

"use strict";

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs || (this.refs = {});
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./invariant":108}],60:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      return function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],61:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var emptyFunction = require("./emptyFunction");
var invariant = require("./invariant");
var joinClasses = require("./joinClasses");
var merge = require("./merge");

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Never transfer the `key` prop.
   */
  key: emptyFunction,
  /**
   * Never transfer the `ref` prop.
   */
  ref: emptyFunction,
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: createTransferStrategy(merge)
};

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    var props = merge(oldProps);

    for (var thisKey in newProps) {
      if (!newProps.hasOwnProperty(thisKey)) {
        continue;
      }

      var transferStrategy = TransferStrategies[thisKey];

      if (transferStrategy) {
        transferStrategy(props, thisKey, newProps[thisKey]);
      } else if (!props.hasOwnProperty(thisKey)) {
        props[thisKey] = newProps[thisKey];
      }
    }

    return props;
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactComponent} component Component receiving the properties.
     * @return {ReactComponent} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(component) {
      ("production" !== "development" ? invariant(
        component._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        component.constructor.displayName
      ) : invariant(component._owner === this));

      component.props = ReactPropTransferer.mergeProps(
        component.props,
        this.props
      );

      return component;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./emptyFunction":95,"./invariant":108,"./joinClasses":113,"./merge":117}],62:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],63:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":114}],64:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactComponent = require("./ReactComponent");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var warning = require("./warning");
var createObjectFrom = require("./createObjectFrom");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyLink = React.createClass({
 *     propTypes: {
 *       // An optional string or URI prop named "href".
 *       href: function(props, propName, componentName) {
 *         var propValue = props[propName];
 *         warning(
 *           propValue == null ||
 *           typeof propValue === 'string' ||
 *           propValue instanceof URI,
 *           'Invalid `%s` supplied to `%s`, expected string or URI.',
 *           propName,
 *           componentName
 *         );
 *       }
 *     },
 *     render: function() { ... }
 *   });
 *
 * @internal
 */
var Props = {

  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  shape: createShapeTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  arrayOf: createArrayOfTypeChecker,

  instanceOf: createInstanceTypeChecker,

  renderable: createRenderableTypeChecker(),

  component: createComponentTypeChecker(),

  any: createAnyTypeChecker()
};

var ANONYMOUS = '<<anonymous>>';

function isRenderable(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isRenderable);
      }
      if (ReactComponent.isValidComponent(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isRenderable(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of typeof but with special handling for arrays
function getPropType(propValue) {
  var propType = typeof propValue;
  if (propType === 'object' && Array.isArray(propValue)) {
    return 'array';
  }
  return propType;
}

function createAnyTypeChecker() {
  function validateAnyType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    return true; // is always valid
  }
  return createChainableTypeChecker(validateAnyType);
}

function createPrimitiveTypeChecker(expectedType) {
  function validatePrimitiveType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var propType = getPropType(propValue);
    var isValid = propType === expectedType;
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `%s`.',
        ReactPropTypeLocationNames[location],
        propName,
        propType,
        componentName,
        expectedType
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validatePrimitiveType);
}

function createEnumTypeChecker(expectedValues) {
  var expectedEnum = createObjectFrom(expectedValues);
  function validateEnumType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = expectedEnum[propValue];
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected one of %s.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName,
        JSON.stringify(Object.keys(expectedEnum))
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateEnumType);
}

function createShapeTypeChecker(shapeTypes) {
  function validateShapeType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var propType = getPropType(propValue);
    var isValid = propType === 'object';
    if (isValid) {
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (checker && !checker(propValue, key, componentName, location)) {
          return false;
        }
      }
    }
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` of type `%s` supplied to `%s`, expected `object`.',
        ReactPropTypeLocationNames[location],
        propName,
        propType,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateShapeType);
}

function createInstanceTypeChecker(expectedClass) {
  function validateInstanceType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = propValue instanceof expectedClass;
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected instance of `%s`.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName,
        expectedClass.name || ANONYMOUS
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateInstanceType);
}

function createArrayOfTypeChecker(propTypeChecker) {
  function validateArrayType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = Array.isArray(propValue);
    if (isValid) {
      for (var i = 0; i < propValue.length; i++) {
        if (!propTypeChecker(propValue, i, componentName, location)) {
          return false;
        }
      }
    }
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected an array.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateArrayType);
}

function createRenderableTypeChecker() {
  function validateRenderableType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = isRenderable(propValue);
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected a renderable prop.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateRenderableType);
}

function createComponentTypeChecker() {
  function validateComponentType(
    shouldWarn, propValue, propName, componentName, location
  ) {
    var isValid = ReactComponent.isValidComponent(propValue);
    if (shouldWarn) {
      ("production" !== "development" ? warning(
        isValid,
        'Invalid %s `%s` supplied to `%s`, expected a React component.',
        ReactPropTypeLocationNames[location],
        propName,
        componentName
      ) : null);
    }
    return isValid;
  }
  return createChainableTypeChecker(validateComponentType);
}

function createUnionTypeChecker(arrayOfValidators) {
  return function(props, propName, componentName, location) {
    var isValid = false;
    for (var ii = 0; ii < arrayOfValidators.length; ii++) {
      var validate = arrayOfValidators[ii];
      if (typeof validate.weak === 'function') {
        validate = validate.weak;
      }
      if (validate(props, propName, componentName, location)) {
        isValid = true;
        break;
      }
    }
    ("production" !== "development" ? warning(
      isValid,
      'Invalid %s `%s` supplied to `%s`.',
      ReactPropTypeLocationNames[location],
      propName,
      componentName || ANONYMOUS
    ) : null);
    return isValid;
  };
}

function createChainableTypeChecker(validate) {
  function checkType(
    isRequired, shouldWarn, props, propName, componentName, location
  ) {
    var propValue = props[propName];
    if (propValue != null) {
      // Only validate if there is a value to check.
      return validate(
        shouldWarn,
        propValue,
        propName,
        componentName || ANONYMOUS,
        location
      );
    } else {
      var isValid = !isRequired;
      if (shouldWarn) {
        ("production" !== "development" ? warning(
          isValid,
          'Required %s `%s` was not specified in `%s`.',
          ReactPropTypeLocationNames[location],
          propName,
          componentName || ANONYMOUS
        ) : null);
      }
      return isValid;
    }
  }

  var checker = checkType.bind(null, false, true);
  checker.weak = checkType.bind(null, false, false);
  checker.isRequired = checkType.bind(null, true, true);
  checker.weak.isRequired = checkType.bind(null, true, false);
  checker.isRequired.weak = checker.weak.isRequired;

  return checker;
}

module.exports = Props;

},{"./ReactComponent":26,"./ReactPropTypeLocationNames":62,"./createObjectFrom":93,"./warning":129}],65:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");

var mixInto = require("./mixInto");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

mixInto(ReactPutListenerQueue, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./PooledClass":23,"./ReactEventEmitter":48,"./mixInto":120}],66:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactEventEmitter = require("./ReactEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactMountReady = require("./ReactMountReady");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var mixInto = require("./mixInto");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactEventEmitter` before the
   * reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactEventEmitter.isEnabled();
    ReactEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of `ReactEventEmitter`
   *   before the reconciliation occured. `close` restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a `ReactMountReady` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = ReactMountReady.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    if (ExecutionEnvironment.canUseDOM) {
      return TRANSACTION_WRAPPERS;
    } else {
      return [];
    }
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   *   TODO: convert to ReactMountReady
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    ReactMountReady.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


mixInto(ReactReconcileTransaction, Transaction.Mixin);
mixInto(ReactReconcileTransaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./ExecutionEnvironment":20,"./PooledClass":23,"./ReactEventEmitter":48,"./ReactInputSelection":52,"./ReactMountReady":56,"./ReactPutListenerQueue":65,"./Transaction":84,"./mixInto":120}],67:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],68:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactComponent = require("./ReactComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");

var invariant = require("./invariant");

/**
 * @param {ReactComponent} component
 * @return {string} the markup
 */
function renderComponentToString(component) {
  ("production" !== "development" ? invariant(
    ReactComponent.isValidComponent(component),
    'renderComponentToString(): You must pass a valid ReactComponent.'
  ) : invariant(ReactComponent.isValidComponent(component)));

  ("production" !== "development" ? invariant(
    !(arguments.length === 2 && typeof arguments[1] === 'function'),
    'renderComponentToString(): This function became synchronous and now ' +
    'returns the generated markup. Please remove the second parameter.'
  ) : invariant(!(arguments.length === 2 && typeof arguments[1] === 'function')));

  var id = ReactInstanceHandles.createReactRootID();
  var transaction = ReactReconcileTransaction.getPooled();
  transaction.reinitializeTransaction();
  try {
    return transaction.perform(function() {
      var markup = component.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactReconcileTransaction.release(transaction);
  }
}

module.exports = {
  renderComponentToString: renderComponentToString
};

},{"./ReactComponent":26,"./ReactInstanceHandles":53,"./ReactMarkupChecksum":54,"./ReactReconcileTransaction":66,"./invariant":108}],69:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponent = require("./ReactComponent");

var escapeTextForBrowser = require("./escapeTextForBrowser");
var mixInto = require("./mixInto");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(initialText) {
  this.construct({text: initialText});
};

mixInto(ReactTextComponent, ReactComponent.Mixin);
mixInto(ReactTextComponent, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );
    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapeTextForBrowser(this.props.text) +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps.text !== this.props.text) {
      this.props.text = nextProps.text;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps.text
      );
    }
  }

});

// Expose the constructor on itself and the prototype for consistency with other
// descriptors.
ReactTextComponent.type = ReactTextComponent;
ReactTextComponent.prototype.type = ReactTextComponent;

module.exports = ReactTextComponent;

},{"./DOMPropertyOperations":9,"./ReactComponent":26,"./escapeTextForBrowser":96,"./mixInto":120}],70:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");

var dirtyComponents = [];

var batchingStrategy = null;

function ensureBatchingStrategy() {
  ("production" !== "development" ? invariant(batchingStrategy, 'ReactUpdates: must inject a batching strategy') : invariant(batchingStrategy));
}

function batchedUpdates(callback, param) {
  ensureBatchingStrategy();
  batchingStrategy.batchedUpdates(callback, param);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates() {
  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.

  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < dirtyComponents.length; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary();
      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          callbacks[j].call(component);
        }
      }
    }
  }
}

function clearDirtyComponents() {
  dirtyComponents.length = 0;
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // Run these in separate functions so the JIT can optimize
    try {
      runBatchedUpdates();
    } finally {
      clearDirtyComponents();
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureBatchingStrategy();

  if (!batchingStrategy.isBatchingUpdates) {
    component.performUpdateIfNecessary();
    callback && callback.call(component);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

var ReactUpdatesInjection = {
  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection
};

module.exports = ReactUpdates;

},{"./ReactPerf":60,"./invariant":108}],71:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  } else {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":14,"./EventPropagators":19,"./ReactInputSelection":52,"./SyntheticEvent":77,"./getActiveElement":99,"./isTextInputElement":111,"./keyOf":115,"./shallowEqual":125}],72:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],73:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var invariant = require("./invariant");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);
    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyPress:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":14,"./EventPluginUtils":18,"./EventPropagators":19,"./SyntheticClipboardEvent":74,"./SyntheticDragEvent":76,"./SyntheticEvent":77,"./SyntheticFocusEvent":78,"./SyntheticKeyboardEvent":79,"./SyntheticMouseEvent":80,"./SyntheticTouchEvent":81,"./SyntheticUIEvent":82,"./SyntheticWheelEvent":83,"./invariant":108,"./keyOf":115}],74:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":77}],75:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":77}],76:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":80}],77:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = require("./PooledClass");

var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");
var merge = require("./merge");
var mergeInto = require("./mergeInto");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

mergeInto(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  mergeInto(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = merge(Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./PooledClass":23,"./emptyFunction":95,"./getEventTarget":101,"./merge":117,"./mergeInto":119}],78:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":82}],79:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventKey = require("./getEventKey");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  // Legacy Interface
  'char': null,
  charCode: null,
  keyCode: null,
  which: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":82,"./getEventKey":100}],80:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":82,"./ViewportMetrics":85}],81:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":82}],82:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: null,
  detail: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":77}],83:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":80}],84:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Bonus:
 * - Reports timing metrics by method name and wrapper index.
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    if (!this.timingMetrics) {
      this.timingMetrics = {};
    }
    this.timingMetrics.methodInvocationTime = 0;
    if (!this.timingMetrics.wrapperInitTimes) {
      this.timingMetrics.wrapperInitTimes = [];
    } else {
      this.timingMetrics.wrapperInitTimes.length = 0;
    }
    if (!this.timingMetrics.wrapperCloseTimes) {
      this.timingMetrics.wrapperCloseTimes = [];
    } else {
      this.timingMetrics.wrapperCloseTimes.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var memberStart = Date.now();
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      var memberEnd = Date.now();
      this.methodInvocationTime += (memberEnd - memberStart);
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var initStart = Date.now();
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        var curInitTime = wrapperInitTimes[i];
        var initEnd = Date.now();
        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);

        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var closeStart = Date.now();
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        var closeEnd = Date.now();
        var curCloseTime = wrapperCloseTimes[i];
        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);

        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":108}],85:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":106}],86:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule accumulate
 */

"use strict";

var invariant = require("./invariant");

/**
 * Accumulates items that must not be null or undefined.
 *
 * This is used to conserve memory by avoiding array allocations.
 *
 * @return {*|array<*>} An accumulation of items.
 */
function accumulate(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulate(...): Accumulated items must be not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  } else {
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
    if (currentIsArray) {
      return current.concat(next);
    } else {
      if (nextIsArray) {
        return [current].concat(next);
      } else {
        return [current, next];
      }
    }
  }
}

module.exports = accumulate;

},{"./invariant":108}],87:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonable good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],88:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":112}],89:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule copyProperties
 */

/**
 * Copy properties from one or more objects (up to 5) into the first object.
 * This is a shallow copy. It mutates the first object and also returns it.
 *
 * NOTE: `arguments` has a very significant performance penalty, which is why
 * we don't support unlimited arguments.
 */
function copyProperties(obj, a, b, c, d, e, f) {
  obj = obj || {};

  if ("production" !== "development") {
    if (f) {
      throw new Error('Too many arguments passed to copyProperties');
    }
  }

  var args = [a, b, c, d, e];
  var ii = 0, v;
  while (args[ii]) {
    v = args[ii++];
    for (var k in v) {
      obj[k] = v[k];
    }

    // IE ignores toString in object iteration.. See:
    // webreflection.blogspot.com/2007/07/quick-fix-internet-explorer-and.html
    if (v.hasOwnProperty && v.hasOwnProperty('toString') &&
        (typeof v.toString != 'undefined') && (obj.toString !== v.toString)) {
      obj.toString = v.toString;
    }
  }

  return obj;
}

module.exports = copyProperties;

},{}],90:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":127}],91:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = require("./ReactCompositeComponent");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {function} componentClass convenience constructor to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(componentClass) {
  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + (
      componentClass.componentConstructor.displayName || ''
    ),

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return this.transferPropsTo(componentClass(null, this.props.children));
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":29,"./invariant":108}],92:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFrom = require("./createArrayFrom");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":20,"./createArrayFrom":90,"./getMarkupWrap":102,"./invariant":108}],93:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule createObjectFrom
 */

/**
 * Construct an object from an array of keys
 * and optionally specified value or list of values.
 *
 *  >>> createObjectFrom(['a','b','c']);
 *  {a: true, b: true, c: true}
 *
 *  >>> createObjectFrom(['a','b','c'], false);
 *  {a: false, b: false, c: false}
 *
 *  >>> createObjectFrom(['a','b','c'], 'monkey');
 *  {c:'monkey', b:'monkey' c:'monkey'}
 *
 *  >>> createObjectFrom(['a','b','c'], [1,2,3]);
 *  {a: 1, b: 2, c: 3}
 *
 *  >>> createObjectFrom(['women', 'men'], [true, false]);
 *  {women: true, men: false}
 *
 * @param   Array   list of keys
 * @param   mixed   optional value or value array.  defaults true.
 * @returns object
 */
function createObjectFrom(keys, values /* = true */) {
  if ("production" !== "development") {
    if (!Array.isArray(keys)) {
      throw new TypeError('Must pass an array of keys.');
    }
  }

  var object = {};
  var isArray = Array.isArray(values);
  if (typeof values == 'undefined') {
    values = true;
  }

  for (var ii = keys.length; ii--;) {
    object[keys[ii]] = isArray ? values[ii] : values;
  }
  return object;
}

module.exports = createObjectFrom;

},{}],94:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = require("./CSSProperty");

/**
 * Convert a value into the proper css writable value. The `styleName` name
 * name should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} styleName CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(styleName, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || CSSProperty.isUnitlessNumber[styleName]) {
    return '' + value; // cast to string
  }

  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":2}],95:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule emptyFunction
 */

var copyProperties = require("./copyProperties");

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

copyProperties(emptyFunction, {
  thatReturns: makeEmptyFunction,
  thatReturnsFalse: makeEmptyFunction(false),
  thatReturnsTrue: makeEmptyFunction(true),
  thatReturnsNull: makeEmptyFunction(null),
  thatReturnsThis: function() { return this; },
  thatReturnsArgument: function(arg) { return arg; }
});

module.exports = emptyFunction;

},{"./copyProperties":89}],96:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;",
  "/": "&#x2f;"
};

var ESCAPE_REGEX = /[&><"'\/]/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],97:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule flattenChildren
 */

"use strict";

var invariant = require("./invariant");
var traverseAllChildren = require("./traverseAllChildren");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  ("production" !== "development" ? invariant(
    !result.hasOwnProperty(name),
    'flattenChildren(...): Encountered two children with the same key, `%s`. ' +
    'Children keys must be unique.',
    name
  ) : invariant(!result.hasOwnProperty(name)));
  if (child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./invariant":108,"./traverseAllChildren":128}],98:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],99:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],100:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

/**
 * Normalization of deprecated HTML5 "key" values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy "which/keyCode" to HTML5 "key"
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  return 'key' in nativeEvent ?
    normalizeKey[nativeEvent.key] || nativeEvent.key :
    translateToKey[nativeEvent.which || nativeEvent.keyCode] || 'Unidentified';
}

module.exports = getEventKey;

},{}],101:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],102:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":20,"./invariant":108}],103:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],104:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],105:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.createElement('div') ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":20}],106:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],107:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],108:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition) {
  if (!condition) {
    var error = new Error(
      'Minified exception occured; use the non-minified dev environment for ' +
      'the full error message and additional helpful warnings.'
    );
    error.framesToPop = 1;
    throw error;
  }
};

if ("production" !== "development") {
  invariant = function(condition, format, a, b, c, d, e, f) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }

    if (!condition) {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      var error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };
}

module.exports = invariant;

},{}],109:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":20}],110:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node !== 'undefined' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],111:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],112:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":110}],113:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      nextClass && (className += ' ' + nextClass);
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],114:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":108}],115:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],116:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule merge
 */

"use strict";

var mergeInto = require("./mergeInto");

/**
 * Shallow merges two structures into a return value, without mutating either.
 *
 * @param {?object} one Optional object with properties to merge from.
 * @param {?object} two Optional object with properties to merge from.
 * @return {object} The shallow extension of one by two.
 */
var merge = function(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;

},{"./mergeInto":119}],118:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeHelpers
 *
 * requiresPolyfills: Array.isArray
 */

"use strict";

var invariant = require("./invariant");
var keyMirror = require("./keyMirror");

/**
 * Maximum number of levels to traverse. Will catch circular structures.
 * @const
 */
var MAX_MERGE_DEPTH = 36;

/**
 * We won't worry about edge cases like new String('x') or new Boolean(true).
 * Functions are considered terminals, and arrays are not.
 * @param {*} o The item/object/value to test.
 * @return {boolean} true iff the argument is a terminal.
 */
var isTerminal = function(o) {
  return typeof o !== 'object' || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  /**
   * Converts null/undefined values into empty object.
   *
   * @param {?Object=} arg Argument to be normalized (nullable optional)
   * @return {!Object}
   */
  normalizeMergeArg: function(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  /**
   * If merging Arrays, a merge strategy *must* be supplied. If not, it is
   * likely the caller's fault. If this function is ever called with anything
   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.
   *
   * @param {*} one Array to merge into.
   * @param {*} two Array to merge from.
   */
  checkMergeArrayArgs: function(one, two) {
    ("production" !== "development" ? invariant(
      Array.isArray(one) && Array.isArray(two),
      'Tried to merge arrays, instead got %s and %s.',
      one,
      two
    ) : invariant(Array.isArray(one) && Array.isArray(two)));
  },

  /**
   * @param {*} one Object to merge into.
   * @param {*} two Object to merge from.
   */
  checkMergeObjectArgs: function(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  /**
   * @param {*} arg
   */
  checkMergeObjectArg: function(arg) {
    ("production" !== "development" ? invariant(
      !isTerminal(arg) && !Array.isArray(arg),
      'Tried to merge an object, instead got %s.',
      arg
    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));
  },

  /**
   * Checks that a merge was not given a circular object or an object that had
   * too great of depth.
   *
   * @param {number} Level of recursion to validate against maximum.
   */
  checkMergeLevel: function(level) {
    ("production" !== "development" ? invariant(
      level < MAX_MERGE_DEPTH,
      'Maximum deep merge depth exceeded. You may be attempting to merge ' +
      'circular structures in an unsupported way.'
    ) : invariant(level < MAX_MERGE_DEPTH));
  },

  /**
   * Checks that the supplied merge strategy is valid.
   *
   * @param {string} Array merge strategy.
   */
  checkArrayStrategy: function(strategy) {
    ("production" !== "development" ? invariant(
      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,
      'You must provide an array strategy to deep merge functions to ' +
      'instruct the deep merge how to resolve merging two arrays.'
    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));
  },

  /**
   * Set of possible behaviors of merge algorithms when encountering two Arrays
   * that must be merged together.
   * - `clobber`: The left `Array` is ignored.
   * - `indexByIndex`: The result is achieved by recursively deep merging at
   *   each index. (not yet supported.)
   */
  ArrayStrategies: keyMirror({
    Clobber: true,
    IndexByIndex: true
  })

};

module.exports = mergeHelpers;

},{"./invariant":108,"./keyMirror":114}],119:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mergeInto
 * @typechecks static-only
 */

"use strict";

var mergeHelpers = require("./mergeHelpers");

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;

/**
 * Shallow merges two structures by mutating the first parameter.
 *
 * @param {object} one Object to be merged into.
 * @param {?object} two Optional object with properties to merge from.
 */
function mergeInto(one, two) {
  checkMergeObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;

},{"./mergeHelpers":118}],120:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule mixInto
 */

"use strict";

/**
 * Simply copies properties to the prototype.
 */
var mixInto = function(constructor, methodBag) {
  var methodName;
  for (methodName in methodBag) {
    if (!methodBag.hasOwnProperty(methodName)) {
      continue;
    }
    constructor.prototype[methodName] = methodBag[methodName];
  }
};

module.exports = mixInto;

},{}],121:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule objMap
 */

"use strict";

/**
 * For each key/value pair, invokes callback func and constructs a resulting
 * object which contains, for every key in obj, values that are the result of
 * of invoking the function:
 *
 *   func(value, key, iteration)
 *
 * @param {?object} obj Object to map keys over
 * @param {function} func Invoked for each key/val pair.
 * @param {?*} context
 * @return {?object} Result of mapping or null if obj is falsey
 */
function objMap(obj, func, context) {
  if (!obj) {
    return null;
  }
  var i = 0;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret[key] = func.call(context, obj[key], key, i++);
    }
  }
  return ret;
}

module.exports = objMap;

},{}],122:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule objMapKeyVal
 */

"use strict";

/**
 * Behaves the same as `objMap` but invokes func with the key first, and value
 * second. Use `objMap` unless you need this special case.
 * Invokes func as:
 *
 *   func(key, value, iteration)
 *
 * @param {?object} obj Object to map keys over
 * @param {!function} func Invoked for each key/val pair.
 * @param {?*} context
 * @return {?object} Result of mapping or null if obj is falsey
 */
function objMapKeyVal(obj, func, context) {
  if (!obj) {
    return null;
  }
  var i = 0;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret[key] = func.call(context, key, obj[key], i++);
    }
  }
  return ret;
}

module.exports = objMapKeyVal;

},{}],123:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactComponent = require("./ReactComponent");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactComponent.isValidComponent(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactComponent.isValidComponent(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactComponent":26,"./invariant":108}],124:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule performanceNow
 * @typechecks static-only
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

/**
 * Detect if we can use window.performance.now() and gracefully
 * fallback to Date.now() if it doesn't exist.
 * We need to support Firefox < 15 for now due to Facebook's webdriver
 * infrastructure.
 */
var performance = null;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.webkitPerformance;
}

if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./ExecutionEnvironment":20}],125:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B'a keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],126:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevComponent` and `nextComponent`, determines if `prevComponent`
 * should be updated as opposed to being destroyed or replaced.
 *
 * @param {?object} prevComponent
 * @param {?object} nextComponent
 * @return {boolean} True if `prevComponent` should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevComponent, nextComponent) {
  // TODO: Remove warning after a release.
  if (prevComponent && nextComponent &&
      prevComponent.constructor === nextComponent.constructor && (
        (prevComponent.props && prevComponent.props.key) ===
        (nextComponent.props && nextComponent.props.key)
      )) {
    if (prevComponent._owner === nextComponent._owner) {
      return true;
    } else {
      if ("production" !== "development") {
        if (prevComponent.state) {
          console.warn(
            'A recent change to React has been found to impact your code. ' +
            'A mounted component will now be unmounted and replaced by a ' +
            'component (of the same class) if their owners are different. ' +
            'Previously, ownership was not considered when updating.',
            prevComponent,
            nextComponent
          );
        }
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],127:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":108}],128:[function(require,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactTextComponent = require("./ReactTextComponent");

var invariant = require("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.props && component.props.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.props.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        var nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        var nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (children.mountComponentIntoNode) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else {
        if (type === 'object') {
          ("production" !== "development" ? invariant(
            !children || children.nodeType !== 1,
            'traverseAllChildren(...): Encountered an invalid child; DOM ' +
            'elements are not valid children of React components.'
          ) : invariant(!children || children.nodeType !== 1));
          for (var key in children) {
            if (children.hasOwnProperty(key)) {
              subtreeCount += traverseAllChildrenImpl(
                children[key],
                (
                  nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
                  wrapUserProvidedKey(key) + SUBSEPARATOR +
                  getComponentKey(children[key], 0)
                ),
                indexSoFar + subtreeCount,
                callback,
                traverseContext
              );
            }
          }
        } else if (type === 'string') {
          var normalizedText = new ReactTextComponent(children);
          callback(traverseContext, normalizedText, storageName, indexSoFar);
          subtreeCount += 1;
        } else if (type === 'number') {
          var normalizedNumber = new ReactTextComponent('' + children);
          callback(traverseContext, normalizedNumber, storageName, indexSoFar);
          subtreeCount += 1;
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children !== null && children !== undefined) {
    traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
  }
}

module.exports = traverseAllChildren;

},{"./ReactInstanceHandles":53,"./ReactTextComponent":69,"./invariant":108}],129:[function(require,module,exports){
/**
 * Copyright 2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {var args=Array.prototype.slice.call(arguments,2);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":95}]},{},[24])
(24)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2202";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15279__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__15279 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15279__delegate.call(this, args);
    };
    G__15279.cljs$lang$maxFixedArity = 0;
    G__15279.cljs$lang$applyTo = function(arglist__15280) {
      var args = cljs.core.seq(arglist__15280);
      return G__15279__delegate(args);
    };
    G__15279.cljs$core$IFn$_invoke$arity$variadic = G__15279__delegate;
    return G__15279;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3467__auto__ = ty;
    if (cljs.core.truth_(and__3467__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3467__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4327__auto___15281 = len;
  var i_15282 = 0;
  while (true) {
    if (i_15282 < n__4327__auto___15281) {
      new_arr[i_15282] = arr[i_15282];
      var G__15283 = i_15282 + 1;
      i_15282 = G__15283;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__15284__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__15284 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15284__delegate.call(this, array, i, idxs);
    };
    G__15284.cljs$lang$maxFixedArity = 2;
    G__15284.cljs$lang$applyTo = function(arglist__15285) {
      var array = cljs.core.first(arglist__15285);
      arglist__15285 = cljs.core.next(arglist__15285);
      var i = cljs.core.first(arglist__15285);
      var idxs = cljs.core.rest(arglist__15285);
      return G__15284__delegate(array, i, idxs);
    };
    G__15284.cljs$core$IFn$_invoke$arity$variadic = G__15284__delegate;
    return G__15284;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__15286__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__15286 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15286__delegate.call(this, array, idx, idx2, idxv);
    };
    G__15286.cljs$lang$maxFixedArity = 3;
    G__15286.cljs$lang$applyTo = function(arglist__15287) {
      var array = cljs.core.first(arglist__15287);
      arglist__15287 = cljs.core.next(arglist__15287);
      var idx = cljs.core.first(arglist__15287);
      arglist__15287 = cljs.core.next(arglist__15287);
      var idx2 = cljs.core.first(arglist__15287);
      var idxv = cljs.core.rest(arglist__15287);
      return G__15286__delegate(array, idx, idx2, idxv);
    };
    G__15286.cljs$core$IFn$_invoke$arity$variadic = G__15286__delegate;
    return G__15286;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj15289 = {};
  return obj15289;
}();
cljs.core.IFn = function() {
  var obj15291 = {};
  return obj15291;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = cljs.core._invoke[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._invoke["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj15293 = {};
  return obj15293;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3467__auto__ = value;
    if (and__3467__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4106__auto__ = value == null ? null : value;
    return function() {
      var or__3479__auto__ = cljs.core._clone[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._clone["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15295 = {};
  return obj15295;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._count[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._count["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15297 = {};
  return obj15297;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._empty[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._empty["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15299 = {};
  return obj15299;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._conj[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._conj["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15301 = {};
  return obj15301;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._nth[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._nth["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._nth[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._nth["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj15303 = {};
  return obj15303;
}();
cljs.core.ISeq = function() {
  var obj15305 = {};
  return obj15305;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._rest[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._rest["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15307 = {};
  return obj15307;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._next[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._next["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15309 = {};
  return obj15309;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._lookup[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._lookup["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._lookup[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._lookup["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj15311 = {};
  return obj15311;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15313 = {};
  return obj15313;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._dissoc[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dissoc["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15315 = {};
  return obj15315;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._key[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._key["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._val[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._val["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15317 = {};
  return obj15317;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._disjoin[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._disjoin["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15319 = {};
  return obj15319;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._peek[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._peek["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._pop[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pop["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15321 = {};
  return obj15321;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_n[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15323 = {};
  return obj15323;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._deref[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._deref["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15325 = {};
  return obj15325;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15327 = {};
  return obj15327;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._meta[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._meta["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15329 = {};
  return obj15329;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._with_meta[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._with_meta["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15331 = {};
  return obj15331;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._reduce[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._reduce["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3467__auto__ = coll;
      if (and__3467__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4106__auto__ = coll == null ? null : coll;
      return function() {
        var or__3479__auto__ = cljs.core._reduce[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._reduce["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj15333 = {};
  return obj15333;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15335 = {};
  return obj15335;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._equiv[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._equiv["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15337 = {};
  return obj15337;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._hash[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._hash["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15339 = {};
  return obj15339;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._seq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._seq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15341 = {};
  return obj15341;
}();
cljs.core.IList = function() {
  var obj15343 = {};
  return obj15343;
}();
cljs.core.IRecord = function() {
  var obj15345 = {};
  return obj15345;
}();
cljs.core.IReversible = function() {
  var obj15347 = {};
  return obj15347;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._rseq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._rseq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15349 = {};
  return obj15349;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._entry_key[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._entry_key["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._comparator[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._comparator["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15351 = {};
  return obj15351;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3467__auto__ = writer;
    if (and__3467__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4106__auto__ = writer == null ? null : writer;
    return function() {
      var or__3479__auto__ = cljs.core._write[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._write["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3467__auto__ = writer;
    if (and__3467__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4106__auto__ = writer == null ? null : writer;
    return function() {
      var or__3479__auto__ = cljs.core._flush[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._flush["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15353 = {};
  return obj15353;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._pr_writer[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15355 = {};
  return obj15355;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3467__auto__ = d;
    if (and__3467__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4106__auto__ = d == null ? null : d;
    return function() {
      var or__3479__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15357 = {};
  return obj15357;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._notify_watches[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._add_watch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._add_watch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = cljs.core._remove_watch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15359 = {};
  return obj15359;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._as_transient[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._as_transient["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15361 = {};
  return obj15361;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15363 = {};
  return obj15363;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15365 = {};
  return obj15365;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15367 = {};
  return obj15367;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15369 = {};
  return obj15369;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3467__auto__ = tcoll;
    if (and__3467__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4106__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3479__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15371 = {};
  return obj15371;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._compare[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._compare["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15373 = {};
  return obj15373;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._drop_first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._drop_first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15375 = {};
  return obj15375;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_first[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15377 = {};
  return obj15377;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3467__auto__ = coll;
    if (and__3467__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4106__auto__ = coll == null ? null : coll;
    return function() {
      var or__3479__auto__ = cljs.core._chunked_next[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15379 = {};
  return obj15379;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._name[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._name["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._namespace[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._namespace["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3467__auto__) {
        return b.ns;
      } else {
        return and__3467__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3890__auto__ = self__._hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__15381 = null;
  var G__15381__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__15381__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__15381 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15381__2.call(this, self__, coll);
      case 3:
        return G__15381__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15381;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15380) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15380)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__15383 = value;
  if (G__15383) {
    var bit__4129__auto__ = G__15383.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4129__auto__ || G__15383.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15383.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15383);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__15383);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15385 = coll;
      if (G__15385) {
        var bit__4122__auto__ = G__15385.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4122__auto__ || G__15385.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15387 = coll;
      if (G__15387) {
        var bit__4122__auto__ = G__15387.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__15387.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15389 = coll;
      if (G__15389) {
        var bit__4122__auto__ = G__15389.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__15389.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15391 = coll;
      if (G__15391) {
        var bit__4122__auto__ = G__15391.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4122__auto__ || G__15391.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__15392__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15393 = y;
            var G__15394 = cljs.core.first.call(null, more);
            var G__15395 = cljs.core.next.call(null, more);
            x = G__15393;
            y = G__15394;
            more = G__15395;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15392 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15392__delegate.call(this, x, y, more);
    };
    G__15392.cljs$lang$maxFixedArity = 2;
    G__15392.cljs$lang$applyTo = function(arglist__15396) {
      var x = cljs.core.first(arglist__15396);
      arglist__15396 = cljs.core.next(arglist__15396);
      var y = cljs.core.first(arglist__15396);
      var more = cljs.core.rest(arglist__15396);
      return G__15392__delegate(x, y, more);
    };
    G__15392.cljs$core$IFn$_invoke$arity$variadic = G__15392__delegate;
    return G__15392;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15397 = nval;
            var G__15398 = n + 1;
            val = G__15397;
            n = G__15398;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15399 = nval;
          var G__15400 = n + 1;
          val__$1 = G__15399;
          n = G__15400;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15401 = nval;
          var G__15402 = n + 1;
          val__$1 = G__15401;
          n = G__15402;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__15403 = nval;
            var G__15404 = n + 1;
            val = G__15403;
            n = G__15404;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15405 = nval;
          var G__15406 = n + 1;
          val__$1 = G__15405;
          n = G__15406;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15407 = nval;
          var G__15408 = n + 1;
          val__$1 = G__15407;
          n = G__15408;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__15410 = x;
  if (G__15410) {
    var bit__4129__auto__ = G__15410.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4129__auto__ || G__15410.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__15410.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15410);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__15410);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__15412 = x;
  if (G__15412) {
    var bit__4129__auto__ = G__15412.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4129__auto__ || G__15412.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__15412.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15412);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__15412);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__15413 = sn;
      s = G__15413;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__15414__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15415 = conj.call(null, coll, x);
          var G__15416 = cljs.core.first.call(null, xs);
          var G__15417 = cljs.core.next.call(null, xs);
          coll = G__15415;
          x = G__15416;
          xs = G__15417;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__15414 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15414__delegate.call(this, coll, x, xs);
    };
    G__15414.cljs$lang$maxFixedArity = 2;
    G__15414.cljs$lang$applyTo = function(arglist__15418) {
      var coll = cljs.core.first(arglist__15418);
      arglist__15418 = cljs.core.next(arglist__15418);
      var x = cljs.core.first(arglist__15418);
      var xs = cljs.core.rest(arglist__15418);
      return G__15414__delegate(coll, x, xs);
    };
    G__15414.cljs$core$IFn$_invoke$arity$variadic = G__15414__delegate;
    return G__15414;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__15419 = cljs.core.next.call(null, s);
      var G__15420 = acc + 1;
      s = G__15419;
      acc = G__15420;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15422 = coll;
      if (G__15422) {
        var bit__4122__auto__ = G__15422.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4122__auto__ || G__15422.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15423 = cljs.core.next.call(null, coll);
              var G__15424 = n - 1;
              coll = G__15423;
              n = G__15424;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__15425 = cljs.core.next.call(null, coll);
              var G__15426 = n - 1;
              var G__15427 = not_found;
              coll = G__15425;
              n = G__15426;
              not_found = G__15427;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__15432 = coll;
          if (G__15432) {
            var bit__4122__auto__ = G__15432.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4122__auto__ || G__15432.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15433 = coll;
                  if (G__15433) {
                    var bit__4129__auto__ = G__15433.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4129__auto__ || G__15433.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15433.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15433);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15433);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__15434 = coll;
          if (G__15434) {
            var bit__4122__auto__ = G__15434.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4122__auto__ || G__15434.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__15435 = coll;
                  if (G__15435) {
                    var bit__4129__auto__ = G__15435.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4129__auto__ || G__15435.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__15435.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15435);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15435);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__15438 = o;
        if (G__15438) {
          var bit__4122__auto__ = G__15438.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4122__auto__ || G__15438.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__15439 = o;
        if (G__15439) {
          var bit__4122__auto__ = G__15439.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4122__auto__ || G__15439.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__15440__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__15441 = ret;
          var G__15442 = cljs.core.first.call(null, kvs);
          var G__15443 = cljs.core.second.call(null, kvs);
          var G__15444 = cljs.core.nnext.call(null, kvs);
          coll = G__15441;
          k = G__15442;
          v = G__15443;
          kvs = G__15444;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__15440 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15440__delegate.call(this, coll, k, v, kvs);
    };
    G__15440.cljs$lang$maxFixedArity = 3;
    G__15440.cljs$lang$applyTo = function(arglist__15445) {
      var coll = cljs.core.first(arglist__15445);
      arglist__15445 = cljs.core.next(arglist__15445);
      var k = cljs.core.first(arglist__15445);
      arglist__15445 = cljs.core.next(arglist__15445);
      var v = cljs.core.first(arglist__15445);
      var kvs = cljs.core.rest(arglist__15445);
      return G__15440__delegate(coll, k, v, kvs);
    };
    G__15440.cljs$core$IFn$_invoke$arity$variadic = G__15440__delegate;
    return G__15440;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__15446__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15447 = ret;
            var G__15448 = cljs.core.first.call(null, ks);
            var G__15449 = cljs.core.next.call(null, ks);
            coll = G__15447;
            k = G__15448;
            ks = G__15449;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15446 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15446__delegate.call(this, coll, k, ks);
    };
    G__15446.cljs$lang$maxFixedArity = 2;
    G__15446.cljs$lang$applyTo = function(arglist__15450) {
      var coll = cljs.core.first(arglist__15450);
      arglist__15450 = cljs.core.next(arglist__15450);
      var k = cljs.core.first(arglist__15450);
      var ks = cljs.core.rest(arglist__15450);
      return G__15446__delegate(coll, k, ks);
    };
    G__15446.cljs$core$IFn$_invoke$arity$variadic = G__15446__delegate;
    return G__15446;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3479__auto__ = goog.isFunction(f);
  if (or__3479__auto__) {
    return or__3479__auto__;
  } else {
    var G__15454 = f;
    if (G__15454) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto____$1 = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto____$1)) {
          return or__3479__auto____$1;
        } else {
          return G__15454.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__15454.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15454);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__15454);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__15462 = o;
    if (G__15462) {
      var bit__4129__auto__ = G__15462.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4129__auto__ || G__15462.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15462.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15462);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15462);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t15463 !== "undefined") {
      } else {
        cljs.core.t15463 = function(meta, o, with_meta, meta15464) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta15464 = meta15464;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t15463.cljs$lang$type = true;
        cljs.core.t15463.cljs$lang$ctorStr = "cljs.core/t15463";
        cljs.core.t15463.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/t15463");
        };
        cljs.core.t15463.prototype.call = function() {
          var G__15467__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__15467 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__15467__delegate.call(this, self__, args);
          };
          G__15467.cljs$lang$maxFixedArity = 1;
          G__15467.cljs$lang$applyTo = function(arglist__15468) {
            var self__ = cljs.core.first(arglist__15468);
            var args = cljs.core.rest(arglist__15468);
            return G__15467__delegate(self__, args);
          };
          G__15467.cljs$core$IFn$_invoke$arity$variadic = G__15467__delegate;
          return G__15467;
        }();
        cljs.core.t15463.prototype.apply = function(self__, args15466) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15466)));
        };
        cljs.core.t15463.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__15469__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__15469 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__15469__delegate.call(this, args);
          };
          G__15469.cljs$lang$maxFixedArity = 0;
          G__15469.cljs$lang$applyTo = function(arglist__15470) {
            var args = cljs.core.seq(arglist__15470);
            return G__15469__delegate(args);
          };
          G__15469.cljs$core$IFn$_invoke$arity$variadic = G__15469__delegate;
          return G__15469;
        }();
        cljs.core.t15463.prototype.cljs$core$Fn$ = true;
        cljs.core.t15463.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15465) {
          var self__ = this;
          var _15465__$1 = this;
          return self__.meta15464;
        };
        cljs.core.t15463.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15465, meta15464__$1) {
          var self__ = this;
          var _15465__$1 = this;
          return new cljs.core.t15463(self__.meta, self__.o, self__.with_meta, meta15464__$1);
        };
        cljs.core.__GT_t15463 = function __GT_t15463(meta__$1, o__$1, with_meta__$1, meta15464) {
          return new cljs.core.t15463(meta__$1, o__$1, with_meta__$1, meta15464);
        };
      }
      return new cljs.core.t15463(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3467__auto__ = !(o == null);
    if (and__3467__auto__) {
      var G__15474 = o;
      if (G__15474) {
        var bit__4129__auto__ = G__15474.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4129__auto__ || G__15474.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__15474.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15474);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__15474);
      }
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__15475__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__15476 = ret;
            var G__15477 = cljs.core.first.call(null, ks);
            var G__15478 = cljs.core.next.call(null, ks);
            coll = G__15476;
            k = G__15477;
            ks = G__15478;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__15475 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15475__delegate.call(this, coll, k, ks);
    };
    G__15475.cljs$lang$maxFixedArity = 2;
    G__15475.cljs$lang$applyTo = function(arglist__15479) {
      var coll = cljs.core.first(arglist__15479);
      arglist__15479 = cljs.core.next(arglist__15479);
      var k = cljs.core.first(arglist__15479);
      var ks = cljs.core.rest(arglist__15479);
      return G__15475__delegate(coll, k, ks);
    };
    G__15475.cljs$core$IFn$_invoke$arity$variadic = G__15475__delegate;
    return G__15475;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj15481 = {};
  return obj15481;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15485 = {};
      return obj15485;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__15487 = o;
    if (G__15487) {
      var bit__4122__auto__ = G__15487.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4122__auto__ || G__15487.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15489 = x;
    if (G__15489) {
      var bit__4129__auto__ = G__15489.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4129__auto__ || G__15489.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__15489.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15489);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__15489);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15491 = x;
    if (G__15491) {
      var bit__4129__auto__ = G__15491.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4129__auto__ || G__15491.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15491.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15491);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__15491);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__15493 = x;
  if (G__15493) {
    var bit__4129__auto__ = G__15493.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4129__auto__ || G__15493.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15493.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15493);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__15493);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__15495 = x;
  if (G__15495) {
    var bit__4129__auto__ = G__15495.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4129__auto__ || G__15495.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15495.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15495);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__15495);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__15497 = x;
  if (G__15497) {
    var bit__4129__auto__ = G__15497.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4129__auto__ || G__15497.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15497.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15497);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__15497);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__15499 = x;
  if (G__15499) {
    var bit__4129__auto__ = G__15499.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4129__auto__ || G__15499.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15499.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15499);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__15499);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15501 = x;
    if (G__15501) {
      var bit__4129__auto__ = G__15501.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4129__auto__ || G__15501.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15501.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15501);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__15501);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__15503 = x;
  if (G__15503) {
    var bit__4129__auto__ = G__15503.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4129__auto__ || G__15503.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15503.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15503);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__15503);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__15505 = x;
  if (G__15505) {
    var bit__4122__auto__ = G__15505.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4122__auto__ || G__15505.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj15509 = {};
    return obj15509;
  };
  var js_obj__1 = function() {
    var G__15510__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__15510 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15510__delegate.call(this, keyvals);
    };
    G__15510.cljs$lang$maxFixedArity = 0;
    G__15510.cljs$lang$applyTo = function(arglist__15511) {
      var keyvals = cljs.core.seq(arglist__15511);
      return G__15510__delegate(keyvals);
    };
    G__15510.cljs$core$IFn$_invoke$arity$variadic = G__15510__delegate;
    return G__15510;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15512 = i__$1 + 1;
      var G__15513 = j__$1 + 1;
      var G__15514 = len__$1 - 1;
      i__$1 = G__15512;
      j__$1 = G__15513;
      len__$1 = G__15514;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15515 = i__$1 - 1;
      var G__15516 = j__$1 - 1;
      var G__15517 = len__$1 - 1;
      i__$1 = G__15515;
      j__$1 = G__15516;
      len__$1 = G__15517;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj15519 = {};
  return obj15519;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__15521 = s;
    if (G__15521) {
      var bit__4129__auto__ = G__15521.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4129__auto__ || G__15521.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__15521.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15521);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__15521);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__15523 = s;
  if (G__15523) {
    var bit__4129__auto__ = G__15523.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4129__auto__ || G__15523.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__15523.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15523);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15523);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3479__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3479__auto__) {
    return or__3479__auto__;
  } else {
    var G__15527 = f;
    if (G__15527) {
      var bit__4129__auto__ = G__15527.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4129__auto__ || G__15527.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__15527.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15527);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__15527);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__15528__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__15529 = cljs.core.conj.call(null, s, x__$1);
              var G__15530 = etc;
              s = G__15529;
              xs = G__15530;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__15528 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15528__delegate.call(this, x, y, more);
    };
    G__15528.cljs$lang$maxFixedArity = 2;
    G__15528.cljs$lang$applyTo = function(arglist__15531) {
      var x = cljs.core.first(arglist__15531);
      arglist__15531 = cljs.core.next(arglist__15531);
      var y = cljs.core.first(arglist__15531);
      var more = cljs.core.rest(arglist__15531);
      return G__15528__delegate(x, y, more);
    };
    G__15528.cljs$core$IFn$_invoke$arity$variadic = G__15528__delegate;
    return G__15528;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3479__auto__ = cljs.core.seq.call(null, coll);
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__15533 = x;
            if (G__15533) {
              var bit__4122__auto__ = G__15533.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4122__auto__ || G__15533.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__15534 = xs;
        var G__15535 = ys;
        var G__15536 = len;
        var G__15537 = n + 1;
        xs = G__15534;
        ys = G__15535;
        len = G__15536;
        n = G__15537;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__15538 = nval;
          var G__15539 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__15538;
          coll__$1 = G__15539;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__15542 = coll;
      if (G__15542) {
        var bit__4122__auto__ = G__15542.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4122__auto__ || G__15542.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__15543 = coll;
      if (G__15543) {
        var bit__4122__auto__ = G__15543.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4122__auto__ || G__15543.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__15544__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__15544 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15544__delegate.call(this, x, y, more);
    };
    G__15544.cljs$lang$maxFixedArity = 2;
    G__15544.cljs$lang$applyTo = function(arglist__15545) {
      var x = cljs.core.first(arglist__15545);
      arglist__15545 = cljs.core.next(arglist__15545);
      var y = cljs.core.first(arglist__15545);
      var more = cljs.core.rest(arglist__15545);
      return G__15544__delegate(x, y, more);
    };
    G__15544.cljs$core$IFn$_invoke$arity$variadic = G__15544__delegate;
    return G__15544;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__15546__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__15546 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15546__delegate.call(this, x, y, more);
    };
    G__15546.cljs$lang$maxFixedArity = 2;
    G__15546.cljs$lang$applyTo = function(arglist__15547) {
      var x = cljs.core.first(arglist__15547);
      arglist__15547 = cljs.core.next(arglist__15547);
      var y = cljs.core.first(arglist__15547);
      var more = cljs.core.rest(arglist__15547);
      return G__15546__delegate(x, y, more);
    };
    G__15546.cljs$core$IFn$_invoke$arity$variadic = G__15546__delegate;
    return G__15546;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__15548__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__15548 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15548__delegate.call(this, x, y, more);
    };
    G__15548.cljs$lang$maxFixedArity = 2;
    G__15548.cljs$lang$applyTo = function(arglist__15549) {
      var x = cljs.core.first(arglist__15549);
      arglist__15549 = cljs.core.next(arglist__15549);
      var y = cljs.core.first(arglist__15549);
      var more = cljs.core.rest(arglist__15549);
      return G__15548__delegate(x, y, more);
    };
    G__15548.cljs$core$IFn$_invoke$arity$variadic = G__15548__delegate;
    return G__15548;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__15550__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__15550 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15550__delegate.call(this, x, y, more);
    };
    G__15550.cljs$lang$maxFixedArity = 2;
    G__15550.cljs$lang$applyTo = function(arglist__15551) {
      var x = cljs.core.first(arglist__15551);
      arglist__15551 = cljs.core.next(arglist__15551);
      var y = cljs.core.first(arglist__15551);
      var more = cljs.core.rest(arglist__15551);
      return G__15550__delegate(x, y, more);
    };
    G__15550.cljs$core$IFn$_invoke$arity$variadic = G__15550__delegate;
    return G__15550;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__15552__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__15553 = y;
            var G__15554 = cljs.core.first.call(null, more);
            var G__15555 = cljs.core.next.call(null, more);
            x = G__15553;
            y = G__15554;
            more = G__15555;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15552 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15552__delegate.call(this, x, y, more);
    };
    G__15552.cljs$lang$maxFixedArity = 2;
    G__15552.cljs$lang$applyTo = function(arglist__15556) {
      var x = cljs.core.first(arglist__15556);
      arglist__15556 = cljs.core.next(arglist__15556);
      var y = cljs.core.first(arglist__15556);
      var more = cljs.core.rest(arglist__15556);
      return G__15552__delegate(x, y, more);
    };
    G__15552.cljs$core$IFn$_invoke$arity$variadic = G__15552__delegate;
    return G__15552;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__15557__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__15558 = y;
            var G__15559 = cljs.core.first.call(null, more);
            var G__15560 = cljs.core.next.call(null, more);
            x = G__15558;
            y = G__15559;
            more = G__15560;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15557 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15557__delegate.call(this, x, y, more);
    };
    G__15557.cljs$lang$maxFixedArity = 2;
    G__15557.cljs$lang$applyTo = function(arglist__15561) {
      var x = cljs.core.first(arglist__15561);
      arglist__15561 = cljs.core.next(arglist__15561);
      var y = cljs.core.first(arglist__15561);
      var more = cljs.core.rest(arglist__15561);
      return G__15557__delegate(x, y, more);
    };
    G__15557.cljs$core$IFn$_invoke$arity$variadic = G__15557__delegate;
    return G__15557;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__15562__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__15563 = y;
            var G__15564 = cljs.core.first.call(null, more);
            var G__15565 = cljs.core.next.call(null, more);
            x = G__15563;
            y = G__15564;
            more = G__15565;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15562 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15562__delegate.call(this, x, y, more);
    };
    G__15562.cljs$lang$maxFixedArity = 2;
    G__15562.cljs$lang$applyTo = function(arglist__15566) {
      var x = cljs.core.first(arglist__15566);
      arglist__15566 = cljs.core.next(arglist__15566);
      var y = cljs.core.first(arglist__15566);
      var more = cljs.core.rest(arglist__15566);
      return G__15562__delegate(x, y, more);
    };
    G__15562.cljs$core$IFn$_invoke$arity$variadic = G__15562__delegate;
    return G__15562;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__15567__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__15568 = y;
            var G__15569 = cljs.core.first.call(null, more);
            var G__15570 = cljs.core.next.call(null, more);
            x = G__15568;
            y = G__15569;
            more = G__15570;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15567 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15567__delegate.call(this, x, y, more);
    };
    G__15567.cljs$lang$maxFixedArity = 2;
    G__15567.cljs$lang$applyTo = function(arglist__15571) {
      var x = cljs.core.first(arglist__15571);
      arglist__15571 = cljs.core.next(arglist__15571);
      var y = cljs.core.first(arglist__15571);
      var more = cljs.core.rest(arglist__15571);
      return G__15567__delegate(x, y, more);
    };
    G__15567.cljs$core$IFn$_invoke$arity$variadic = G__15567__delegate;
    return G__15567;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3786__auto__ = x;
    var y__3787__auto__ = y;
    return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
  };
  var max__3 = function() {
    var G__15572__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3786__auto__ = x;
        var y__3787__auto__ = y;
        return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
      }(), more);
    };
    var G__15572 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15572__delegate.call(this, x, y, more);
    };
    G__15572.cljs$lang$maxFixedArity = 2;
    G__15572.cljs$lang$applyTo = function(arglist__15573) {
      var x = cljs.core.first(arglist__15573);
      arglist__15573 = cljs.core.next(arglist__15573);
      var y = cljs.core.first(arglist__15573);
      var more = cljs.core.rest(arglist__15573);
      return G__15572__delegate(x, y, more);
    };
    G__15572.cljs$core$IFn$_invoke$arity$variadic = G__15572__delegate;
    return G__15572;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3793__auto__ = x;
    var y__3794__auto__ = y;
    return x__3793__auto__ < y__3794__auto__ ? x__3793__auto__ : y__3794__auto__;
  };
  var min__3 = function() {
    var G__15574__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3793__auto__ = x;
        var y__3794__auto__ = y;
        return x__3793__auto__ < y__3794__auto__ ? x__3793__auto__ : y__3794__auto__;
      }(), more);
    };
    var G__15574 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15574__delegate.call(this, x, y, more);
    };
    G__15574.cljs$lang$maxFixedArity = 2;
    G__15574.cljs$lang$applyTo = function(arglist__15575) {
      var x = cljs.core.first(arglist__15575);
      arglist__15575 = cljs.core.next(arglist__15575);
      var y = cljs.core.first(arglist__15575);
      var more = cljs.core.rest(arglist__15575);
      return G__15574__delegate(x, y, more);
    };
    G__15574.cljs$core$IFn$_invoke$arity$variadic = G__15574__delegate;
    return G__15574;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__15576__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__15576 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15576__delegate.call(this, x, y, more);
    };
    G__15576.cljs$lang$maxFixedArity = 2;
    G__15576.cljs$lang$applyTo = function(arglist__15577) {
      var x = cljs.core.first(arglist__15577);
      arglist__15577 = cljs.core.next(arglist__15577);
      var y = cljs.core.first(arglist__15577);
      var more = cljs.core.rest(arglist__15577);
      return G__15576__delegate(x, y, more);
    };
    G__15576.cljs$core$IFn$_invoke$arity$variadic = G__15576__delegate;
    return G__15576;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__15578__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__15578 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15578__delegate.call(this, x, y, more);
    };
    G__15578.cljs$lang$maxFixedArity = 2;
    G__15578.cljs$lang$applyTo = function(arglist__15579) {
      var x = cljs.core.first(arglist__15579);
      arglist__15579 = cljs.core.next(arglist__15579);
      var y = cljs.core.first(arglist__15579);
      var more = cljs.core.rest(arglist__15579);
      return G__15578__delegate(x, y, more);
    };
    G__15578.cljs$core$IFn$_invoke$arity$variadic = G__15578__delegate;
    return G__15578;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__15580__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__15580 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15580__delegate.call(this, x, y, more);
    };
    G__15580.cljs$lang$maxFixedArity = 2;
    G__15580.cljs$lang$applyTo = function(arglist__15581) {
      var x = cljs.core.first(arglist__15581);
      arglist__15581 = cljs.core.next(arglist__15581);
      var y = cljs.core.first(arglist__15581);
      var more = cljs.core.rest(arglist__15581);
      return G__15580__delegate(x, y, more);
    };
    G__15580.cljs$core$IFn$_invoke$arity$variadic = G__15580__delegate;
    return G__15580;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__15582__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__15582 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15582__delegate.call(this, x, y, more);
    };
    G__15582.cljs$lang$maxFixedArity = 2;
    G__15582.cljs$lang$applyTo = function(arglist__15583) {
      var x = cljs.core.first(arglist__15583);
      arglist__15583 = cljs.core.next(arglist__15583);
      var y = cljs.core.first(arglist__15583);
      var more = cljs.core.rest(arglist__15583);
      return G__15582__delegate(x, y, more);
    };
    G__15582.cljs$core$IFn$_invoke$arity$variadic = G__15582__delegate;
    return G__15582;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__15584__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__15584 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15584__delegate.call(this, x, y, more);
    };
    G__15584.cljs$lang$maxFixedArity = 2;
    G__15584.cljs$lang$applyTo = function(arglist__15585) {
      var x = cljs.core.first(arglist__15585);
      arglist__15585 = cljs.core.next(arglist__15585);
      var y = cljs.core.first(arglist__15585);
      var more = cljs.core.rest(arglist__15585);
      return G__15584__delegate(x, y, more);
    };
    G__15584.cljs$core$IFn$_invoke$arity$variadic = G__15584__delegate;
    return G__15584;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__15586__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__15586 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15586__delegate.call(this, x, y, more);
    };
    G__15586.cljs$lang$maxFixedArity = 2;
    G__15586.cljs$lang$applyTo = function(arglist__15587) {
      var x = cljs.core.first(arglist__15587);
      arglist__15587 = cljs.core.next(arglist__15587);
      var y = cljs.core.first(arglist__15587);
      var more = cljs.core.rest(arglist__15587);
      return G__15586__delegate(x, y, more);
    };
    G__15586.cljs$core$IFn$_invoke$arity$variadic = G__15586__delegate;
    return G__15586;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__15588__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__15588 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15588__delegate.call(this, x, y, more);
    };
    G__15588.cljs$lang$maxFixedArity = 2;
    G__15588.cljs$lang$applyTo = function(arglist__15589) {
      var x = cljs.core.first(arglist__15589);
      arglist__15589 = cljs.core.next(arglist__15589);
      var y = cljs.core.first(arglist__15589);
      var more = cljs.core.rest(arglist__15589);
      return G__15588__delegate(x, y, more);
    };
    G__15588.cljs$core$IFn$_invoke$arity$variadic = G__15588__delegate;
    return G__15588;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__15590__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__15591 = y;
            var G__15592 = cljs.core.first.call(null, more);
            var G__15593 = cljs.core.next.call(null, more);
            x = G__15591;
            y = G__15592;
            more = G__15593;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__15590 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15590__delegate.call(this, x, y, more);
    };
    G__15590.cljs$lang$maxFixedArity = 2;
    G__15590.cljs$lang$applyTo = function(arglist__15594) {
      var x = cljs.core.first(arglist__15594);
      arglist__15594 = cljs.core.next(arglist__15594);
      var y = cljs.core.first(arglist__15594);
      var more = cljs.core.rest(arglist__15594);
      return G__15590__delegate(x, y, more);
    };
    G__15590.cljs$core$IFn$_invoke$arity$variadic = G__15590__delegate;
    return G__15590;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__15595 = n__$1 - 1;
      var G__15596 = cljs.core.next.call(null, xs);
      n__$1 = G__15595;
      xs = G__15596;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__15597__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__15598 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__15599 = cljs.core.next.call(null, more);
          sb = G__15598;
          more = G__15599;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__15597 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15597__delegate.call(this, x, ys);
    };
    G__15597.cljs$lang$maxFixedArity = 1;
    G__15597.cljs$lang$applyTo = function(arglist__15600) {
      var x = cljs.core.first(arglist__15600);
      var ys = cljs.core.rest(arglist__15600);
      return G__15597__delegate(x, ys);
    };
    G__15597.cljs$core$IFn$_invoke$arity$variadic = G__15597__delegate;
    return G__15597;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__15601 = cljs.core.next.call(null, xs);
            var G__15602 = cljs.core.next.call(null, ys);
            xs = G__15601;
            ys = G__15602;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__15603 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__15604 = cljs.core.next.call(null, s);
        res = G__15603;
        s = G__15604;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__15605 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__15606 = cljs.core.next.call(null, s);
      h = G__15605;
      s = G__15606;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__15607 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__15608 = cljs.core.next.call(null, s__$1);
      h = G__15607;
      s__$1 = G__15608;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__15615_15621 = cljs.core.seq.call(null, fn_map);
  var chunk__15616_15622 = null;
  var count__15617_15623 = 0;
  var i__15618_15624 = 0;
  while (true) {
    if (i__15618_15624 < count__15617_15623) {
      var vec__15619_15625 = cljs.core._nth.call(null, chunk__15616_15622, i__15618_15624);
      var key_name_15626 = cljs.core.nth.call(null, vec__15619_15625, 0, null);
      var f_15627 = cljs.core.nth.call(null, vec__15619_15625, 1, null);
      var str_name_15628 = cljs.core.name.call(null, key_name_15626);
      obj[str_name_15628] = f_15627;
      var G__15629 = seq__15615_15621;
      var G__15630 = chunk__15616_15622;
      var G__15631 = count__15617_15623;
      var G__15632 = i__15618_15624 + 1;
      seq__15615_15621 = G__15629;
      chunk__15616_15622 = G__15630;
      count__15617_15623 = G__15631;
      i__15618_15624 = G__15632;
      continue;
    } else {
      var temp__4126__auto___15633 = cljs.core.seq.call(null, seq__15615_15621);
      if (temp__4126__auto___15633) {
        var seq__15615_15634__$1 = temp__4126__auto___15633;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15615_15634__$1)) {
          var c__4227__auto___15635 = cljs.core.chunk_first.call(null, seq__15615_15634__$1);
          var G__15636 = cljs.core.chunk_rest.call(null, seq__15615_15634__$1);
          var G__15637 = c__4227__auto___15635;
          var G__15638 = cljs.core.count.call(null, c__4227__auto___15635);
          var G__15639 = 0;
          seq__15615_15621 = G__15636;
          chunk__15616_15622 = G__15637;
          count__15617_15623 = G__15638;
          i__15618_15624 = G__15639;
          continue;
        } else {
          var vec__15620_15640 = cljs.core.first.call(null, seq__15615_15634__$1);
          var key_name_15641 = cljs.core.nth.call(null, vec__15620_15640, 0, null);
          var f_15642 = cljs.core.nth.call(null, vec__15620_15640, 1, null);
          var str_name_15643 = cljs.core.name.call(null, key_name_15641);
          obj[str_name_15643] = f_15642;
          var G__15644 = cljs.core.next.call(null, seq__15615_15634__$1);
          var G__15645 = null;
          var G__15646 = 0;
          var G__15647 = 0;
          seq__15615_15621 = G__15644;
          chunk__15616_15622 = G__15645;
          count__15617_15623 = G__15646;
          i__15618_15624 = G__15647;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__15649 = coll;
  if (G__15649) {
    var bit__4129__auto__ = G__15649.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4129__auto__ || G__15649.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__15649.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15649);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__15649);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__15650 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__15650;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__15651 = i - 1;
        var G__15652 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__15651;
        r = G__15652;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__15653) {
    var xs = cljs.core.seq(arglist__15653);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3479__auto__ = coll == null;
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      var G__15657 = coll;
      if (G__15657) {
        var bit__4122__auto__ = G__15657.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4122__auto__ || G__15657.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__15659 = x;
  if (G__15659) {
    var bit__4129__auto__ = G__15659.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4129__auto__ || G__15659.cljs$core$IList$) {
      return true;
    } else {
      if (!G__15659.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15659);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__15659);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15661 = null;
  var G__15661__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__15661__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__15661 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15661__2.call(this, self__, coll);
      case 3:
        return G__15661__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15661;
}();
cljs.core.Keyword.prototype.apply = function(self__, args15660) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15660)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__15663 = x;
    if (G__15663) {
      var bit__4122__auto__ = G__15663.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4122__auto__ || G__15663.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__15664 = ls.sval();
        ls = G__15664;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__15666 = s;
    if (G__15666) {
      var bit__4122__auto__ = G__15666.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4122__auto__ || G__15666.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__15667 = cljs.core.next.call(null, s__$1);
      s__$1 = G__15667;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_15668 = 0;
  var xs_15669 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_15669) {
      ret[i_15668] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_15669));
      var G__15670 = i_15668 + 1;
      var G__15671 = cljs.core.next.call(null, xs_15669);
      i_15668 = G__15670;
      xs_15669 = G__15671;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15672 = i + 1;
          var G__15673 = cljs.core.next.call(null, s__$1);
          i = G__15672;
          s__$1 = G__15673;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___15674 = size;
      var i_15675 = 0;
      while (true) {
        if (i_15675 < n__4327__auto___15674) {
          a[i_15675] = init_val_or_seq;
          var G__15676 = i_15675 + 1;
          i_15675 = G__15676;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15677 = i + 1;
          var G__15678 = cljs.core.next.call(null, s__$1);
          i = G__15677;
          s__$1 = G__15678;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___15679 = size;
      var i_15680 = 0;
      while (true) {
        if (i_15680 < n__4327__auto___15679) {
          a[i_15680] = init_val_or_seq;
          var G__15681 = i_15680 + 1;
          i_15680 = G__15681;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15682 = i + 1;
          var G__15683 = cljs.core.next.call(null, s__$1);
          i = G__15682;
          s__$1 = G__15683;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___15684 = size;
      var i_15685 = 0;
      while (true) {
        if (i_15685 < n__4327__auto___15684) {
          a[i_15685] = init_val_or_seq;
          var G__15686 = i_15685 + 1;
          i_15685 = G__15686;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__15687 = i + 1;
          var G__15688 = cljs.core.next.call(null, s__$1);
          i = G__15687;
          s__$1 = G__15688;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4327__auto___15689 = size;
      var i_15690 = 0;
      while (true) {
        if (i_15690 < n__4327__auto___15689) {
          a[i_15690] = init_val_or_seq;
          var G__15691 = i_15690 + 1;
          i_15690 = G__15691;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__15692 = cljs.core.next.call(null, s__$1);
        var G__15693 = i - 1;
        var G__15694 = sum + 1;
        s__$1 = G__15692;
        i = G__15693;
        sum = G__15694;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__15695__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__15695 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15695__delegate.call(this, x, y, zs);
    };
    G__15695.cljs$lang$maxFixedArity = 2;
    G__15695.cljs$lang$applyTo = function(arglist__15696) {
      var x = cljs.core.first(arglist__15696);
      arglist__15696 = cljs.core.next(arglist__15696);
      var y = cljs.core.first(arglist__15696);
      var zs = cljs.core.rest(arglist__15696);
      return G__15695__delegate(x, y, zs);
    };
    G__15695.cljs$core$IFn$_invoke$arity$variadic = G__15695__delegate;
    return G__15695;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__15697__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__15697 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15697__delegate.call(this, a, b, c, d, more);
    };
    G__15697.cljs$lang$maxFixedArity = 4;
    G__15697.cljs$lang$applyTo = function(arglist__15698) {
      var a = cljs.core.first(arglist__15698);
      arglist__15698 = cljs.core.next(arglist__15698);
      var b = cljs.core.first(arglist__15698);
      arglist__15698 = cljs.core.next(arglist__15698);
      var c = cljs.core.first(arglist__15698);
      arglist__15698 = cljs.core.next(arglist__15698);
      var d = cljs.core.first(arglist__15698);
      var more = cljs.core.rest(arglist__15698);
      return G__15697__delegate(a, b, c, d, more);
    };
    G__15697.cljs$core$IFn$_invoke$arity$variadic = G__15697__delegate;
    return G__15697;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__15699__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__15700 = ntcoll;
          var G__15701 = cljs.core.first.call(null, vals);
          var G__15702 = cljs.core.next.call(null, vals);
          tcoll = G__15700;
          val = G__15701;
          vals = G__15702;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__15699 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15699__delegate.call(this, tcoll, val, vals);
    };
    G__15699.cljs$lang$maxFixedArity = 2;
    G__15699.cljs$lang$applyTo = function(arglist__15703) {
      var tcoll = cljs.core.first(arglist__15703);
      arglist__15703 = cljs.core.next(arglist__15703);
      var val = cljs.core.first(arglist__15703);
      var vals = cljs.core.rest(arglist__15703);
      return G__15699__delegate(tcoll, val, vals);
    };
    G__15699.cljs$core$IFn$_invoke$arity$variadic = G__15699__delegate;
    return G__15699;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__15704__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__15705 = ntcoll;
          var G__15706 = cljs.core.first.call(null, kvs);
          var G__15707 = cljs.core.second.call(null, kvs);
          var G__15708 = cljs.core.nnext.call(null, kvs);
          tcoll = G__15705;
          key = G__15706;
          val = G__15707;
          kvs = G__15708;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__15704 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15704__delegate.call(this, tcoll, key, val, kvs);
    };
    G__15704.cljs$lang$maxFixedArity = 3;
    G__15704.cljs$lang$applyTo = function(arglist__15709) {
      var tcoll = cljs.core.first(arglist__15709);
      arglist__15709 = cljs.core.next(arglist__15709);
      var key = cljs.core.first(arglist__15709);
      arglist__15709 = cljs.core.next(arglist__15709);
      var val = cljs.core.first(arglist__15709);
      var kvs = cljs.core.rest(arglist__15709);
      return G__15704__delegate(tcoll, key, val, kvs);
    };
    G__15704.cljs$core$IFn$_invoke$arity$variadic = G__15704__delegate;
    return G__15704;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__15710__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__15711 = ntcoll;
          var G__15712 = cljs.core.first.call(null, ks);
          var G__15713 = cljs.core.next.call(null, ks);
          tcoll = G__15711;
          key = G__15712;
          ks = G__15713;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__15710 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15710__delegate.call(this, tcoll, key, ks);
    };
    G__15710.cljs$lang$maxFixedArity = 2;
    G__15710.cljs$lang$applyTo = function(arglist__15714) {
      var tcoll = cljs.core.first(arglist__15714);
      arglist__15714 = cljs.core.next(arglist__15714);
      var key = cljs.core.first(arglist__15714);
      var ks = cljs.core.rest(arglist__15714);
      return G__15710__delegate(tcoll, key, ks);
    };
    G__15710.cljs$core$IFn$_invoke$arity$variadic = G__15710__delegate;
    return G__15710;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__15715__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__15716 = ntcoll;
          var G__15717 = cljs.core.first.call(null, vals);
          var G__15718 = cljs.core.next.call(null, vals);
          tcoll = G__15716;
          val = G__15717;
          vals = G__15718;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__15715 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15715__delegate.call(this, tcoll, val, vals);
    };
    G__15715.cljs$lang$maxFixedArity = 2;
    G__15715.cljs$lang$applyTo = function(arglist__15719) {
      var tcoll = cljs.core.first(arglist__15719);
      arglist__15719 = cljs.core.next(arglist__15719);
      var val = cljs.core.first(arglist__15719);
      var vals = cljs.core.rest(arglist__15719);
      return G__15715__delegate(tcoll, val, vals);
    };
    G__15715.cljs$core$IFn$_invoke$arity$variadic = G__15715__delegate;
    return G__15715;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4371 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4371);
      } else {
        return f.call(null, a4371);
      }
    } else {
      var b4372 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4371, b4372);
        } else {
          return f.call(null, a4371, b4372);
        }
      } else {
        var c4373 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4371, b4372, c4373);
          } else {
            return f.call(null, a4371, b4372, c4373);
          }
        } else {
          var d4374 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4371, b4372, c4373, d4374);
            } else {
              return f.call(null, a4371, b4372, c4373, d4374);
            }
          } else {
            var e4375 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4371, b4372, c4373, d4374, e4375);
              } else {
                return f.call(null, a4371, b4372, c4373, d4374, e4375);
              }
            } else {
              var f4376 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4371, b4372, c4373, d4374, e4375, f4376);
                } else {
                  return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376);
                }
              } else {
                var g4377 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4371, b4372, c4373, d4374, e4375, f4376, g4377);
                  } else {
                    return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377);
                  }
                } else {
                  var h4378 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378);
                    } else {
                      return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378);
                    }
                  } else {
                    var i4379 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379);
                      } else {
                        return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379);
                      }
                    } else {
                      var j4380 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380);
                        } else {
                          return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380);
                        }
                      } else {
                        var k4381 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381);
                          } else {
                            return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381);
                          }
                        } else {
                          var l4382 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382);
                            } else {
                              return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382);
                            }
                          } else {
                            var m4383 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383);
                              } else {
                                return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383);
                              }
                            } else {
                              var n4384 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384);
                                } else {
                                  return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384);
                                }
                              } else {
                                var o4385 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385);
                                  } else {
                                    return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385);
                                  }
                                } else {
                                  var p4386 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386);
                                    } else {
                                      return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386);
                                    }
                                  } else {
                                    var q4387 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387);
                                      } else {
                                        return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387);
                                      }
                                    } else {
                                      var r4388 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388);
                                        } else {
                                          return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388);
                                        }
                                      } else {
                                        var s4389 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389);
                                          } else {
                                            return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389);
                                          }
                                        } else {
                                          var t4390 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389, t4390);
                                            } else {
                                              return f.call(null, a4371, b4372, c4373, d4374, e4375, f4376, g4377, h4378, i4379, j4380, k4381, l4382, m4383, n4384, o4385, p4386, q4387, r4388, s4389, t4390);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__15720__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__15720 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15720__delegate.call(this, f, a, b, c, d, args);
    };
    G__15720.cljs$lang$maxFixedArity = 5;
    G__15720.cljs$lang$applyTo = function(arglist__15721) {
      var f = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var a = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var b = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var c = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var d = cljs.core.first(arglist__15721);
      var args = cljs.core.rest(arglist__15721);
      return G__15720__delegate(f, a, b, c, d, args);
    };
    G__15720.cljs$core$IFn$_invoke$arity$variadic = G__15720__delegate;
    return G__15720;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__15722__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__15722 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15722__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__15722.cljs$lang$maxFixedArity = 6;
    G__15722.cljs$lang$applyTo = function(arglist__15723) {
      var obj = cljs.core.first(arglist__15723);
      arglist__15723 = cljs.core.next(arglist__15723);
      var f = cljs.core.first(arglist__15723);
      arglist__15723 = cljs.core.next(arglist__15723);
      var a = cljs.core.first(arglist__15723);
      arglist__15723 = cljs.core.next(arglist__15723);
      var b = cljs.core.first(arglist__15723);
      arglist__15723 = cljs.core.next(arglist__15723);
      var c = cljs.core.first(arglist__15723);
      arglist__15723 = cljs.core.next(arglist__15723);
      var d = cljs.core.first(arglist__15723);
      var args = cljs.core.rest(arglist__15723);
      return G__15722__delegate(obj, f, a, b, c, d, args);
    };
    G__15722.cljs$core$IFn$_invoke$arity$variadic = G__15722__delegate;
    return G__15722;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__15724__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__15724 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15724__delegate.call(this, x, y, more);
    };
    G__15724.cljs$lang$maxFixedArity = 2;
    G__15724.cljs$lang$applyTo = function(arglist__15725) {
      var x = cljs.core.first(arglist__15725);
      arglist__15725 = cljs.core.next(arglist__15725);
      var y = cljs.core.first(arglist__15725);
      var more = cljs.core.rest(arglist__15725);
      return G__15724__delegate(x, y, more);
    };
    G__15724.cljs$core$IFn$_invoke$arity$variadic = G__15724__delegate;
    return G__15724;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__15726 = pred;
        var G__15727 = cljs.core.next.call(null, coll);
        pred = G__15726;
        coll = G__15727;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3479__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var G__15728 = pred;
        var G__15729 = cljs.core.next.call(null, coll);
        pred = G__15728;
        coll = G__15729;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__15730 = null;
    var G__15730__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__15730__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__15730__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__15730__3 = function() {
      var G__15731__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__15731 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__15731__delegate.call(this, x, y, zs);
      };
      G__15731.cljs$lang$maxFixedArity = 2;
      G__15731.cljs$lang$applyTo = function(arglist__15732) {
        var x = cljs.core.first(arglist__15732);
        arglist__15732 = cljs.core.next(arglist__15732);
        var y = cljs.core.first(arglist__15732);
        var zs = cljs.core.rest(arglist__15732);
        return G__15731__delegate(x, y, zs);
      };
      G__15731.cljs$core$IFn$_invoke$arity$variadic = G__15731__delegate;
      return G__15731;
    }();
    G__15730 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__15730__0.call(this);
        case 1:
          return G__15730__1.call(this, x);
        case 2:
          return G__15730__2.call(this, x, y);
        default:
          return G__15730__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15730.cljs$lang$maxFixedArity = 2;
    G__15730.cljs$lang$applyTo = G__15730__3.cljs$lang$applyTo;
    return G__15730;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__15733__delegate = function(args) {
      return x;
    };
    var G__15733 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__15733__delegate.call(this, args);
    };
    G__15733.cljs$lang$maxFixedArity = 0;
    G__15733.cljs$lang$applyTo = function(arglist__15734) {
      var args = cljs.core.seq(arglist__15734);
      return G__15733__delegate(args);
    };
    G__15733.cljs$core$IFn$_invoke$arity$variadic = G__15733__delegate;
    return G__15733;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__15735 = null;
      var G__15735__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__15735__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__15735__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__15735__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__15735__4 = function() {
        var G__15736__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__15736 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15736__delegate.call(this, x, y, z, args);
        };
        G__15736.cljs$lang$maxFixedArity = 3;
        G__15736.cljs$lang$applyTo = function(arglist__15737) {
          var x = cljs.core.first(arglist__15737);
          arglist__15737 = cljs.core.next(arglist__15737);
          var y = cljs.core.first(arglist__15737);
          arglist__15737 = cljs.core.next(arglist__15737);
          var z = cljs.core.first(arglist__15737);
          var args = cljs.core.rest(arglist__15737);
          return G__15736__delegate(x, y, z, args);
        };
        G__15736.cljs$core$IFn$_invoke$arity$variadic = G__15736__delegate;
        return G__15736;
      }();
      G__15735 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15735__0.call(this);
          case 1:
            return G__15735__1.call(this, x);
          case 2:
            return G__15735__2.call(this, x, y);
          case 3:
            return G__15735__3.call(this, x, y, z);
          default:
            return G__15735__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15735.cljs$lang$maxFixedArity = 3;
      G__15735.cljs$lang$applyTo = G__15735__4.cljs$lang$applyTo;
      return G__15735;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__15738 = null;
      var G__15738__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__15738__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__15738__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__15738__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__15738__4 = function() {
        var G__15739__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__15739 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15739__delegate.call(this, x, y, z, args);
        };
        G__15739.cljs$lang$maxFixedArity = 3;
        G__15739.cljs$lang$applyTo = function(arglist__15740) {
          var x = cljs.core.first(arglist__15740);
          arglist__15740 = cljs.core.next(arglist__15740);
          var y = cljs.core.first(arglist__15740);
          arglist__15740 = cljs.core.next(arglist__15740);
          var z = cljs.core.first(arglist__15740);
          var args = cljs.core.rest(arglist__15740);
          return G__15739__delegate(x, y, z, args);
        };
        G__15739.cljs$core$IFn$_invoke$arity$variadic = G__15739__delegate;
        return G__15739;
      }();
      G__15738 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__15738__0.call(this);
          case 1:
            return G__15738__1.call(this, x);
          case 2:
            return G__15738__2.call(this, x, y);
          case 3:
            return G__15738__3.call(this, x, y, z);
          default:
            return G__15738__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15738.cljs$lang$maxFixedArity = 3;
      G__15738.cljs$lang$applyTo = G__15738__4.cljs$lang$applyTo;
      return G__15738;
    }();
  };
  var comp__4 = function() {
    var G__15741__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__15742__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__15743 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__15744 = cljs.core.next.call(null, fs__$2);
                ret = G__15743;
                fs__$2 = G__15744;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__15742 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__15742__delegate.call(this, args);
          };
          G__15742.cljs$lang$maxFixedArity = 0;
          G__15742.cljs$lang$applyTo = function(arglist__15745) {
            var args = cljs.core.seq(arglist__15745);
            return G__15742__delegate(args);
          };
          G__15742.cljs$core$IFn$_invoke$arity$variadic = G__15742__delegate;
          return G__15742;
        }();
      }(fs__$1);
    };
    var G__15741 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15741__delegate.call(this, f1, f2, f3, fs);
    };
    G__15741.cljs$lang$maxFixedArity = 3;
    G__15741.cljs$lang$applyTo = function(arglist__15746) {
      var f1 = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var f2 = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var f3 = cljs.core.first(arglist__15746);
      var fs = cljs.core.rest(arglist__15746);
      return G__15741__delegate(f1, f2, f3, fs);
    };
    G__15741.cljs$core$IFn$_invoke$arity$variadic = G__15741__delegate;
    return G__15741;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__15747__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__15747 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15747__delegate.call(this, args);
      };
      G__15747.cljs$lang$maxFixedArity = 0;
      G__15747.cljs$lang$applyTo = function(arglist__15748) {
        var args = cljs.core.seq(arglist__15748);
        return G__15747__delegate(args);
      };
      G__15747.cljs$core$IFn$_invoke$arity$variadic = G__15747__delegate;
      return G__15747;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__15749__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__15749 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15749__delegate.call(this, args);
      };
      G__15749.cljs$lang$maxFixedArity = 0;
      G__15749.cljs$lang$applyTo = function(arglist__15750) {
        var args = cljs.core.seq(arglist__15750);
        return G__15749__delegate(args);
      };
      G__15749.cljs$core$IFn$_invoke$arity$variadic = G__15749__delegate;
      return G__15749;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__15751__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__15751 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__15751__delegate.call(this, args);
      };
      G__15751.cljs$lang$maxFixedArity = 0;
      G__15751.cljs$lang$applyTo = function(arglist__15752) {
        var args = cljs.core.seq(arglist__15752);
        return G__15751__delegate(args);
      };
      G__15751.cljs$core$IFn$_invoke$arity$variadic = G__15751__delegate;
      return G__15751;
    }();
  };
  var partial__5 = function() {
    var G__15753__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__15754__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__15754 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__15754__delegate.call(this, args);
        };
        G__15754.cljs$lang$maxFixedArity = 0;
        G__15754.cljs$lang$applyTo = function(arglist__15755) {
          var args = cljs.core.seq(arglist__15755);
          return G__15754__delegate(args);
        };
        G__15754.cljs$core$IFn$_invoke$arity$variadic = G__15754__delegate;
        return G__15754;
      }();
    };
    var G__15753 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15753__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__15753.cljs$lang$maxFixedArity = 4;
    G__15753.cljs$lang$applyTo = function(arglist__15756) {
      var f = cljs.core.first(arglist__15756);
      arglist__15756 = cljs.core.next(arglist__15756);
      var arg1 = cljs.core.first(arglist__15756);
      arglist__15756 = cljs.core.next(arglist__15756);
      var arg2 = cljs.core.first(arglist__15756);
      arglist__15756 = cljs.core.next(arglist__15756);
      var arg3 = cljs.core.first(arglist__15756);
      var more = cljs.core.rest(arglist__15756);
      return G__15753__delegate(f, arg1, arg2, arg3, more);
    };
    G__15753.cljs$core$IFn$_invoke$arity$variadic = G__15753__delegate;
    return G__15753;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__15757 = null;
      var G__15757__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__15757__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__15757__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__15757__4 = function() {
        var G__15758__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__15758 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15758__delegate.call(this, a, b, c, ds);
        };
        G__15758.cljs$lang$maxFixedArity = 3;
        G__15758.cljs$lang$applyTo = function(arglist__15759) {
          var a = cljs.core.first(arglist__15759);
          arglist__15759 = cljs.core.next(arglist__15759);
          var b = cljs.core.first(arglist__15759);
          arglist__15759 = cljs.core.next(arglist__15759);
          var c = cljs.core.first(arglist__15759);
          var ds = cljs.core.rest(arglist__15759);
          return G__15758__delegate(a, b, c, ds);
        };
        G__15758.cljs$core$IFn$_invoke$arity$variadic = G__15758__delegate;
        return G__15758;
      }();
      G__15757 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__15757__1.call(this, a);
          case 2:
            return G__15757__2.call(this, a, b);
          case 3:
            return G__15757__3.call(this, a, b, c);
          default:
            return G__15757__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15757.cljs$lang$maxFixedArity = 3;
      G__15757.cljs$lang$applyTo = G__15757__4.cljs$lang$applyTo;
      return G__15757;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__15760 = null;
      var G__15760__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15760__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__15760__4 = function() {
        var G__15761__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__15761 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15761__delegate.call(this, a, b, c, ds);
        };
        G__15761.cljs$lang$maxFixedArity = 3;
        G__15761.cljs$lang$applyTo = function(arglist__15762) {
          var a = cljs.core.first(arglist__15762);
          arglist__15762 = cljs.core.next(arglist__15762);
          var b = cljs.core.first(arglist__15762);
          arglist__15762 = cljs.core.next(arglist__15762);
          var c = cljs.core.first(arglist__15762);
          var ds = cljs.core.rest(arglist__15762);
          return G__15761__delegate(a, b, c, ds);
        };
        G__15761.cljs$core$IFn$_invoke$arity$variadic = G__15761__delegate;
        return G__15761;
      }();
      G__15760 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15760__2.call(this, a, b);
          case 3:
            return G__15760__3.call(this, a, b, c);
          default:
            return G__15760__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15760.cljs$lang$maxFixedArity = 3;
      G__15760.cljs$lang$applyTo = G__15760__4.cljs$lang$applyTo;
      return G__15760;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__15763 = null;
      var G__15763__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__15763__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__15763__4 = function() {
        var G__15764__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__15764 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15764__delegate.call(this, a, b, c, ds);
        };
        G__15764.cljs$lang$maxFixedArity = 3;
        G__15764.cljs$lang$applyTo = function(arglist__15765) {
          var a = cljs.core.first(arglist__15765);
          arglist__15765 = cljs.core.next(arglist__15765);
          var b = cljs.core.first(arglist__15765);
          arglist__15765 = cljs.core.next(arglist__15765);
          var c = cljs.core.first(arglist__15765);
          var ds = cljs.core.rest(arglist__15765);
          return G__15764__delegate(a, b, c, ds);
        };
        G__15764.cljs$core$IFn$_invoke$arity$variadic = G__15764__delegate;
        return G__15764;
      }();
      G__15763 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__15763__2.call(this, a, b);
          case 3:
            return G__15763__3.call(this, a, b, c);
          default:
            return G__15763__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__15763.cljs$lang$maxFixedArity = 3;
      G__15763.cljs$lang$applyTo = G__15763__4.cljs$lang$applyTo;
      return G__15763;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___15766 = size;
          var i_15767 = 0;
          while (true) {
            if (i_15767 < n__4327__auto___15766) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_15767, cljs.core._nth.call(null, c, i_15767)));
              var G__15768 = i_15767 + 1;
              i_15767 = G__15768;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4327__auto___15769 = size;
        var i_15770 = 0;
        while (true) {
          if (i_15770 < n__4327__auto___15769) {
            var x_15771 = f.call(null, cljs.core._nth.call(null, c, i_15770));
            if (x_15771 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_15771);
            }
            var G__15772 = i_15770 + 1;
            i_15770 = G__15772;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___15773 = size;
          var i_15774 = 0;
          while (true) {
            if (i_15774 < n__4327__auto___15773) {
              var x_15775 = f.call(null, idx + i_15774, cljs.core._nth.call(null, c, i_15774));
              if (x_15775 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_15775);
              }
              var G__15776 = i_15774 + 1;
              i_15774 = G__15776;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            return p.call(null, y);
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__15783__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__15783 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15783__delegate.call(this, x, y, z, args);
        };
        G__15783.cljs$lang$maxFixedArity = 3;
        G__15783.cljs$lang$applyTo = function(arglist__15784) {
          var x = cljs.core.first(arglist__15784);
          arglist__15784 = cljs.core.next(arglist__15784);
          var y = cljs.core.first(arglist__15784);
          arglist__15784 = cljs.core.next(arglist__15784);
          var z = cljs.core.first(arglist__15784);
          var args = cljs.core.rest(arglist__15784);
          return G__15783__delegate(x, y, z, args);
        };
        G__15783.cljs$core$IFn$_invoke$arity$variadic = G__15783__delegate;
        return G__15783;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__15785__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15777_SHARP_) {
            var and__3467__auto__ = p1.call(null, p1__15777_SHARP_);
            if (cljs.core.truth_(and__3467__auto__)) {
              return p2.call(null, p1__15777_SHARP_);
            } else {
              return and__3467__auto__;
            }
          }, args));
        };
        var G__15785 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15785__delegate.call(this, x, y, z, args);
        };
        G__15785.cljs$lang$maxFixedArity = 3;
        G__15785.cljs$lang$applyTo = function(arglist__15786) {
          var x = cljs.core.first(arglist__15786);
          arglist__15786 = cljs.core.next(arglist__15786);
          var y = cljs.core.first(arglist__15786);
          arglist__15786 = cljs.core.next(arglist__15786);
          var z = cljs.core.first(arglist__15786);
          var args = cljs.core.rest(arglist__15786);
          return G__15785__delegate(x, y, z, args);
        };
        G__15785.cljs$core$IFn$_invoke$arity$variadic = G__15785__delegate;
        return G__15785;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3467__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3467__auto____$1)) {
              var and__3467__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3467__auto____$2)) {
                var and__3467__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3467__auto____$3)) {
                  var and__3467__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$4)) {
                    var and__3467__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3467__auto____$5)) {
                      var and__3467__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3467__auto____$6)) {
                        var and__3467__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3467__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3467__auto____$7;
                        }
                      } else {
                        return and__3467__auto____$6;
                      }
                    } else {
                      return and__3467__auto____$5;
                    }
                  } else {
                    return and__3467__auto____$4;
                  }
                } else {
                  return and__3467__auto____$3;
                }
              } else {
                return and__3467__auto____$2;
              }
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__15787__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__15778_SHARP_) {
            var and__3467__auto__ = p1.call(null, p1__15778_SHARP_);
            if (cljs.core.truth_(and__3467__auto__)) {
              var and__3467__auto____$1 = p2.call(null, p1__15778_SHARP_);
              if (cljs.core.truth_(and__3467__auto____$1)) {
                return p3.call(null, p1__15778_SHARP_);
              } else {
                return and__3467__auto____$1;
              }
            } else {
              return and__3467__auto__;
            }
          }, args));
        };
        var G__15787 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15787__delegate.call(this, x, y, z, args);
        };
        G__15787.cljs$lang$maxFixedArity = 3;
        G__15787.cljs$lang$applyTo = function(arglist__15788) {
          var x = cljs.core.first(arglist__15788);
          arglist__15788 = cljs.core.next(arglist__15788);
          var y = cljs.core.first(arglist__15788);
          arglist__15788 = cljs.core.next(arglist__15788);
          var z = cljs.core.first(arglist__15788);
          var args = cljs.core.rest(arglist__15788);
          return G__15787__delegate(x, y, z, args);
        };
        G__15787.cljs$core$IFn$_invoke$arity$variadic = G__15787__delegate;
        return G__15787;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__15789__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__15779_SHARP_) {
                return p1__15779_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__15780_SHARP_) {
                var and__3467__auto__ = p1__15780_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3467__auto__)) {
                  return p1__15780_SHARP_.call(null, y);
                } else {
                  return and__3467__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__15781_SHARP_) {
                var and__3467__auto__ = p1__15781_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3467__auto__)) {
                  var and__3467__auto____$1 = p1__15781_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3467__auto____$1)) {
                    return p1__15781_SHARP_.call(null, z);
                  } else {
                    return and__3467__auto____$1;
                  }
                } else {
                  return and__3467__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__15790__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__15782_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__15782_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__15790 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__15790__delegate.call(this, x, y, z, args);
            };
            G__15790.cljs$lang$maxFixedArity = 3;
            G__15790.cljs$lang$applyTo = function(arglist__15791) {
              var x = cljs.core.first(arglist__15791);
              arglist__15791 = cljs.core.next(arglist__15791);
              var y = cljs.core.first(arglist__15791);
              arglist__15791 = cljs.core.next(arglist__15791);
              var z = cljs.core.first(arglist__15791);
              var args = cljs.core.rest(arglist__15791);
              return G__15790__delegate(x, y, z, args);
            };
            G__15790.cljs$core$IFn$_invoke$arity$variadic = G__15790__delegate;
            return G__15790;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__15789 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15789__delegate.call(this, p1, p2, p3, ps);
    };
    G__15789.cljs$lang$maxFixedArity = 3;
    G__15789.cljs$lang$applyTo = function(arglist__15792) {
      var p1 = cljs.core.first(arglist__15792);
      arglist__15792 = cljs.core.next(arglist__15792);
      var p2 = cljs.core.first(arglist__15792);
      arglist__15792 = cljs.core.next(arglist__15792);
      var p3 = cljs.core.first(arglist__15792);
      var ps = cljs.core.rest(arglist__15792);
      return G__15789__delegate(p1, p2, p3, ps);
    };
    G__15789.cljs$core$IFn$_invoke$arity$variadic = G__15789__delegate;
    return G__15789;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3479__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3479__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__15799__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__15799 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15799__delegate.call(this, x, y, z, args);
        };
        G__15799.cljs$lang$maxFixedArity = 3;
        G__15799.cljs$lang$applyTo = function(arglist__15800) {
          var x = cljs.core.first(arglist__15800);
          arglist__15800 = cljs.core.next(arglist__15800);
          var y = cljs.core.first(arglist__15800);
          arglist__15800 = cljs.core.next(arglist__15800);
          var z = cljs.core.first(arglist__15800);
          var args = cljs.core.rest(arglist__15800);
          return G__15799__delegate(x, y, z, args);
        };
        G__15799.cljs$core$IFn$_invoke$arity$variadic = G__15799__delegate;
        return G__15799;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__15801__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3479__auto__) {
              return function(p1__15793_SHARP_) {
                var or__3479__auto____$1 = p1.call(null, p1__15793_SHARP_);
                if (cljs.core.truth_(or__3479__auto____$1)) {
                  return or__3479__auto____$1;
                } else {
                  return p2.call(null, p1__15793_SHARP_);
                }
              };
            }(or__3479__auto__), args);
          }
        };
        var G__15801 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15801__delegate.call(this, x, y, z, args);
        };
        G__15801.cljs$lang$maxFixedArity = 3;
        G__15801.cljs$lang$applyTo = function(arglist__15802) {
          var x = cljs.core.first(arglist__15802);
          arglist__15802 = cljs.core.next(arglist__15802);
          var y = cljs.core.first(arglist__15802);
          arglist__15802 = cljs.core.next(arglist__15802);
          var z = cljs.core.first(arglist__15802);
          var args = cljs.core.rest(arglist__15802);
          return G__15801__delegate(x, y, z, args);
        };
        G__15801.cljs$core$IFn$_invoke$arity$variadic = G__15801__delegate;
        return G__15801;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3479__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3479__auto____$1)) {
            return or__3479__auto____$1;
          } else {
            var or__3479__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3479__auto____$2)) {
              return or__3479__auto____$2;
            } else {
              var or__3479__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3479__auto____$3)) {
                return or__3479__auto____$3;
              } else {
                var or__3479__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3479__auto____$4)) {
                  return or__3479__auto____$4;
                } else {
                  var or__3479__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3479__auto____$5)) {
                    return or__3479__auto____$5;
                  } else {
                    var or__3479__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3479__auto____$6)) {
                      return or__3479__auto____$6;
                    } else {
                      var or__3479__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3479__auto____$7)) {
                        return or__3479__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__15803__delegate = function(x, y, z, args) {
          var or__3479__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3479__auto__) {
              return function(p1__15794_SHARP_) {
                var or__3479__auto____$1 = p1.call(null, p1__15794_SHARP_);
                if (cljs.core.truth_(or__3479__auto____$1)) {
                  return or__3479__auto____$1;
                } else {
                  var or__3479__auto____$2 = p2.call(null, p1__15794_SHARP_);
                  if (cljs.core.truth_(or__3479__auto____$2)) {
                    return or__3479__auto____$2;
                  } else {
                    return p3.call(null, p1__15794_SHARP_);
                  }
                }
              };
            }(or__3479__auto__), args);
          }
        };
        var G__15803 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__15803__delegate.call(this, x, y, z, args);
        };
        G__15803.cljs$lang$maxFixedArity = 3;
        G__15803.cljs$lang$applyTo = function(arglist__15804) {
          var x = cljs.core.first(arglist__15804);
          arglist__15804 = cljs.core.next(arglist__15804);
          var y = cljs.core.first(arglist__15804);
          arglist__15804 = cljs.core.next(arglist__15804);
          var z = cljs.core.first(arglist__15804);
          var args = cljs.core.rest(arglist__15804);
          return G__15803__delegate(x, y, z, args);
        };
        G__15803.cljs$core$IFn$_invoke$arity$variadic = G__15803__delegate;
        return G__15803;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__15805__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__15795_SHARP_) {
                return p1__15795_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__15796_SHARP_) {
                var or__3479__auto__ = p1__15796_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3479__auto__)) {
                  return or__3479__auto__;
                } else {
                  return p1__15796_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__15797_SHARP_) {
                var or__3479__auto__ = p1__15797_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3479__auto__)) {
                  return or__3479__auto__;
                } else {
                  var or__3479__auto____$1 = p1__15797_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3479__auto____$1)) {
                    return or__3479__auto____$1;
                  } else {
                    return p1__15797_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__15806__delegate = function(x, y, z, args) {
              var or__3479__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3479__auto__, ps__$1) {
                  return function(p1__15798_SHARP_) {
                    return cljs.core.some.call(null, p1__15798_SHARP_, args);
                  };
                }(or__3479__auto__, ps__$1), ps__$1);
              }
            };
            var G__15806 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__15806__delegate.call(this, x, y, z, args);
            };
            G__15806.cljs$lang$maxFixedArity = 3;
            G__15806.cljs$lang$applyTo = function(arglist__15807) {
              var x = cljs.core.first(arglist__15807);
              arglist__15807 = cljs.core.next(arglist__15807);
              var y = cljs.core.first(arglist__15807);
              arglist__15807 = cljs.core.next(arglist__15807);
              var z = cljs.core.first(arglist__15807);
              var args = cljs.core.rest(arglist__15807);
              return G__15806__delegate(x, y, z, args);
            };
            G__15806.cljs$core$IFn$_invoke$arity$variadic = G__15806__delegate;
            return G__15806;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__15805 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__15805__delegate.call(this, p1, p2, p3, ps);
    };
    G__15805.cljs$lang$maxFixedArity = 3;
    G__15805.cljs$lang$applyTo = function(arglist__15808) {
      var p1 = cljs.core.first(arglist__15808);
      arglist__15808 = cljs.core.next(arglist__15808);
      var p2 = cljs.core.first(arglist__15808);
      arglist__15808 = cljs.core.next(arglist__15808);
      var p3 = cljs.core.first(arglist__15808);
      var ps = cljs.core.rest(arglist__15808);
      return G__15805__delegate(p1, p2, p3, ps);
    };
    G__15805.cljs$core$IFn$_invoke$arity$variadic = G__15805__delegate;
    return G__15805;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4327__auto___15810 = size;
          var i_15811 = 0;
          while (true) {
            if (i_15811 < n__4327__auto___15810) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_15811)));
              var G__15812 = i_15811 + 1;
              i_15811 = G__15812;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__15813__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__15809_SHARP_) {
          return cljs.core.apply.call(null, f, p1__15809_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__15813 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15813__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15813.cljs$lang$maxFixedArity = 4;
    G__15813.cljs$lang$applyTo = function(arglist__15814) {
      var f = cljs.core.first(arglist__15814);
      arglist__15814 = cljs.core.next(arglist__15814);
      var c1 = cljs.core.first(arglist__15814);
      arglist__15814 = cljs.core.next(arglist__15814);
      var c2 = cljs.core.first(arglist__15814);
      arglist__15814 = cljs.core.next(arglist__15814);
      var c3 = cljs.core.first(arglist__15814);
      var colls = cljs.core.rest(arglist__15814);
      return G__15813__delegate(f, c1, c2, c3, colls);
    };
    G__15813.cljs$core$IFn$_invoke$arity$variadic = G__15813__delegate;
    return G__15813;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__15815 = n__$1 - 1;
        var G__15816 = cljs.core.rest.call(null, s);
        n__$1 = G__15815;
        coll__$1 = G__15816;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__15817 = cljs.core.next.call(null, s);
      var G__15818 = cljs.core.next.call(null, lead);
      s = G__15817;
      lead = G__15818;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3467__auto__ = s;
        if (and__3467__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3467__auto__;
        }
      }())) {
        var G__15819 = pred__$1;
        var G__15820 = cljs.core.rest.call(null, s);
        pred__$1 = G__15819;
        coll__$1 = G__15820;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__15821__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__15821 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15821__delegate.call(this, c1, c2, colls);
    };
    G__15821.cljs$lang$maxFixedArity = 2;
    G__15821.cljs$lang$applyTo = function(arglist__15822) {
      var c1 = cljs.core.first(arglist__15822);
      arglist__15822 = cljs.core.next(arglist__15822);
      var c2 = cljs.core.first(arglist__15822);
      var colls = cljs.core.rest(arglist__15822);
      return G__15821__delegate(c1, c2, colls);
    };
    G__15821.cljs$core$IFn$_invoke$arity$variadic = G__15821__delegate;
    return G__15821;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__15823__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__15823 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15823__delegate.call(this, f, coll, colls);
    };
    G__15823.cljs$lang$maxFixedArity = 2;
    G__15823.cljs$lang$applyTo = function(arglist__15824) {
      var f = cljs.core.first(arglist__15824);
      arglist__15824 = cljs.core.next(arglist__15824);
      var coll = cljs.core.first(arglist__15824);
      var colls = cljs.core.rest(arglist__15824);
      return G__15823__delegate(f, coll, colls);
    };
    G__15823.cljs$core$IFn$_invoke$arity$variadic = G__15823__delegate;
    return G__15823;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4327__auto___15825 = size;
        var i_15826 = 0;
        while (true) {
          if (i_15826 < n__4327__auto___15825) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_15826)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_15826));
            } else {
            }
            var G__15827 = i_15826 + 1;
            i_15826 = G__15827;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__15828_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__15828_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__15830 = to;
      if (G__15830) {
        var bit__4122__auto__ = G__15830.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4122__auto__ || G__15830.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__15831__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__15831 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__15831__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15831.cljs$lang$maxFixedArity = 4;
    G__15831.cljs$lang$applyTo = function(arglist__15832) {
      var f = cljs.core.first(arglist__15832);
      arglist__15832 = cljs.core.next(arglist__15832);
      var c1 = cljs.core.first(arglist__15832);
      arglist__15832 = cljs.core.next(arglist__15832);
      var c2 = cljs.core.first(arglist__15832);
      arglist__15832 = cljs.core.next(arglist__15832);
      var c3 = cljs.core.first(arglist__15832);
      var colls = cljs.core.rest(arglist__15832);
      return G__15831__delegate(f, c1, c2, c3, colls);
    };
    G__15831.cljs$core$IFn$_invoke$arity$variadic = G__15831__delegate;
    return G__15831;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__15834 = m__$1;
          if (G__15834) {
            var bit__4129__auto__ = G__15834.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4129__auto__ || G__15834.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__15834.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15834);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__15834);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__15835 = sentinel;
            var G__15836 = m__$2;
            var G__15837 = cljs.core.next.call(null, ks__$1);
            sentinel = G__15835;
            m__$1 = G__15836;
            ks__$1 = G__15837;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__15838, v) {
  var vec__15840 = p__15838;
  var k = cljs.core.nth.call(null, vec__15840, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15840, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__15841, f) {
    var vec__15851 = p__15841;
    var k = cljs.core.nth.call(null, vec__15851, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15851, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__15842, f, a) {
    var vec__15852 = p__15842;
    var k = cljs.core.nth.call(null, vec__15852, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15852, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__15843, f, a, b) {
    var vec__15853 = p__15843;
    var k = cljs.core.nth.call(null, vec__15853, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15853, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__15844, f, a, b, c) {
    var vec__15854 = p__15844;
    var k = cljs.core.nth.call(null, vec__15854, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__15854, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__15856__delegate = function(m, p__15845, f, a, b, c, args) {
      var vec__15855 = p__15845;
      var k = cljs.core.nth.call(null, vec__15855, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__15855, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__15856 = function(m, p__15845, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__15856__delegate.call(this, m, p__15845, f, a, b, c, args);
    };
    G__15856.cljs$lang$maxFixedArity = 6;
    G__15856.cljs$lang$applyTo = function(arglist__15857) {
      var m = cljs.core.first(arglist__15857);
      arglist__15857 = cljs.core.next(arglist__15857);
      var p__15845 = cljs.core.first(arglist__15857);
      arglist__15857 = cljs.core.next(arglist__15857);
      var f = cljs.core.first(arglist__15857);
      arglist__15857 = cljs.core.next(arglist__15857);
      var a = cljs.core.first(arglist__15857);
      arglist__15857 = cljs.core.next(arglist__15857);
      var b = cljs.core.first(arglist__15857);
      arglist__15857 = cljs.core.next(arglist__15857);
      var c = cljs.core.first(arglist__15857);
      var args = cljs.core.rest(arglist__15857);
      return G__15856__delegate(m, p__15845, f, a, b, c, args);
    };
    G__15856.cljs$core$IFn$_invoke$arity$variadic = G__15856__delegate;
    return G__15856;
  }();
  update_in = function(m, p__15845, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__15845, f);
      case 4:
        return update_in__4.call(this, m, p__15845, f, a);
      case 5:
        return update_in__5.call(this, m, p__15845, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__15845, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__15845, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__15858 = ll - 5;
      var G__15859 = r;
      ll = G__15858;
      ret = G__15859;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__15860 = cljs.core.pv_aget.call(null, node, 0);
      var G__15861 = level - 5;
      node = G__15860;
      level = G__15861;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__15862 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__15863 = level - 5;
        node = G__15862;
        level = G__15863;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__15865 = j + 1;
              var G__15866 = init__$2;
              j = G__15865;
              init__$1 = G__15866;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__15867 = i + step_init[0];
        i = G__15867;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4327__auto___15868 = len;
    var i_15869 = 0;
    while (true) {
      if (i_15869 < n__4327__auto___15868) {
        new_tail[i_15869] = self__.tail[i_15869];
        var G__15870 = i_15869 + 1;
        i_15869 = G__15870;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__15871 = null;
  var G__15871__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15871__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15871 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15871__2.call(this, self__, k);
      case 3:
        return G__15871__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15871;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args15864) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15864)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__15872 = i + 1;
        var G__15873 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__15872;
        out = G__15873;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__15874) {
    var args = cljs.core.seq(arglist__15874);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3786__auto__ = self__.end;
    var y__3787__auto__ = v_pos + 1;
    return x__3786__auto__ > y__3787__auto__ ? x__3786__auto__ : y__3787__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__15876 = null;
  var G__15876__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15876__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15876 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15876__2.call(this, self__, k);
      case 3:
        return G__15876__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15876;
}();
cljs.core.Subvec.prototype.apply = function(self__, args15875) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15875)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__15877 = meta;
      var G__15878 = v.v;
      var G__15879 = v.start + start;
      var G__15880 = v.start + end;
      var G__15881 = __hash;
      meta = G__15877;
      v = G__15878;
      start = G__15879;
      end = G__15880;
      __hash = G__15881;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj15885 = {};
    return obj15885;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__15886 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__15887 = level - 5;
        node = G__15886;
        level = G__15887;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__15889 = null;
  var G__15889__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15889__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15889 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15889__2.call(this, self__, k);
      case 3:
        return G__15889__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15889;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args15888) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15888)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3479__auto__ = self__.front;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3479__auto__ = self__.rear;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__15890 = i + incr;
        i = G__15890;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__15891 = i + 1;
      var G__15892 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__15891;
      out = G__15892;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj15896 = {};
    return obj15896;
  }();
  var l = ks.length;
  var i_15897 = 0;
  while (true) {
    if (i_15897 < l) {
      var k_15898 = ks[i_15897];
      new_obj[k_15898] = obj[k_15898];
      var G__15899 = i_15897 + 1;
      i_15897 = G__15899;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15902 = cljs.core.rest.call(null, keys__$1);
        var G__15903 = init__$2;
        keys__$1 = G__15902;
        init__$1 = G__15903;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__15900_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15900_SHARP_, self__.strobj[p1__15900_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__15904 = null;
  var G__15904__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15904__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15904 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15904__2.call(this, self__, k);
      case 3:
        return G__15904__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15904;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args15901) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15901)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj15906 = {};
  return obj15906;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15907 = i + 2;
          i = G__15907;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15908 = i + 2;
          i = G__15908;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15909 = i + 2;
          i = G__15909;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15910 = i + 2;
          i = G__15910;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__15911 = i + 2;
          i = G__15911;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_15912 = 0;
  while (true) {
    if (i_15912 < l) {
      narr[i_15912] = arr[i_15912];
      var G__15913 = i_15912 + 1;
      i_15912 = G__15913;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15918 = i + 2;
        var G__15919 = init__$2;
        i = G__15918;
        init__$1 = G__15919;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj15916 = {};
    return obj15916;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__15920 = s + 2;
            var G__15921 = d;
            s = G__15920;
            d = G__15921;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__15922 = s + 2;
              var G__15923 = d + 2;
              s = G__15922;
              d = G__15923;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__15917 = cljs.core.aclone.call(null, self__.arr);
          G__15917[idx + 1] = v;
          return G__15917;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15924 = null;
  var G__15924__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15924__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15924 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15924__2.call(this, self__, k);
      case 3:
        return G__15924__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15924;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args15914) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15914)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15925 = i + 2;
        var G__15926 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15925;
        ret = G__15926;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15927_15929 = self__.arr;
      G__15927_15929.pop();
      G__15927_15929.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__15928 = o;
      if (G__15928) {
        var bit__4129__auto__ = G__15928.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4129__auto__ || G__15928.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15928.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15928);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15928);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__15930 = cljs.core.next.call(null, es);
          var G__15931 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15930;
          tcoll__$2 = G__15931;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__15932 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__15933 = i + 2;
      out = G__15932;
      i = G__15933;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15936 = cljs.core.aclone.call(null, arr);
    G__15936[i] = a;
    return G__15936;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15937 = cljs.core.aclone.call(null, arr);
    G__15937[i] = a;
    G__15937[j] = b;
    return G__15937;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__15938 = i + 2;
        var G__15939 = init__$2;
        i = G__15938;
        init__$1 = G__15939;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_15940 = 0;
        var j_15941 = 0;
        while (true) {
          if (i_15940 < 32) {
            if ((self__.bitmap >>> i_15940 & 1) === 0) {
              var G__15942 = i_15940 + 1;
              var G__15943 = j_15941;
              i_15940 = G__15942;
              j_15941 = G__15943;
              continue;
            } else {
              nodes[i_15940] = !(self__.arr[j_15941] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_15941]), self__.arr[j_15941], self__.arr[j_15941 + 1], added_leaf_QMARK_) : self__.arr[j_15941 + 1];
              var G__15944 = i_15940 + 1;
              var G__15945 = j_15941 + 2;
              i_15940 = G__15944;
              j_15941 = G__15945;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_15946 = 0;
      var j_15947 = 0;
      while (true) {
        if (i_15946 < 32) {
          if ((self__.bitmap >>> i_15946 & 1) === 0) {
            var G__15948 = i_15946 + 1;
            var G__15949 = j_15947;
            i_15946 = G__15948;
            j_15947 = G__15949;
            continue;
          } else {
            nodes[i_15946] = !(self__.arr[j_15947] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_15947]), self__.arr[j_15947], self__.arr[j_15947 + 1], added_leaf_QMARK_) : self__.arr[j_15947 + 1];
            var G__15950 = i_15946 + 1;
            var G__15951 = j_15947 + 2;
            i_15946 = G__15950;
            j_15947 = G__15951;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__15952 = i + 1;
        var G__15953 = j + 2;
        var G__15954 = bitmap | 1 << i;
        i = G__15952;
        j = G__15953;
        bitmap = G__15954;
        continue;
      } else {
        var G__15955 = i + 1;
        var G__15956 = j;
        var G__15957 = bitmap;
        i = G__15955;
        j = G__15956;
        bitmap = G__15957;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__15958 = i + 1;
          var G__15959 = init__$2;
          i = G__15958;
          init__$1 = G__15959;
          continue;
        }
      } else {
        var G__15960 = i + 1;
        var G__15961 = init__$1;
        i = G__15960;
        init__$1 = G__15961;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__15962 = i + 2;
        i = G__15962;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__15963 = j + 2;
                j = G__15963;
                continue;
              }
            } else {
              var G__15964 = j + 2;
              j = G__15964;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__15965 = j + 1;
              j = G__15965;
              continue;
            }
          } else {
            var G__15966 = j + 1;
            j = G__15966;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj15969 = {};
    return obj15969;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__15970 = null;
  var G__15970__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15970__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15970 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15970__2.call(this, self__, k);
      case 3:
        return G__15970__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15970;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args15967) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15967)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__15971 = i + 1;
      var G__15972 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__15971;
      out = G__15972;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__15973 = o;
      if (G__15973) {
        var bit__4129__auto__ = G__15973.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4129__auto__ || G__15973.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15973.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15973);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__15973);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__15974 = cljs.core.next.call(null, es);
          var G__15975 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__15974;
          tcoll__$1 = G__15975;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__15976 = ascending_QMARK_ ? t.left : t.right;
      var G__15977 = cljs.core.conj.call(null, stack__$1, t);
      t = G__15976;
      stack__$1 = G__15977;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__15979 = null;
  var G__15979__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15979__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15979 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15979__2.call(this, self__, k);
      case 3:
        return G__15979__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15979;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args15978) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15978)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__15981 = null;
  var G__15981__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15981__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15981 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15981__2.call(this, self__, k);
      case 3:
        return G__15981__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15981;
}();
cljs.core.RedNode.prototype.apply = function(self__, args15980) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15980)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__15983 = t.left;
          t = G__15983;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__15984 = t.right;
            t = G__15984;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__15985 = null;
  var G__15985__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15985__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15985 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15985__2.call(this, self__, k);
      case 3:
        return G__15985__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__15985;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args15982) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15982)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__15986 = cljs.core.conj.call(null, stack, t);
              var G__15987 = t.left;
              stack = G__15986;
              t = G__15987;
              continue;
            } else {
              var G__15988 = stack;
              var G__15989 = t.right;
              stack = G__15988;
              t = G__15989;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__15990 = cljs.core.conj.call(null, stack, t);
                var G__15991 = t.right;
                stack = G__15990;
                t = G__15991;
                continue;
              } else {
                var G__15992 = stack;
                var G__15993 = t.left;
                stack = G__15992;
                t = G__15993;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__15994 = cljs.core.nnext.call(null, in$);
        var G__15995 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__15994;
        out = G__15995;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__15996) {
    var keyvals = cljs.core.seq(arglist__15996);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__15997) {
    var keyvals = cljs.core.seq(arglist__15997);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16001 = {};
      return obj16001;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__16002 = cljs.core.nnext.call(null, kvs);
        kvs = G__16002;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16003) {
    var keyvals = cljs.core.seq(arglist__16003);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16004 = cljs.core.nnext.call(null, in$);
        var G__16005 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16004;
        out = G__16005;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16006) {
    var keyvals = cljs.core.seq(arglist__16006);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16007 = cljs.core.nnext.call(null, in$);
        var G__16008 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__16007;
        out = G__16008;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16009) {
    var comparator = cljs.core.first(arglist__16009);
    var keyvals = cljs.core.rest(arglist__16009);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16010 = self__.mseq;
    if (G__16010) {
      var bit__4129__auto__ = G__16010.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__16010.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16010.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16010);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16010);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16011 = self__.mseq;
    if (G__16011) {
      var bit__4129__auto__ = G__16011.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__16011.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16011.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16011);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16011);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16012 = self__.mseq;
    if (G__16012) {
      var bit__4129__auto__ = G__16012.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__16012.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16012.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16012);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16012);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16013 = self__.mseq;
    if (G__16013) {
      var bit__4129__auto__ = G__16013.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4129__auto__ || G__16013.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16013.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16013);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__16013);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__16014_SHARP_, p2__16015_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3479__auto__ = p1__16014_SHARP_;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16015_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16016) {
    var maps = cljs.core.seq(arglist__16016);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3479__auto__ = m1;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16017) {
    var f = cljs.core.first(arglist__16017);
    var maps = cljs.core.rest(arglist__16017);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__16018 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__16019 = cljs.core.next.call(null, keys);
      ret = G__16018;
      keys = G__16019;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16020_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16020_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16022 = null;
  var G__16022__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16022__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16022 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16022__2.call(this, self__, k);
      case 3:
        return G__16022__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16022;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16021) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16021)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16023 = i + 1;
        var G__16024 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__16023;
        out = G__16024;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16025 = i + 1;
        var G__16026 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__16025;
        out = G__16026;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16028 = null;
  var G__16028__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16028__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16028 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16028__2.call(this, self__, k);
      case 3:
        return G__16028__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16028;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16027) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16027)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__16029_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__16029_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16031 = null;
  var G__16031__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16031__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16031 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16031__2.call(this, self__, k);
      case 3:
        return G__16031__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16031;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16030) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16030)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4321__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4321__auto__.length) {
        var G__16032 = i + 1;
        var G__16033 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__16032;
        res = G__16033;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__16034 = cljs.core._next.call(null, in$__$1);
            var G__16035 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__16034;
            out = G__16035;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16036__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__16036 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16036__delegate.call(this, keys);
    };
    G__16036.cljs$lang$maxFixedArity = 0;
    G__16036.cljs$lang$applyTo = function(arglist__16037) {
      var keys = cljs.core.seq(arglist__16037);
      return G__16036__delegate(keys);
    };
    G__16036.cljs$core$IFn$_invoke$arity$variadic = G__16036__delegate;
    return G__16036;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16038) {
    var keys = cljs.core.seq(arglist__16038);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16039) {
    var comparator = cljs.core.first(arglist__16039);
    var keys = cljs.core.rest(arglist__16039);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__16040_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__16040_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__16040_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__16047, seen__$1) {
        while (true) {
          var vec__16048 = p__16047;
          var f = cljs.core.nth.call(null, vec__16048, 0, null);
          var xs__$1 = vec__16048;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__16049 = cljs.core.rest.call(null, s);
              var G__16050 = seen__$1;
              p__16047 = G__16049;
              seen__$1 = G__16050;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__16051 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__16052 = cljs.core.next.call(null, s__$1);
      ret = G__16051;
      s__$1 = G__16052;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16054 = x;
    if (G__16054) {
      var bit__4122__auto__ = G__16054.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4122__auto__ || G__16054.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__16055 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__16056 = cljs.core.next.call(null, ks);
      var G__16057 = cljs.core.next.call(null, vs);
      map = G__16055;
      ks = G__16056;
      vs = G__16057;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16060__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16058_SHARP_, p2__16059_SHARP_) {
        return max_key.call(null, k, p1__16058_SHARP_, p2__16059_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__16060 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16060__delegate.call(this, k, x, y, more);
    };
    G__16060.cljs$lang$maxFixedArity = 3;
    G__16060.cljs$lang$applyTo = function(arglist__16061) {
      var k = cljs.core.first(arglist__16061);
      arglist__16061 = cljs.core.next(arglist__16061);
      var x = cljs.core.first(arglist__16061);
      arglist__16061 = cljs.core.next(arglist__16061);
      var y = cljs.core.first(arglist__16061);
      var more = cljs.core.rest(arglist__16061);
      return G__16060__delegate(k, x, y, more);
    };
    G__16060.cljs$core$IFn$_invoke$arity$variadic = G__16060__delegate;
    return G__16060;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16064__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__16062_SHARP_, p2__16063_SHARP_) {
        return min_key.call(null, k, p1__16062_SHARP_, p2__16063_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__16064 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16064__delegate.call(this, k, x, y, more);
    };
    G__16064.cljs$lang$maxFixedArity = 3;
    G__16064.cljs$lang$applyTo = function(arglist__16065) {
      var k = cljs.core.first(arglist__16065);
      arglist__16065 = cljs.core.next(arglist__16065);
      var x = cljs.core.first(arglist__16065);
      arglist__16065 = cljs.core.next(arglist__16065);
      var y = cljs.core.first(arglist__16065);
      var more = cljs.core.rest(arglist__16065);
      return G__16064__delegate(k, x, y, more);
    };
    G__16064.cljs$core$IFn$_invoke$arity$variadic = G__16064__delegate;
    return G__16064;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16068 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16068, 0, null);
        var s = vec__16068;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16069 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16069, 0, null);
      var s = vec__16069;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16072 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__16072, 0, null);
        var s = vec__16072;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16073 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__16073, 0, null);
      var s = vec__16073;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__16074_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__16074_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16085 = null;
      var G__16085__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__16085__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__16085__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__16085__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__16085__4 = function() {
        var G__16086__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__16086 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16086__delegate.call(this, x, y, z, args);
        };
        G__16086.cljs$lang$maxFixedArity = 3;
        G__16086.cljs$lang$applyTo = function(arglist__16087) {
          var x = cljs.core.first(arglist__16087);
          arglist__16087 = cljs.core.next(arglist__16087);
          var y = cljs.core.first(arglist__16087);
          arglist__16087 = cljs.core.next(arglist__16087);
          var z = cljs.core.first(arglist__16087);
          var args = cljs.core.rest(arglist__16087);
          return G__16086__delegate(x, y, z, args);
        };
        G__16086.cljs$core$IFn$_invoke$arity$variadic = G__16086__delegate;
        return G__16086;
      }();
      G__16085 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16085__0.call(this);
          case 1:
            return G__16085__1.call(this, x);
          case 2:
            return G__16085__2.call(this, x, y);
          case 3:
            return G__16085__3.call(this, x, y, z);
          default:
            return G__16085__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16085.cljs$lang$maxFixedArity = 3;
      G__16085.cljs$lang$applyTo = G__16085__4.cljs$lang$applyTo;
      return G__16085;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16088 = null;
      var G__16088__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__16088__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__16088__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__16088__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__16088__4 = function() {
        var G__16089__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__16089 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16089__delegate.call(this, x, y, z, args);
        };
        G__16089.cljs$lang$maxFixedArity = 3;
        G__16089.cljs$lang$applyTo = function(arglist__16090) {
          var x = cljs.core.first(arglist__16090);
          arglist__16090 = cljs.core.next(arglist__16090);
          var y = cljs.core.first(arglist__16090);
          arglist__16090 = cljs.core.next(arglist__16090);
          var z = cljs.core.first(arglist__16090);
          var args = cljs.core.rest(arglist__16090);
          return G__16089__delegate(x, y, z, args);
        };
        G__16089.cljs$core$IFn$_invoke$arity$variadic = G__16089__delegate;
        return G__16089;
      }();
      G__16088 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16088__0.call(this);
          case 1:
            return G__16088__1.call(this, x);
          case 2:
            return G__16088__2.call(this, x, y);
          case 3:
            return G__16088__3.call(this, x, y, z);
          default:
            return G__16088__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16088.cljs$lang$maxFixedArity = 3;
      G__16088.cljs$lang$applyTo = G__16088__4.cljs$lang$applyTo;
      return G__16088;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16091 = null;
      var G__16091__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__16091__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__16091__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__16091__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__16091__4 = function() {
        var G__16092__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__16092 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__16092__delegate.call(this, x, y, z, args);
        };
        G__16092.cljs$lang$maxFixedArity = 3;
        G__16092.cljs$lang$applyTo = function(arglist__16093) {
          var x = cljs.core.first(arglist__16093);
          arglist__16093 = cljs.core.next(arglist__16093);
          var y = cljs.core.first(arglist__16093);
          arglist__16093 = cljs.core.next(arglist__16093);
          var z = cljs.core.first(arglist__16093);
          var args = cljs.core.rest(arglist__16093);
          return G__16092__delegate(x, y, z, args);
        };
        G__16092.cljs$core$IFn$_invoke$arity$variadic = G__16092__delegate;
        return G__16092;
      }();
      G__16091 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16091__0.call(this);
          case 1:
            return G__16091__1.call(this, x);
          case 2:
            return G__16091__2.call(this, x, y);
          case 3:
            return G__16091__3.call(this, x, y, z);
          default:
            return G__16091__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16091.cljs$lang$maxFixedArity = 3;
      G__16091.cljs$lang$applyTo = G__16091__4.cljs$lang$applyTo;
      return G__16091;
    }();
  };
  var juxt__4 = function() {
    var G__16094__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16095 = null;
          var G__16095__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16075_SHARP_, p2__16076_SHARP_) {
                return cljs.core.conj.call(null, p1__16075_SHARP_, p2__16076_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16095__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16077_SHARP_, p2__16078_SHARP_) {
                return cljs.core.conj.call(null, p1__16077_SHARP_, p2__16078_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16095__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16079_SHARP_, p2__16080_SHARP_) {
                return cljs.core.conj.call(null, p1__16079_SHARP_, p2__16080_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16095__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__16081_SHARP_, p2__16082_SHARP_) {
                return cljs.core.conj.call(null, p1__16081_SHARP_, p2__16082_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16095__4 = function() {
            var G__16096__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__16083_SHARP_, p2__16084_SHARP_) {
                  return cljs.core.conj.call(null, p1__16083_SHARP_, cljs.core.apply.call(null, p2__16084_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16096 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__16096__delegate.call(this, x, y, z, args);
            };
            G__16096.cljs$lang$maxFixedArity = 3;
            G__16096.cljs$lang$applyTo = function(arglist__16097) {
              var x = cljs.core.first(arglist__16097);
              arglist__16097 = cljs.core.next(arglist__16097);
              var y = cljs.core.first(arglist__16097);
              arglist__16097 = cljs.core.next(arglist__16097);
              var z = cljs.core.first(arglist__16097);
              var args = cljs.core.rest(arglist__16097);
              return G__16096__delegate(x, y, z, args);
            };
            G__16096.cljs$core$IFn$_invoke$arity$variadic = G__16096__delegate;
            return G__16096;
          }();
          G__16095 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16095__0.call(this);
              case 1:
                return G__16095__1.call(this, x);
              case 2:
                return G__16095__2.call(this, x, y);
              case 3:
                return G__16095__3.call(this, x, y, z);
              default:
                return G__16095__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16095.cljs$lang$maxFixedArity = 3;
          G__16095.cljs$lang$applyTo = G__16095__4.cljs$lang$applyTo;
          return G__16095;
        }();
      }(fs__$1);
    };
    var G__16094 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16094__delegate.call(this, f, g, h, fs);
    };
    G__16094.cljs$lang$maxFixedArity = 3;
    G__16094.cljs$lang$applyTo = function(arglist__16098) {
      var f = cljs.core.first(arglist__16098);
      arglist__16098 = cljs.core.next(arglist__16098);
      var g = cljs.core.first(arglist__16098);
      arglist__16098 = cljs.core.next(arglist__16098);
      var h = cljs.core.first(arglist__16098);
      var fs = cljs.core.rest(arglist__16098);
      return G__16094__delegate(f, g, h, fs);
    };
    G__16094.cljs$core$IFn$_invoke$arity$variadic = G__16094__delegate;
    return G__16094;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__16099 = cljs.core.next.call(null, coll);
        coll = G__16099;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__16100 = n - 1;
        var G__16101 = cljs.core.next.call(null, coll);
        n = G__16100;
        coll = G__16101;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__16103 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__16103, 0, null);
  var flags = cljs.core.nth.call(null, vec__16103, 1, null);
  var pattern = cljs.core.nth.call(null, vec__16103, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16105 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_16106__$1 = cljs.core.next.call(null, coll);
      var n_16107 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_16106__$1 && (n_16107 == null || !(n_16107 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_16106__$1), writer, opts);
          var G__16108 = cljs.core.next.call(null, coll_16106__$1);
          var G__16109 = n_16107 - 1;
          coll_16106__$1 = G__16108;
          n_16107 = G__16109;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16105;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16114 = cljs.core.seq.call(null, ss);
    var chunk__16115 = null;
    var count__16116 = 0;
    var i__16117 = 0;
    while (true) {
      if (i__16117 < count__16116) {
        var s = cljs.core._nth.call(null, chunk__16115, i__16117);
        cljs.core._write.call(null, writer, s);
        var G__16118 = seq__16114;
        var G__16119 = chunk__16115;
        var G__16120 = count__16116;
        var G__16121 = i__16117 + 1;
        seq__16114 = G__16118;
        chunk__16115 = G__16119;
        count__16116 = G__16120;
        i__16117 = G__16121;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__16114);
        if (temp__4126__auto__) {
          var seq__16114__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__16114__$1)) {
            var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__16114__$1);
            var G__16122 = cljs.core.chunk_rest.call(null, seq__16114__$1);
            var G__16123 = c__4227__auto__;
            var G__16124 = cljs.core.count.call(null, c__4227__auto__);
            var G__16125 = 0;
            seq__16114 = G__16122;
            chunk__16115 = G__16123;
            count__16116 = G__16124;
            i__16117 = G__16125;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__16114__$1);
            cljs.core._write.call(null, writer, s);
            var G__16126 = cljs.core.next.call(null, seq__16114__$1);
            var G__16127 = null;
            var G__16128 = 0;
            var G__16129 = 0;
            seq__16114 = G__16126;
            chunk__16115 = G__16127;
            count__16116 = G__16128;
            i__16117 = G__16129;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16130) {
    var writer = cljs.core.first(arglist__16130);
    var ss = cljs.core.rest(arglist__16130);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16132 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16132;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3467__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3467__auto__)) {
            var and__3467__auto____$1 = function() {
              var G__16138 = obj;
              if (G__16138) {
                var bit__4129__auto__ = G__16138.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4129__auto__ || G__16138.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__16138.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16138);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16138);
              }
            }();
            if (and__3467__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3467__auto____$1;
            }
          } else {
            return and__3467__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__16139 = obj;
              if (G__16139) {
                var bit__4122__auto__ = G__16139.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4122__auto__ || G__16139.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__16141 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__16141;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__16140 = obj;
                              if (G__16140) {
                                var bit__4129__auto__ = G__16140.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4129__auto__ || G__16140.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__16140.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16140);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__16140);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__16146 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__16147 = null;
  var count__16148 = 0;
  var i__16149 = 0;
  while (true) {
    if (i__16149 < count__16148) {
      var obj = cljs.core._nth.call(null, chunk__16147, i__16149);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__16150 = seq__16146;
      var G__16151 = chunk__16147;
      var G__16152 = count__16148;
      var G__16153 = i__16149 + 1;
      seq__16146 = G__16150;
      chunk__16147 = G__16151;
      count__16148 = G__16152;
      i__16149 = G__16153;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16146);
      if (temp__4126__auto__) {
        var seq__16146__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16146__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__16146__$1);
          var G__16154 = cljs.core.chunk_rest.call(null, seq__16146__$1);
          var G__16155 = c__4227__auto__;
          var G__16156 = cljs.core.count.call(null, c__4227__auto__);
          var G__16157 = 0;
          seq__16146 = G__16154;
          chunk__16147 = G__16155;
          count__16148 = G__16156;
          i__16149 = G__16157;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__16146__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__16158 = cljs.core.next.call(null, seq__16146__$1);
          var G__16159 = null;
          var G__16160 = 0;
          var G__16161 = 0;
          seq__16146 = G__16158;
          chunk__16147 = G__16159;
          count__16148 = G__16160;
          i__16149 = G__16161;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16162) {
    var objs = cljs.core.seq(arglist__16162);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16163) {
    var objs = cljs.core.seq(arglist__16163);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16164) {
    var objs = cljs.core.seq(arglist__16164);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16165) {
    var objs = cljs.core.seq(arglist__16165);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16166) {
    var objs = cljs.core.seq(arglist__16166);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16167) {
    var objs = cljs.core.seq(arglist__16167);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16168) {
    var objs = cljs.core.seq(arglist__16168);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16169) {
    var objs = cljs.core.seq(arglist__16169);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj16171 = {};
  return obj16171;
}();
cljs.core.IReset = function() {
  var obj16173 = {};
  return obj16173;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3467__auto__ = o;
    if (and__3467__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4106__auto__ = o == null ? null : o;
    return function() {
      var or__3479__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj16175 = {};
  return obj16175;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3467__auto__ = o;
      if (and__3467__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4106__auto__ = o == null ? null : o;
      return function() {
        var or__3479__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16176 = cljs.core.seq.call(null, self__.watches);
  var chunk__16177 = null;
  var count__16178 = 0;
  var i__16179 = 0;
  while (true) {
    if (i__16179 < count__16178) {
      var vec__16180 = cljs.core._nth.call(null, chunk__16177, i__16179);
      var key = cljs.core.nth.call(null, vec__16180, 0, null);
      var f = cljs.core.nth.call(null, vec__16180, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__16182 = seq__16176;
      var G__16183 = chunk__16177;
      var G__16184 = count__16178;
      var G__16185 = i__16179 + 1;
      seq__16176 = G__16182;
      chunk__16177 = G__16183;
      count__16178 = G__16184;
      i__16179 = G__16185;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__16176);
      if (temp__4126__auto__) {
        var seq__16176__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16176__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__16176__$1);
          var G__16186 = cljs.core.chunk_rest.call(null, seq__16176__$1);
          var G__16187 = c__4227__auto__;
          var G__16188 = cljs.core.count.call(null, c__4227__auto__);
          var G__16189 = 0;
          seq__16176 = G__16186;
          chunk__16177 = G__16187;
          count__16178 = G__16188;
          i__16179 = G__16189;
          continue;
        } else {
          var vec__16181 = cljs.core.first.call(null, seq__16176__$1);
          var key = cljs.core.nth.call(null, vec__16181, 0, null);
          var f = cljs.core.nth.call(null, vec__16181, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__16190 = cljs.core.next.call(null, seq__16176__$1);
          var G__16191 = null;
          var G__16192 = 0;
          var G__16193 = 0;
          seq__16176 = G__16190;
          chunk__16177 = G__16191;
          count__16178 = G__16192;
          i__16179 = G__16193;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__16197__delegate = function(x, p__16194) {
      var map__16196 = p__16194;
      var map__16196__$1 = cljs.core.seq_QMARK_.call(null, map__16196) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16196) : map__16196;
      var validator = cljs.core.get.call(null, map__16196__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__16196__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__16197 = function(x, var_args) {
      var p__16194 = null;
      if (arguments.length > 1) {
        p__16194 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16197__delegate.call(this, x, p__16194);
    };
    G__16197.cljs$lang$maxFixedArity = 1;
    G__16197.cljs$lang$applyTo = function(arglist__16198) {
      var x = cljs.core.first(arglist__16198);
      var p__16194 = cljs.core.rest(arglist__16198);
      return G__16197__delegate(x, p__16194);
    };
    G__16197.cljs$core$IFn$_invoke$arity$variadic = G__16197__delegate;
    return G__16197;
  }();
  atom = function(x, var_args) {
    var p__16194 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__16199__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__16199 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16199__delegate.call(this, a, f, x, y, more);
    };
    G__16199.cljs$lang$maxFixedArity = 4;
    G__16199.cljs$lang$applyTo = function(arglist__16200) {
      var a = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var f = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var x = cljs.core.first(arglist__16200);
      arglist__16200 = cljs.core.next(arglist__16200);
      var y = cljs.core.first(arglist__16200);
      var more = cljs.core.rest(arglist__16200);
      return G__16199__delegate(a, f, x, y, more);
    };
    G__16199.cljs$core$IFn$_invoke$arity$variadic = G__16199__delegate;
    return G__16199;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16201) {
    var iref = cljs.core.first(arglist__16201);
    arglist__16201 = cljs.core.next(arglist__16201);
    var f = cljs.core.first(arglist__16201);
    var args = cljs.core.rest(arglist__16201);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(___$1) {
    return function(p__16202) {
      var map__16203 = p__16202;
      var map__16203__$1 = cljs.core.seq_QMARK_.call(null, map__16203) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16203) : map__16203;
      var curr_state = map__16203__$1;
      var done = cljs.core.get.call(null, map__16203__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
      if (cljs.core.truth_(done)) {
        return curr_state;
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
      }
    };
  }(___$1)));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj16205 = {};
  return obj16205;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16207 = k;
    if (G__16207) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__16207.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16207.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16207);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16207);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16221 = x;
      if (G__16221) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__16221.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16221.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16221);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__16221);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj16223 = {};
              return obj16223;
            }();
            var seq__16224_16234 = cljs.core.seq.call(null, x);
            var chunk__16225_16235 = null;
            var count__16226_16236 = 0;
            var i__16227_16237 = 0;
            while (true) {
              if (i__16227_16237 < count__16226_16236) {
                var vec__16228_16238 = cljs.core._nth.call(null, chunk__16225_16235, i__16227_16237);
                var k_16239 = cljs.core.nth.call(null, vec__16228_16238, 0, null);
                var v_16240 = cljs.core.nth.call(null, vec__16228_16238, 1, null);
                m[cljs.core.key__GT_js.call(null, k_16239)] = clj__GT_js.call(null, v_16240);
                var G__16241 = seq__16224_16234;
                var G__16242 = chunk__16225_16235;
                var G__16243 = count__16226_16236;
                var G__16244 = i__16227_16237 + 1;
                seq__16224_16234 = G__16241;
                chunk__16225_16235 = G__16242;
                count__16226_16236 = G__16243;
                i__16227_16237 = G__16244;
                continue;
              } else {
                var temp__4126__auto___16245 = cljs.core.seq.call(null, seq__16224_16234);
                if (temp__4126__auto___16245) {
                  var seq__16224_16246__$1 = temp__4126__auto___16245;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__16224_16246__$1)) {
                    var c__4227__auto___16247 = cljs.core.chunk_first.call(null, seq__16224_16246__$1);
                    var G__16248 = cljs.core.chunk_rest.call(null, seq__16224_16246__$1);
                    var G__16249 = c__4227__auto___16247;
                    var G__16250 = cljs.core.count.call(null, c__4227__auto___16247);
                    var G__16251 = 0;
                    seq__16224_16234 = G__16248;
                    chunk__16225_16235 = G__16249;
                    count__16226_16236 = G__16250;
                    i__16227_16237 = G__16251;
                    continue;
                  } else {
                    var vec__16229_16252 = cljs.core.first.call(null, seq__16224_16246__$1);
                    var k_16253 = cljs.core.nth.call(null, vec__16229_16252, 0, null);
                    var v_16254 = cljs.core.nth.call(null, vec__16229_16252, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_16253)] = clj__GT_js.call(null, v_16254);
                    var G__16255 = cljs.core.next.call(null, seq__16224_16246__$1);
                    var G__16256 = null;
                    var G__16257 = 0;
                    var G__16258 = 0;
                    seq__16224_16234 = G__16255;
                    chunk__16225_16235 = G__16256;
                    count__16226_16236 = G__16257;
                    i__16227_16237 = G__16258;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__16230_16259 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__16231_16260 = null;
              var count__16232_16261 = 0;
              var i__16233_16262 = 0;
              while (true) {
                if (i__16233_16262 < count__16232_16261) {
                  var x_16263__$1 = cljs.core._nth.call(null, chunk__16231_16260, i__16233_16262);
                  arr.push(x_16263__$1);
                  var G__16264 = seq__16230_16259;
                  var G__16265 = chunk__16231_16260;
                  var G__16266 = count__16232_16261;
                  var G__16267 = i__16233_16262 + 1;
                  seq__16230_16259 = G__16264;
                  chunk__16231_16260 = G__16265;
                  count__16232_16261 = G__16266;
                  i__16233_16262 = G__16267;
                  continue;
                } else {
                  var temp__4126__auto___16268 = cljs.core.seq.call(null, seq__16230_16259);
                  if (temp__4126__auto___16268) {
                    var seq__16230_16269__$1 = temp__4126__auto___16268;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__16230_16269__$1)) {
                      var c__4227__auto___16270 = cljs.core.chunk_first.call(null, seq__16230_16269__$1);
                      var G__16271 = cljs.core.chunk_rest.call(null, seq__16230_16269__$1);
                      var G__16272 = c__4227__auto___16270;
                      var G__16273 = cljs.core.count.call(null, c__4227__auto___16270);
                      var G__16274 = 0;
                      seq__16230_16259 = G__16271;
                      chunk__16231_16260 = G__16272;
                      count__16232_16261 = G__16273;
                      i__16233_16262 = G__16274;
                      continue;
                    } else {
                      var x_16275__$1 = cljs.core.first.call(null, seq__16230_16269__$1);
                      arr.push(x_16275__$1);
                      var G__16276 = cljs.core.next.call(null, seq__16230_16269__$1);
                      var G__16277 = null;
                      var G__16278 = 0;
                      var G__16279 = 0;
                      seq__16230_16259 = G__16276;
                      chunk__16231_16260 = G__16277;
                      count__16232_16261 = G__16278;
                      i__16233_16262 = G__16279;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16281 = {};
  return obj16281;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__16302__delegate = function(x, opts) {
      if (function() {
        var G__16292 = x;
        if (G__16292) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__16292.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__16292.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16292);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__16292);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__16293 = opts;
          var map__16293__$1 = cljs.core.seq_QMARK_.call(null, map__16293) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16293) : map__16293;
          var keywordize_keys = cljs.core.get.call(null, map__16293__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__16293, map__16293__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4196__auto__ = function(map__16293, map__16293__$1, keywordize_keys, keyfn) {
                          return function iter__16298(s__16299) {
                            return new cljs.core.LazySeq(null, function(map__16293, map__16293__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__16299__$1 = s__16299;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__16299__$1);
                                  if (temp__4126__auto__) {
                                    var s__16299__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__16299__$2)) {
                                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__16299__$2);
                                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                      var b__16301 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                      if (function() {
                                        var i__16300 = 0;
                                        while (true) {
                                          if (i__16300 < size__4195__auto__) {
                                            var k = cljs.core._nth.call(null, c__4194__auto__, i__16300);
                                            cljs.core.chunk_append.call(null, b__16301, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__16303 = i__16300 + 1;
                                            i__16300 = G__16303;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16301), iter__16298.call(null, cljs.core.chunk_rest.call(null, s__16299__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__16301), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__16299__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__16298.call(null, cljs.core.rest.call(null, s__16299__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__16293, map__16293__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__16293, map__16293__$1, keywordize_keys, keyfn);
                        return iter__4196__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__16293, map__16293__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__16302 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16302__delegate.call(this, x, opts);
    };
    G__16302.cljs$lang$maxFixedArity = 1;
    G__16302.cljs$lang$applyTo = function(arglist__16304) {
      var x = cljs.core.first(arglist__16304);
      var opts = cljs.core.rest(arglist__16304);
      return G__16302__delegate(x, opts);
    };
    G__16302.cljs$core$IFn$_invoke$arity$variadic = G__16302__delegate;
    return G__16302;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__16305__delegate = function(args) {
        var temp__4124__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var v = temp__4124__auto__;
          return v;
        } else {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        }
      };
      var G__16305 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__16305__delegate.call(this, args);
      };
      G__16305.cljs$lang$maxFixedArity = 0;
      G__16305.cljs$lang$applyTo = function(arglist__16306) {
        var args = cljs.core.seq(arglist__16306);
        return G__16305__delegate(args);
      };
      G__16305.cljs$core$IFn$_invoke$arity$variadic = G__16305__delegate;
      return G__16305;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__16307 = ret;
        f = G__16307;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16308__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__16308 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16308__delegate.call(this, f, args);
    };
    G__16308.cljs$lang$maxFixedArity = 1;
    G__16308.cljs$lang$applyTo = function(arglist__16309) {
      var f = cljs.core.first(arglist__16309);
      var args = cljs.core.rest(arglist__16309);
      return G__16308__delegate(f, args);
    };
    G__16308.cljs$core$IFn$_invoke$arity$variadic = G__16308__delegate;
    return G__16308;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16310) {
    var f = cljs.core.first(arglist__16310);
    var args = cljs.core.rest(arglist__16310);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3479__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      var or__3479__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3479__auto____$1) {
        return or__3479__auto____$1;
      } else {
        var and__3467__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3467__auto__) {
          var and__3467__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3467__auto____$1) {
            var and__3467__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3467__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__16311 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__16312 = i + 1;
                  ret = G__16311;
                  i = G__16312;
                  continue;
                }
                break;
              }
            } else {
              return and__3467__auto____$2;
            }
          } else {
            return and__3467__auto____$1;
          }
        } else {
          return and__3467__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3479__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__16313_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__16313_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__16313_SHARP_), cljs.core.second.call(null, p1__16313_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__16314_SHARP_, p2__16315_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__16314_SHARP_, p2__16315_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3479__auto__ = cljs.core.truth_(function() {
    var and__3467__auto__ = xprefs;
    if (cljs.core.truth_(and__3467__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3467__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    var or__3479__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__16316 = cljs.core.rest.call(null, ps);
          ps = G__16316;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3479__auto____$1)) {
      return or__3479__auto____$1;
    } else {
      var or__3479__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__16317 = cljs.core.rest.call(null, ps);
            ps = G__16317;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3479__auto____$2)) {
        return or__3479__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3479__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__16320) {
    var vec__16321 = p__16320;
    var k = cljs.core.nth.call(null, vec__16321, 0, null);
    var _ = cljs.core.nth.call(null, vec__16321, 1, null);
    var e = vec__16321;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3479__auto__ = be == null;
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj16323 = {};
  return obj16323;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._reset[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._reset["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._add_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._add_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._remove_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._remove_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._prefer_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._get_method[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._get_method["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._methods[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._methods["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._prefers[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._prefers["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__3467__auto__ = mf;
    if (and__3467__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__4106__auto__ = mf == null ? null : mf;
    return function() {
      var or__3479__auto__ = cljs.core._dispatch[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core._dispatch["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__16324__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__16324 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__16324__delegate.call(this, _, args);
  };
  G__16324.cljs$lang$maxFixedArity = 1;
  G__16324.cljs$lang$applyTo = function(arglist__16325) {
    var _ = cljs.core.first(arglist__16325);
    var args = cljs.core.rest(arglist__16325);
    return G__16324__delegate(_, args);
  };
  G__16324.cljs$core$IFn$_invoke$arity$variadic = G__16324__delegate;
  return G__16324;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("om.dom");
goog.require("cljs.core");
om.dom.a = function() {
  var a__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var a = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return a__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__14376) {
    var opts__5037__auto__ = cljs.core.first(arglist__14376);
    var children__5038__auto__ = cljs.core.rest(arglist__14376);
    return a__delegate(opts__5037__auto__, children__5038__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var abbr = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return abbr__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__14377) {
    var opts__5037__auto__ = cljs.core.first(arglist__14377);
    var children__5038__auto__ = cljs.core.rest(arglist__14377);
    return abbr__delegate(opts__5037__auto__, children__5038__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var address = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return address__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__14378) {
    var opts__5037__auto__ = cljs.core.first(arglist__14378);
    var children__5038__auto__ = cljs.core.rest(arglist__14378);
    return address__delegate(opts__5037__auto__, children__5038__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var area = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return area__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__14379) {
    var opts__5037__auto__ = cljs.core.first(arglist__14379);
    var children__5038__auto__ = cljs.core.rest(arglist__14379);
    return area__delegate(opts__5037__auto__, children__5038__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var article = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return article__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__14380) {
    var opts__5037__auto__ = cljs.core.first(arglist__14380);
    var children__5038__auto__ = cljs.core.rest(arglist__14380);
    return article__delegate(opts__5037__auto__, children__5038__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var aside = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return aside__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__14381) {
    var opts__5037__auto__ = cljs.core.first(arglist__14381);
    var children__5038__auto__ = cljs.core.rest(arglist__14381);
    return aside__delegate(opts__5037__auto__, children__5038__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var audio = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return audio__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__14382) {
    var opts__5037__auto__ = cljs.core.first(arglist__14382);
    var children__5038__auto__ = cljs.core.rest(arglist__14382);
    return audio__delegate(opts__5037__auto__, children__5038__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var b = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return b__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__14383) {
    var opts__5037__auto__ = cljs.core.first(arglist__14383);
    var children__5038__auto__ = cljs.core.rest(arglist__14383);
    return b__delegate(opts__5037__auto__, children__5038__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var base = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return base__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__14384) {
    var opts__5037__auto__ = cljs.core.first(arglist__14384);
    var children__5038__auto__ = cljs.core.rest(arglist__14384);
    return base__delegate(opts__5037__auto__, children__5038__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var bdi = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdi__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__14385) {
    var opts__5037__auto__ = cljs.core.first(arglist__14385);
    var children__5038__auto__ = cljs.core.rest(arglist__14385);
    return bdi__delegate(opts__5037__auto__, children__5038__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var bdo = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return bdo__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__14386) {
    var opts__5037__auto__ = cljs.core.first(arglist__14386);
    var children__5038__auto__ = cljs.core.rest(arglist__14386);
    return bdo__delegate(opts__5037__auto__, children__5038__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var big = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return big__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__14387) {
    var opts__5037__auto__ = cljs.core.first(arglist__14387);
    var children__5038__auto__ = cljs.core.rest(arglist__14387);
    return big__delegate(opts__5037__auto__, children__5038__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var blockquote = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return blockquote__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__14388) {
    var opts__5037__auto__ = cljs.core.first(arglist__14388);
    var children__5038__auto__ = cljs.core.rest(arglist__14388);
    return blockquote__delegate(opts__5037__auto__, children__5038__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var body = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return body__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__14389) {
    var opts__5037__auto__ = cljs.core.first(arglist__14389);
    var children__5038__auto__ = cljs.core.rest(arglist__14389);
    return body__delegate(opts__5037__auto__, children__5038__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var br = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return br__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__14390) {
    var opts__5037__auto__ = cljs.core.first(arglist__14390);
    var children__5038__auto__ = cljs.core.rest(arglist__14390);
    return br__delegate(opts__5037__auto__, children__5038__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var button = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return button__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__14391) {
    var opts__5037__auto__ = cljs.core.first(arglist__14391);
    var children__5038__auto__ = cljs.core.rest(arglist__14391);
    return button__delegate(opts__5037__auto__, children__5038__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var canvas = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return canvas__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__14392) {
    var opts__5037__auto__ = cljs.core.first(arglist__14392);
    var children__5038__auto__ = cljs.core.rest(arglist__14392);
    return canvas__delegate(opts__5037__auto__, children__5038__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var caption = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return caption__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__14393) {
    var opts__5037__auto__ = cljs.core.first(arglist__14393);
    var children__5038__auto__ = cljs.core.rest(arglist__14393);
    return caption__delegate(opts__5037__auto__, children__5038__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var cite = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return cite__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__14394) {
    var opts__5037__auto__ = cljs.core.first(arglist__14394);
    var children__5038__auto__ = cljs.core.rest(arglist__14394);
    return cite__delegate(opts__5037__auto__, children__5038__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var code = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return code__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__14395) {
    var opts__5037__auto__ = cljs.core.first(arglist__14395);
    var children__5038__auto__ = cljs.core.rest(arglist__14395);
    return code__delegate(opts__5037__auto__, children__5038__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var col = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return col__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__14396) {
    var opts__5037__auto__ = cljs.core.first(arglist__14396);
    var children__5038__auto__ = cljs.core.rest(arglist__14396);
    return col__delegate(opts__5037__auto__, children__5038__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var colgroup = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return colgroup__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__14397) {
    var opts__5037__auto__ = cljs.core.first(arglist__14397);
    var children__5038__auto__ = cljs.core.rest(arglist__14397);
    return colgroup__delegate(opts__5037__auto__, children__5038__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var data = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return data__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__14398) {
    var opts__5037__auto__ = cljs.core.first(arglist__14398);
    var children__5038__auto__ = cljs.core.rest(arglist__14398);
    return data__delegate(opts__5037__auto__, children__5038__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var datalist = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return datalist__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__14399) {
    var opts__5037__auto__ = cljs.core.first(arglist__14399);
    var children__5038__auto__ = cljs.core.rest(arglist__14399);
    return datalist__delegate(opts__5037__auto__, children__5038__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var dd = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dd__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__14400) {
    var opts__5037__auto__ = cljs.core.first(arglist__14400);
    var children__5038__auto__ = cljs.core.rest(arglist__14400);
    return dd__delegate(opts__5037__auto__, children__5038__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var del = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return del__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__14401) {
    var opts__5037__auto__ = cljs.core.first(arglist__14401);
    var children__5038__auto__ = cljs.core.rest(arglist__14401);
    return del__delegate(opts__5037__auto__, children__5038__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var dfn = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dfn__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__14402) {
    var opts__5037__auto__ = cljs.core.first(arglist__14402);
    var children__5038__auto__ = cljs.core.rest(arglist__14402);
    return dfn__delegate(opts__5037__auto__, children__5038__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var div = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return div__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__14403) {
    var opts__5037__auto__ = cljs.core.first(arglist__14403);
    var children__5038__auto__ = cljs.core.rest(arglist__14403);
    return div__delegate(opts__5037__auto__, children__5038__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var dl = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dl__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__14404) {
    var opts__5037__auto__ = cljs.core.first(arglist__14404);
    var children__5038__auto__ = cljs.core.rest(arglist__14404);
    return dl__delegate(opts__5037__auto__, children__5038__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var dt = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return dt__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__14405) {
    var opts__5037__auto__ = cljs.core.first(arglist__14405);
    var children__5038__auto__ = cljs.core.rest(arglist__14405);
    return dt__delegate(opts__5037__auto__, children__5038__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var em = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return em__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__14406) {
    var opts__5037__auto__ = cljs.core.first(arglist__14406);
    var children__5038__auto__ = cljs.core.rest(arglist__14406);
    return em__delegate(opts__5037__auto__, children__5038__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var embed = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return embed__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__14407) {
    var opts__5037__auto__ = cljs.core.first(arglist__14407);
    var children__5038__auto__ = cljs.core.rest(arglist__14407);
    return embed__delegate(opts__5037__auto__, children__5038__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var fieldset = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return fieldset__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__14408) {
    var opts__5037__auto__ = cljs.core.first(arglist__14408);
    var children__5038__auto__ = cljs.core.rest(arglist__14408);
    return fieldset__delegate(opts__5037__auto__, children__5038__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var figcaption = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figcaption__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__14409) {
    var opts__5037__auto__ = cljs.core.first(arglist__14409);
    var children__5038__auto__ = cljs.core.rest(arglist__14409);
    return figcaption__delegate(opts__5037__auto__, children__5038__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var figure = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return figure__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__14410) {
    var opts__5037__auto__ = cljs.core.first(arglist__14410);
    var children__5038__auto__ = cljs.core.rest(arglist__14410);
    return figure__delegate(opts__5037__auto__, children__5038__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var footer = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return footer__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__14411) {
    var opts__5037__auto__ = cljs.core.first(arglist__14411);
    var children__5038__auto__ = cljs.core.rest(arglist__14411);
    return footer__delegate(opts__5037__auto__, children__5038__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var form = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return form__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__14412) {
    var opts__5037__auto__ = cljs.core.first(arglist__14412);
    var children__5038__auto__ = cljs.core.rest(arglist__14412);
    return form__delegate(opts__5037__auto__, children__5038__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h1 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h1__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__14413) {
    var opts__5037__auto__ = cljs.core.first(arglist__14413);
    var children__5038__auto__ = cljs.core.rest(arglist__14413);
    return h1__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h2 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h2__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__14414) {
    var opts__5037__auto__ = cljs.core.first(arglist__14414);
    var children__5038__auto__ = cljs.core.rest(arglist__14414);
    return h2__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h3 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h3__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__14415) {
    var opts__5037__auto__ = cljs.core.first(arglist__14415);
    var children__5038__auto__ = cljs.core.rest(arglist__14415);
    return h3__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h4 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h4__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__14416) {
    var opts__5037__auto__ = cljs.core.first(arglist__14416);
    var children__5038__auto__ = cljs.core.rest(arglist__14416);
    return h4__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h5 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h5__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__14417) {
    var opts__5037__auto__ = cljs.core.first(arglist__14417);
    var children__5038__auto__ = cljs.core.rest(arglist__14417);
    return h5__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var h6 = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return h6__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__14418) {
    var opts__5037__auto__ = cljs.core.first(arglist__14418);
    var children__5038__auto__ = cljs.core.rest(arglist__14418);
    return h6__delegate(opts__5037__auto__, children__5038__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var head = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return head__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__14419) {
    var opts__5037__auto__ = cljs.core.first(arglist__14419);
    var children__5038__auto__ = cljs.core.rest(arglist__14419);
    return head__delegate(opts__5037__auto__, children__5038__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var header = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return header__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__14420) {
    var opts__5037__auto__ = cljs.core.first(arglist__14420);
    var children__5038__auto__ = cljs.core.rest(arglist__14420);
    return header__delegate(opts__5037__auto__, children__5038__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var hr = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hr__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__14421) {
    var opts__5037__auto__ = cljs.core.first(arglist__14421);
    var children__5038__auto__ = cljs.core.rest(arglist__14421);
    return hr__delegate(opts__5037__auto__, children__5038__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var html = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return html__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__14422) {
    var opts__5037__auto__ = cljs.core.first(arglist__14422);
    var children__5038__auto__ = cljs.core.rest(arglist__14422);
    return html__delegate(opts__5037__auto__, children__5038__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var i = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return i__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__14423) {
    var opts__5037__auto__ = cljs.core.first(arglist__14423);
    var children__5038__auto__ = cljs.core.rest(arglist__14423);
    return i__delegate(opts__5037__auto__, children__5038__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var iframe = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return iframe__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__14424) {
    var opts__5037__auto__ = cljs.core.first(arglist__14424);
    var children__5038__auto__ = cljs.core.rest(arglist__14424);
    return iframe__delegate(opts__5037__auto__, children__5038__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var img = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return img__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__14425) {
    var opts__5037__auto__ = cljs.core.first(arglist__14425);
    var children__5038__auto__ = cljs.core.rest(arglist__14425);
    return img__delegate(opts__5037__auto__, children__5038__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var ins = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ins__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__14426) {
    var opts__5037__auto__ = cljs.core.first(arglist__14426);
    var children__5038__auto__ = cljs.core.rest(arglist__14426);
    return ins__delegate(opts__5037__auto__, children__5038__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var kbd = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return kbd__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__14427) {
    var opts__5037__auto__ = cljs.core.first(arglist__14427);
    var children__5038__auto__ = cljs.core.rest(arglist__14427);
    return kbd__delegate(opts__5037__auto__, children__5038__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var keygen = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return keygen__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__14428) {
    var opts__5037__auto__ = cljs.core.first(arglist__14428);
    var children__5038__auto__ = cljs.core.rest(arglist__14428);
    return keygen__delegate(opts__5037__auto__, children__5038__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var label = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return label__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__14429) {
    var opts__5037__auto__ = cljs.core.first(arglist__14429);
    var children__5038__auto__ = cljs.core.rest(arglist__14429);
    return label__delegate(opts__5037__auto__, children__5038__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var legend = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return legend__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__14430) {
    var opts__5037__auto__ = cljs.core.first(arglist__14430);
    var children__5038__auto__ = cljs.core.rest(arglist__14430);
    return legend__delegate(opts__5037__auto__, children__5038__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var li = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return li__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__14431) {
    var opts__5037__auto__ = cljs.core.first(arglist__14431);
    var children__5038__auto__ = cljs.core.rest(arglist__14431);
    return li__delegate(opts__5037__auto__, children__5038__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var link = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return link__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__14432) {
    var opts__5037__auto__ = cljs.core.first(arglist__14432);
    var children__5038__auto__ = cljs.core.rest(arglist__14432);
    return link__delegate(opts__5037__auto__, children__5038__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var main = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return main__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__14433) {
    var opts__5037__auto__ = cljs.core.first(arglist__14433);
    var children__5038__auto__ = cljs.core.rest(arglist__14433);
    return main__delegate(opts__5037__auto__, children__5038__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var map = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return map__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__14434) {
    var opts__5037__auto__ = cljs.core.first(arglist__14434);
    var children__5038__auto__ = cljs.core.rest(arglist__14434);
    return map__delegate(opts__5037__auto__, children__5038__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var mark = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mark__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__14435) {
    var opts__5037__auto__ = cljs.core.first(arglist__14435);
    var children__5038__auto__ = cljs.core.rest(arglist__14435);
    return mark__delegate(opts__5037__auto__, children__5038__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var menu = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menu__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__14436) {
    var opts__5037__auto__ = cljs.core.first(arglist__14436);
    var children__5038__auto__ = cljs.core.rest(arglist__14436);
    return menu__delegate(opts__5037__auto__, children__5038__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var menuitem = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return menuitem__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__14437) {
    var opts__5037__auto__ = cljs.core.first(arglist__14437);
    var children__5038__auto__ = cljs.core.rest(arglist__14437);
    return menuitem__delegate(opts__5037__auto__, children__5038__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var meta = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meta__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__14438) {
    var opts__5037__auto__ = cljs.core.first(arglist__14438);
    var children__5038__auto__ = cljs.core.rest(arglist__14438);
    return meta__delegate(opts__5037__auto__, children__5038__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var meter = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return meter__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__14439) {
    var opts__5037__auto__ = cljs.core.first(arglist__14439);
    var children__5038__auto__ = cljs.core.rest(arglist__14439);
    return meter__delegate(opts__5037__auto__, children__5038__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var nav = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return nav__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__14440) {
    var opts__5037__auto__ = cljs.core.first(arglist__14440);
    var children__5038__auto__ = cljs.core.rest(arglist__14440);
    return nav__delegate(opts__5037__auto__, children__5038__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var noscript = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return noscript__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__14441) {
    var opts__5037__auto__ = cljs.core.first(arglist__14441);
    var children__5038__auto__ = cljs.core.rest(arglist__14441);
    return noscript__delegate(opts__5037__auto__, children__5038__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var object = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return object__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__14442) {
    var opts__5037__auto__ = cljs.core.first(arglist__14442);
    var children__5038__auto__ = cljs.core.rest(arglist__14442);
    return object__delegate(opts__5037__auto__, children__5038__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var ol = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ol__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__14443) {
    var opts__5037__auto__ = cljs.core.first(arglist__14443);
    var children__5038__auto__ = cljs.core.rest(arglist__14443);
    return ol__delegate(opts__5037__auto__, children__5038__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var optgroup = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return optgroup__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__14444) {
    var opts__5037__auto__ = cljs.core.first(arglist__14444);
    var children__5038__auto__ = cljs.core.rest(arglist__14444);
    return optgroup__delegate(opts__5037__auto__, children__5038__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var output = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return output__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__14445) {
    var opts__5037__auto__ = cljs.core.first(arglist__14445);
    var children__5038__auto__ = cljs.core.rest(arglist__14445);
    return output__delegate(opts__5037__auto__, children__5038__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var p = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return p__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__14446) {
    var opts__5037__auto__ = cljs.core.first(arglist__14446);
    var children__5038__auto__ = cljs.core.rest(arglist__14446);
    return p__delegate(opts__5037__auto__, children__5038__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var param = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return param__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__14447) {
    var opts__5037__auto__ = cljs.core.first(arglist__14447);
    var children__5038__auto__ = cljs.core.rest(arglist__14447);
    return param__delegate(opts__5037__auto__, children__5038__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var pre = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return pre__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__14448) {
    var opts__5037__auto__ = cljs.core.first(arglist__14448);
    var children__5038__auto__ = cljs.core.rest(arglist__14448);
    return pre__delegate(opts__5037__auto__, children__5038__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var progress = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return progress__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__14449) {
    var opts__5037__auto__ = cljs.core.first(arglist__14449);
    var children__5038__auto__ = cljs.core.rest(arglist__14449);
    return progress__delegate(opts__5037__auto__, children__5038__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var q = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__14450) {
    var opts__5037__auto__ = cljs.core.first(arglist__14450);
    var children__5038__auto__ = cljs.core.rest(arglist__14450);
    return q__delegate(opts__5037__auto__, children__5038__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var rp = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rp__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__14451) {
    var opts__5037__auto__ = cljs.core.first(arglist__14451);
    var children__5038__auto__ = cljs.core.rest(arglist__14451);
    return rp__delegate(opts__5037__auto__, children__5038__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var rt = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rt__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__14452) {
    var opts__5037__auto__ = cljs.core.first(arglist__14452);
    var children__5038__auto__ = cljs.core.rest(arglist__14452);
    return rt__delegate(opts__5037__auto__, children__5038__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var ruby = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ruby__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__14453) {
    var opts__5037__auto__ = cljs.core.first(arglist__14453);
    var children__5038__auto__ = cljs.core.rest(arglist__14453);
    return ruby__delegate(opts__5037__auto__, children__5038__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var s = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return s__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__14454) {
    var opts__5037__auto__ = cljs.core.first(arglist__14454);
    var children__5038__auto__ = cljs.core.rest(arglist__14454);
    return s__delegate(opts__5037__auto__, children__5038__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var samp = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return samp__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__14455) {
    var opts__5037__auto__ = cljs.core.first(arglist__14455);
    var children__5038__auto__ = cljs.core.rest(arglist__14455);
    return samp__delegate(opts__5037__auto__, children__5038__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var script = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return script__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__14456) {
    var opts__5037__auto__ = cljs.core.first(arglist__14456);
    var children__5038__auto__ = cljs.core.rest(arglist__14456);
    return script__delegate(opts__5037__auto__, children__5038__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var section = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return section__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__14457) {
    var opts__5037__auto__ = cljs.core.first(arglist__14457);
    var children__5038__auto__ = cljs.core.rest(arglist__14457);
    return section__delegate(opts__5037__auto__, children__5038__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var select = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return select__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__14458) {
    var opts__5037__auto__ = cljs.core.first(arglist__14458);
    var children__5038__auto__ = cljs.core.rest(arglist__14458);
    return select__delegate(opts__5037__auto__, children__5038__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var small = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return small__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__14459) {
    var opts__5037__auto__ = cljs.core.first(arglist__14459);
    var children__5038__auto__ = cljs.core.rest(arglist__14459);
    return small__delegate(opts__5037__auto__, children__5038__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var source = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return source__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__14460) {
    var opts__5037__auto__ = cljs.core.first(arglist__14460);
    var children__5038__auto__ = cljs.core.rest(arglist__14460);
    return source__delegate(opts__5037__auto__, children__5038__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var span = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return span__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__14461) {
    var opts__5037__auto__ = cljs.core.first(arglist__14461);
    var children__5038__auto__ = cljs.core.rest(arglist__14461);
    return span__delegate(opts__5037__auto__, children__5038__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var strong = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return strong__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__14462) {
    var opts__5037__auto__ = cljs.core.first(arglist__14462);
    var children__5038__auto__ = cljs.core.rest(arglist__14462);
    return strong__delegate(opts__5037__auto__, children__5038__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var style = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return style__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__14463) {
    var opts__5037__auto__ = cljs.core.first(arglist__14463);
    var children__5038__auto__ = cljs.core.rest(arglist__14463);
    return style__delegate(opts__5037__auto__, children__5038__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var sub = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sub__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__14464) {
    var opts__5037__auto__ = cljs.core.first(arglist__14464);
    var children__5038__auto__ = cljs.core.rest(arglist__14464);
    return sub__delegate(opts__5037__auto__, children__5038__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var summary = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return summary__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__14465) {
    var opts__5037__auto__ = cljs.core.first(arglist__14465);
    var children__5038__auto__ = cljs.core.rest(arglist__14465);
    return summary__delegate(opts__5037__auto__, children__5038__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var sup = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sup__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__14466) {
    var opts__5037__auto__ = cljs.core.first(arglist__14466);
    var children__5038__auto__ = cljs.core.rest(arglist__14466);
    return sup__delegate(opts__5037__auto__, children__5038__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var table = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return table__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__14467) {
    var opts__5037__auto__ = cljs.core.first(arglist__14467);
    var children__5038__auto__ = cljs.core.rest(arglist__14467);
    return table__delegate(opts__5037__auto__, children__5038__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var tbody = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tbody__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__14468) {
    var opts__5037__auto__ = cljs.core.first(arglist__14468);
    var children__5038__auto__ = cljs.core.rest(arglist__14468);
    return tbody__delegate(opts__5037__auto__, children__5038__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var td = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return td__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__14469) {
    var opts__5037__auto__ = cljs.core.first(arglist__14469);
    var children__5038__auto__ = cljs.core.rest(arglist__14469);
    return td__delegate(opts__5037__auto__, children__5038__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var tfoot = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tfoot__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__14470) {
    var opts__5037__auto__ = cljs.core.first(arglist__14470);
    var children__5038__auto__ = cljs.core.rest(arglist__14470);
    return tfoot__delegate(opts__5037__auto__, children__5038__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var th = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return th__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__14471) {
    var opts__5037__auto__ = cljs.core.first(arglist__14471);
    var children__5038__auto__ = cljs.core.rest(arglist__14471);
    return th__delegate(opts__5037__auto__, children__5038__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var thead = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return thead__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__14472) {
    var opts__5037__auto__ = cljs.core.first(arglist__14472);
    var children__5038__auto__ = cljs.core.rest(arglist__14472);
    return thead__delegate(opts__5037__auto__, children__5038__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var time = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return time__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__14473) {
    var opts__5037__auto__ = cljs.core.first(arglist__14473);
    var children__5038__auto__ = cljs.core.rest(arglist__14473);
    return time__delegate(opts__5037__auto__, children__5038__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var title = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return title__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__14474) {
    var opts__5037__auto__ = cljs.core.first(arglist__14474);
    var children__5038__auto__ = cljs.core.rest(arglist__14474);
    return title__delegate(opts__5037__auto__, children__5038__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var tr = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return tr__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__14475) {
    var opts__5037__auto__ = cljs.core.first(arglist__14475);
    var children__5038__auto__ = cljs.core.rest(arglist__14475);
    return tr__delegate(opts__5037__auto__, children__5038__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var track = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return track__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__14476) {
    var opts__5037__auto__ = cljs.core.first(arglist__14476);
    var children__5038__auto__ = cljs.core.rest(arglist__14476);
    return track__delegate(opts__5037__auto__, children__5038__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var u = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return u__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__14477) {
    var opts__5037__auto__ = cljs.core.first(arglist__14477);
    var children__5038__auto__ = cljs.core.rest(arglist__14477);
    return u__delegate(opts__5037__auto__, children__5038__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var ul = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ul__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__14478) {
    var opts__5037__auto__ = cljs.core.first(arglist__14478);
    var children__5038__auto__ = cljs.core.rest(arglist__14478);
    return ul__delegate(opts__5037__auto__, children__5038__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var var$ = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return var$__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__14479) {
    var opts__5037__auto__ = cljs.core.first(arglist__14479);
    var children__5038__auto__ = cljs.core.rest(arglist__14479);
    return var$__delegate(opts__5037__auto__, children__5038__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var video = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return video__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__14480) {
    var opts__5037__auto__ = cljs.core.first(arglist__14480);
    var children__5038__auto__ = cljs.core.rest(arglist__14480);
    return video__delegate(opts__5037__auto__, children__5038__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var wbr = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wbr__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__14481) {
    var opts__5037__auto__ = cljs.core.first(arglist__14481);
    var children__5038__auto__ = cljs.core.rest(arglist__14481);
    return wbr__delegate(opts__5037__auto__, children__5038__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var circle = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return circle__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__14482) {
    var opts__5037__auto__ = cljs.core.first(arglist__14482);
    var children__5038__auto__ = cljs.core.rest(arglist__14482);
    return circle__delegate(opts__5037__auto__, children__5038__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.ellipse = function() {
  var ellipse__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var ellipse = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return ellipse__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  ellipse.cljs$lang$maxFixedArity = 1;
  ellipse.cljs$lang$applyTo = function(arglist__14483) {
    var opts__5037__auto__ = cljs.core.first(arglist__14483);
    var children__5038__auto__ = cljs.core.rest(arglist__14483);
    return ellipse__delegate(opts__5037__auto__, children__5038__auto__);
  };
  ellipse.cljs$core$IFn$_invoke$arity$variadic = ellipse__delegate;
  return ellipse;
}();
om.dom.g = function() {
  var g__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var g = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return g__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__14484) {
    var opts__5037__auto__ = cljs.core.first(arglist__14484);
    var children__5038__auto__ = cljs.core.rest(arglist__14484);
    return g__delegate(opts__5037__auto__, children__5038__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var line = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return line__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__14485) {
    var opts__5037__auto__ = cljs.core.first(arglist__14485);
    var children__5038__auto__ = cljs.core.rest(arglist__14485);
    return line__delegate(opts__5037__auto__, children__5038__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var path = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return path__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__14486) {
    var opts__5037__auto__ = cljs.core.first(arglist__14486);
    var children__5038__auto__ = cljs.core.rest(arglist__14486);
    return path__delegate(opts__5037__auto__, children__5038__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var polyline = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polyline__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__14487) {
    var opts__5037__auto__ = cljs.core.first(arglist__14487);
    var children__5038__auto__ = cljs.core.rest(arglist__14487);
    return polyline__delegate(opts__5037__auto__, children__5038__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var rect = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return rect__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__14488) {
    var opts__5037__auto__ = cljs.core.first(arglist__14488);
    var children__5038__auto__ = cljs.core.rest(arglist__14488);
    return rect__delegate(opts__5037__auto__, children__5038__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var svg = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return svg__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__14489) {
    var opts__5037__auto__ = cljs.core.first(arglist__14489);
    var children__5038__auto__ = cljs.core.rest(arglist__14489);
    return svg__delegate(opts__5037__auto__, children__5038__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var text = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return text__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__14490) {
    var opts__5037__auto__ = cljs.core.first(arglist__14490);
    var children__5038__auto__ = cljs.core.rest(arglist__14490);
    return text__delegate(opts__5037__auto__, children__5038__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.defs = function() {
  var defs__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var defs = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return defs__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  defs.cljs$lang$maxFixedArity = 1;
  defs.cljs$lang$applyTo = function(arglist__14491) {
    var opts__5037__auto__ = cljs.core.first(arglist__14491);
    var children__5038__auto__ = cljs.core.rest(arglist__14491);
    return defs__delegate(opts__5037__auto__, children__5038__auto__);
  };
  defs.cljs$core$IFn$_invoke$arity$variadic = defs__delegate;
  return defs;
}();
om.dom.linearGradient = function() {
  var linearGradient__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var linearGradient = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return linearGradient__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  linearGradient.cljs$lang$maxFixedArity = 1;
  linearGradient.cljs$lang$applyTo = function(arglist__14492) {
    var opts__5037__auto__ = cljs.core.first(arglist__14492);
    var children__5038__auto__ = cljs.core.rest(arglist__14492);
    return linearGradient__delegate(opts__5037__auto__, children__5038__auto__);
  };
  linearGradient.cljs$core$IFn$_invoke$arity$variadic = linearGradient__delegate;
  return linearGradient;
}();
om.dom.polygon = function() {
  var polygon__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var polygon = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return polygon__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 1;
  polygon.cljs$lang$applyTo = function(arglist__14493) {
    var opts__5037__auto__ = cljs.core.first(arglist__14493);
    var children__5038__auto__ = cljs.core.rest(arglist__14493);
    return polygon__delegate(opts__5037__auto__, children__5038__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
om.dom.radialGradient = function() {
  var radialGradient__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var radialGradient = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return radialGradient__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  radialGradient.cljs$lang$maxFixedArity = 1;
  radialGradient.cljs$lang$applyTo = function(arglist__14494) {
    var opts__5037__auto__ = cljs.core.first(arglist__14494);
    var children__5038__auto__ = cljs.core.rest(arglist__14494);
    return radialGradient__delegate(opts__5037__auto__, children__5038__auto__);
  };
  radialGradient.cljs$core$IFn$_invoke$arity$variadic = radialGradient__delegate;
  return radialGradient;
}();
om.dom.stop = function() {
  var stop__delegate = function(opts__5037__auto__, children__5038__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__5037__auto__, children__5038__auto__)));
  };
  var stop = function(opts__5037__auto__, var_args) {
    var children__5038__auto__ = null;
    if (arguments.length > 1) {
      children__5038__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return stop__delegate.call(this, opts__5037__auto__, children__5038__auto__);
  };
  stop.cljs$lang$maxFixedArity = 1;
  stop.cljs$lang$applyTo = function(arglist__14495) {
    var opts__5037__auto__ = cljs.core.first(arglist__14495);
    var children__5038__auto__ = cljs.core.rest(arglist__14495);
    return stop__delegate(opts__5037__auto__, children__5038__auto__);
  };
  stop.cljs$core$IFn$_invoke$arity$variadic = stop__delegate;
  return stop;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor, display_name) {
  return React.createClass({"render":function() {
    var this$ = this;
    return this$.transferPropsTo(ctor.call(null, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]}));
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }});
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function render(component, el) {
  return React.renderComponent(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderComponentToString(c);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__20048 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__20048;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__20052 = cljs.core._EQ_;
    var expr__20053 = limit;
    if (cljs.core.truth_(pred__20052.call(null, 1, expr__20053))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__20052.call(null, 2, expr__20053))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__20055 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__20056 = limit__$1 - 1;
            var G__20057 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__20055;
            limit__$1 = G__20056;
            parts = G__20057;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__20058 = index - 1;
        index = G__20058;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___20059 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___20059)) {
        var replacement_20060 = temp__4124__auto___20059;
        buffer.append([cljs.core.str(replacement_20060)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__20061 = index + 1;
      index = G__20061;
      continue;
    }
    break;
  }
};
goog.provide("om_tools.dom");
goog.require("cljs.core");
goog.require("om.dom");
goog.require("clojure.string");
goog.require("clojure.string");
om_tools.dom.camel_case = function camel_case(s) {
  return clojure.string.replace.call(null, s, /-(\w)/, cljs.core.comp.call(null, clojure.string.upper_case, cljs.core.second));
};
om_tools.dom.opt_key_case = function opt_key_case(attr) {
  if (cljs.core.truth_(function() {
    var or__3479__auto__ = cljs.core.count.call(null, attr) < 5;
    if (or__3479__auto__) {
      return or__3479__auto__;
    } else {
      return(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria-", null, "data-", null], null), null)).call(null, cljs.core.subs.call(null, attr, 0, 5));
    }
  }())) {
    return attr;
  } else {
    return om_tools.dom.camel_case.call(null, attr);
  }
};
om_tools.dom.opt_key_alias = function opt_key_alias(opt) {
  var G__14369 = opt;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "for", "for", 1014005819), G__14369)) {
    return new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__14369)) {
      return new cljs.core.Keyword(null, "className", "className", 1004015509);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return opt;
      } else {
        return null;
      }
    }
  }
};
om_tools.dom.format_opt_key = function format_opt_key(opt_key) {
  return cljs.core.keyword.call(null, om_tools.dom.opt_key_case.call(null, cljs.core.name.call(null, om_tools.dom.opt_key_alias.call(null, opt_key))));
};
om_tools.dom.format_opt_val = function format_opt_val(opt_val) {
  if (cljs.core.map_QMARK_.call(null, opt_val)) {
    return cljs.core.clj__GT_js.call(null, opt_val);
  } else {
    return opt_val;
  }
};
om_tools.dom.format_opts = function format_opts(opts) {
  return cljs.core.clj__GT_js.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__14372) {
    var vec__14373 = p__14372;
    var k = cljs.core.nth.call(null, vec__14373, 0, null);
    var v = cljs.core.nth.call(null, vec__14373, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_tools.dom.format_opt_key.call(null, k), om_tools.dom.format_opt_val.call(null, v)], null);
  }, opts)));
};
om_tools.dom.literal_QMARK_ = function literal_QMARK_(form) {
  return!(form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.possible_coll_QMARK_ = function possible_coll_QMARK_(form) {
  return cljs.core.coll_QMARK_.call(null, form) || (form instanceof cljs.core.Symbol || cljs.core.list_QMARK_.call(null, form));
};
om_tools.dom.form_tags = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "input", "input", -1540173437, null), new cljs.core.Symbol(null, "textarea", "textarea", 1651192051, null), new cljs.core.Symbol(null, "option", "option", 1644298798, null)], null);
om_tools.dom.el_ctor = function el_ctor(tag) {
  if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.partial.call(null, cljs.core._EQ_, tag), om_tools.dom.form_tags))) {
    return cljs.core.symbol.call(null, "om.dom", cljs.core.name.call(null, tag));
  } else {
    return cljs.core.symbol.call(null, "js", [cljs.core.str("React.DOM."), cljs.core.str(cljs.core.name.call(null, tag))].join(""));
  }
};
om_tools.dom.element_args = function element_args(opts, children) {
  if (opts == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, children], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, opts)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_tools.dom.format_opts.call(null, opts), children], null);
    } else {
      if (cljs.core.object_QMARK_.call(null, opts)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [opts, children], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.cons.call(null, opts, children)], null);
        } else {
          return null;
        }
      }
    }
  }
};
om_tools.dom.element = function element(ctor, opts, children) {
  var vec__14375 = om_tools.dom.element_args.call(null, opts, children);
  var opts__$1 = cljs.core.nth.call(null, vec__14375, 0, null);
  var children__$1 = cljs.core.nth.call(null, vec__14375, 1, null);
  return cljs.core.apply.call(null, ctor, cljs.core.flatten.call(null, cljs.core.cons.call(null, opts__$1, children__$1)));
};
om_tools.dom.class_set = function class_set(m) {
  var temp__4126__auto__ = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.map.call(null, cljs.core.name, cljs.core.keys.call(null, cljs.core.filter.call(null, cljs.core.val, m)))));
  if (temp__4126__auto__) {
    var ks = temp__4126__auto__;
    return clojure.string.join.call(null, " ", ks);
  } else {
    return null;
  }
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("schema.utils");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.string.format");
schema.utils.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3479__auto__ = m;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4196__auto__ = function iter__14805(s__14806) {
        return new cljs.core.LazySeq(null, function() {
          var s__14806__$1 = s__14806;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__14806__$1);
            if (temp__4126__auto__) {
              var s__14806__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__14806__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14806__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__14808 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__14807 = 0;
                  while (true) {
                    if (i__14807 < size__4195__auto__) {
                      var vec__14811 = cljs.core._nth.call(null, c__4194__auto__, i__14807);
                      var k = cljs.core.nth.call(null, vec__14811, 0, null);
                      var v = cljs.core.nth.call(null, vec__14811, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__14808, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__14813 = i__14807 + 1;
                        i__14807 = G__14813;
                        continue;
                      } else {
                        var G__14814 = i__14807 + 1;
                        i__14807 = G__14814;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14808), iter__14805.call(null, cljs.core.chunk_rest.call(null, s__14806__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14808), null);
                }
              } else {
                var vec__14812 = cljs.core.first.call(null, s__14806__$2);
                var k = cljs.core.nth.call(null, vec__14812, 0, null);
                var v = cljs.core.nth.call(null, vec__14812, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__14805.call(null, cljs.core.rest.call(null, s__14806__$2)));
                } else {
                  var G__14815 = cljs.core.rest.call(null, s__14806__$2);
                  s__14806__$1 = G__14815;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__14816) {
    var m = cljs.core.first(arglist__14816);
    var kvs = cljs.core.rest(arglist__14816);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
schema.utils.type_of = function type_of(x) {
  return typeof x;
};
schema.utils.fn_schema_bearer = function fn_schema_bearer(f) {
  return f;
};
schema.utils.format_STAR_ = function() {
  var format_STAR___delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var format_STAR_ = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format_STAR___delegate.call(this, fmt, args);
  };
  format_STAR_.cljs$lang$maxFixedArity = 1;
  format_STAR_.cljs$lang$applyTo = function(arglist__14817) {
    var fmt = cljs.core.first(arglist__14817);
    var args = cljs.core.rest(arglist__14817);
    return format_STAR___delegate(fmt, args);
  };
  format_STAR_.cljs$core$IFn$_invoke$arity$variadic = format_STAR___delegate;
  return format_STAR_;
}();
schema.utils.value_name = function value_name(value) {
  var t = schema.utils.type_of.call(null, value);
  if (cljs.core.count.call(null, [cljs.core.str(value)].join("")) < 20) {
    return value;
  } else {
    return cljs.core.symbol.call(null, [cljs.core.str("a-"), cljs.core.str(t)].join(""));
  }
};
schema.utils.ValidationError = function(schema, value, expectation_delay, fail_explanation) {
  this.schema = schema;
  this.value = value;
  this.expectation_delay = expectation_delay;
  this.fail_explanation = fail_explanation;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.ValidationError.cljs$lang$type = true;
schema.utils.ValidationError.cljs$lang$ctorStr = "schema.utils/ValidationError";
schema.utils.ValidationError.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/ValidationError");
};
schema.utils.ValidationError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.validation_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.validation_error_explain = function validation_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.deref.call(null, err.expectation_delay)), function() {
    var or__3479__auto__ = err.fail_explanation;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
    }
  }());
};
schema.utils.__GT_ValidationError = function __GT_ValidationError(schema__$1, value, expectation_delay, fail_explanation) {
  return new schema.utils.ValidationError(schema__$1, value, expectation_delay, fail_explanation);
};
schema.utils.NamedError = function(name, error) {
  this.name = name;
  this.error = error;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2147483648;
};
schema.utils.NamedError.cljs$lang$type = true;
schema.utils.NamedError.cljs$lang$ctorStr = "schema.utils/NamedError";
schema.utils.NamedError.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/NamedError");
};
schema.utils.NamedError.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._pr_writer.call(null, schema.utils.named_error_explain.call(null, this$__$1), writer, opts);
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.named_error_explain = function named_error_explain(err) {
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, err.name), err.error), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.utils.__GT_NamedError = function __GT_NamedError(name, error) {
  return new schema.utils.NamedError(name, error);
};
schema.utils.ErrorContainer = function(error, __meta, __extmap) {
  this.error = error;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.utils.ErrorContainer.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14819, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14819, new cljs.core.Keyword(null, "error", "error", 1110689146))) {
    return self__.error;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14819, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.utils.ErrorContainer{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.utils.ErrorContainer.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, self__.__meta, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.utils.ErrorContainer.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", 1110689146), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14818) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14821 = cljs.core.keyword_identical_QMARK_;
  var expr__14822 = k__4073__auto__;
  if (cljs.core.truth_(pred__14821.call(null, new cljs.core.Keyword(null, "error", "error", 1110689146), expr__14822))) {
    return new schema.utils.ErrorContainer(G__14818, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.utils.ErrorContainer(self__.error, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14818), null);
  }
};
schema.utils.ErrorContainer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146), self__.error], null)], null), self__.__extmap));
};
schema.utils.ErrorContainer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14818) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.utils.ErrorContainer(self__.error, G__14818, self__.__extmap, self__.__hash);
};
schema.utils.ErrorContainer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.utils.ErrorContainer.cljs$lang$type = true;
schema.utils.ErrorContainer.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.utils/ErrorContainer");
};
schema.utils.ErrorContainer.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.utils/ErrorContainer");
};
schema.utils.__GT_ErrorContainer = function __GT_ErrorContainer(error) {
  return new schema.utils.ErrorContainer(error);
};
schema.utils.map__GT_ErrorContainer = function map__GT_ErrorContainer(G__14820) {
  return new schema.utils.ErrorContainer((new cljs.core.Keyword(null, "error", "error", 1110689146)).cljs$core$IFn$_invoke$arity$1(G__14820), null, cljs.core.dissoc.call(null, G__14820, new cljs.core.Keyword(null, "error", "error", 1110689146)));
};
schema.utils.error = function error(x) {
  if (cljs.core.truth_(x)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "x", "x", -1640531407, null)))].join(""));
  }
  return schema.utils.__GT_ErrorContainer.call(null, x);
};
schema.utils.error_QMARK_ = function error_QMARK_(x) {
  return x instanceof schema.utils.ErrorContainer;
};
schema.utils.error_val = function error_val(x) {
  if (schema.utils.error_QMARK_.call(null, x)) {
    return x.error;
  } else {
    return null;
  }
};
schema.utils.wrap_error_name = function wrap_error_name(name, maybe_error) {
  var temp__4124__auto__ = schema.utils.error_val.call(null, maybe_error);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var e = temp__4124__auto__;
    return schema.utils.error.call(null, schema.utils.__GT_NamedError.call(null, name, e));
  } else {
    return maybe_error;
  }
};
schema.utils.result_builder = function result_builder(lift_to_error) {
  return function conjer(m, e) {
    var temp__4124__auto__ = schema.utils.error_val.call(null, e);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var err = temp__4124__auto__;
      return schema.utils.error.call(null, cljs.core.conj.call(null, function() {
        var or__3479__auto__ = schema.utils.error_val.call(null, m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return lift_to_error.call(null, m);
        }
      }(), err));
    } else {
      var temp__4124__auto____$1 = schema.utils.error_val.call(null, m);
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var merr = temp__4124__auto____$1;
        return schema.utils.error.call(null, cljs.core.conj.call(null, merr, null));
      } else {
        return cljs.core.conj.call(null, m, e);
      }
    }
  };
};
schema.utils.declare_class_schema_BANG_ = function declare_class_schema_BANG_(klass, schema__$1) {
  return klass["schema$utils$schema"] = schema__$1;
};
schema.utils.class_schema = function class_schema(klass) {
  return klass["schema$utils$schema"];
};
schema.utils.PSimpleCell = function() {
  var obj14825 = {};
  return obj14825;
}();
schema.utils.get_cell = function get_cell(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$utils$PSimpleCell$get_cell$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$get_cell$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.utils.get_cell[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.utils.get_cell["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.get_cell", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.utils.set_cell = function set_cell(this$, x) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$utils$PSimpleCell$set_cell$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$utils$PSimpleCell$set_cell$arity$2(this$, x);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.utils.set_cell[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.utils.set_cell["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PSimpleCell.set_cell", this$);
        }
      }
    }().call(null, this$, x);
  }
};
schema.utils.SimpleVCell = function(q) {
  this.q = q;
};
schema.utils.SimpleVCell.cljs$lang$type = true;
schema.utils.SimpleVCell.cljs$lang$ctorStr = "schema.utils/SimpleVCell";
schema.utils.SimpleVCell.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "schema.utils/SimpleVCell");
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$ = true;
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$get_cell$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q;
};
schema.utils.SimpleVCell.prototype.schema$utils$PSimpleCell$set_cell$arity$2 = function(this$, x) {
  var self__ = this;
  var this$__$1 = this;
  return self__.q = x;
};
schema.utils.__GT_SimpleVCell = function __GT_SimpleVCell(q) {
  return new schema.utils.SimpleVCell(q);
};
schema.utils.use_fn_validation = new schema.utils.SimpleVCell(false);
schema.utils.use_fn_validation.get_cell = cljs.core.partial.call(null, schema.utils.get_cell, schema.utils.use_fn_validation);
schema.utils.use_fn_validation.set_cell = cljs.core.partial.call(null, schema.utils.set_cell, schema.utils.use_fn_validation);
goog.provide("schema.core");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("clojure.string");
goog.require("clojure.string");
schema.core.Schema = function() {
  var obj14827 = {};
  return obj14827;
}();
schema.core.walker = function walker(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$core$Schema$walker$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$core$Schema$walker$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.core.walker[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.core.walker["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.walker", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.explain = function explain(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.schema$core$Schema$explain$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.schema$core$Schema$explain$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = schema.core.explain[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = schema.core.explain["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Schema.explain", this$);
        }
      }
    }().call(null, this$);
  }
};
schema.core.subschema_walker = function subschema_walker(s) {
  throw new Error([cljs.core.str("Walking is unsupported outside of start-walker; "), cljs.core.str("all composite schemas must eagerly bind subschema-walkers "), cljs.core.str("outside the returned walker.")].join(""));
};
schema.core.start_walker = function start_walker(sub_walker, schema__$1) {
  var subschema_walker14829 = schema.core.subschema_walker;
  try {
    schema.core.subschema_walker = sub_walker;
    return schema.core.subschema_walker.call(null, schema__$1);
  } finally {
    schema.core.subschema_walker = subschema_walker14829;
  }
};
schema.core.checker = function checker(schema__$1) {
  return cljs.core.comp.call(null, schema.utils.error_val, schema.core.start_walker.call(null, schema.core.walker, schema__$1));
};
schema.core.check = function check(schema__$1, x) {
  return schema.core.checker.call(null, schema__$1).call(null, x);
};
schema.core.validate = function validate(schema__$1, value) {
  var temp__4126__auto___14830 = schema.core.check.call(null, schema__$1, value);
  if (cljs.core.truth_(temp__4126__auto___14830)) {
    var error_14831 = temp__4126__auto___14830;
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Value does not match schema: %s", cljs.core.pr_str.call(null, error_14831)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1, new cljs.core.Keyword(null, "value", "value", 1125876963), value, new cljs.core.Keyword(null, "error", "error", 1110689146), error_14831], null));
  } else {
  }
  return value;
};
schema.core.Schema["function"] = true;
schema.core.walker["function"] = function(this$) {
  var class_walker = function() {
    var temp__4124__auto__ = schema.utils.class_schema.call(null, this$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var more_schema = temp__4124__auto__;
      return schema.core.subschema_walker.call(null, more_schema);
    } else {
      return cljs.core.identity;
    }
  }();
  return function(class_walker) {
    return function(x) {
      var or__3479__auto__ = x == null || cljs.core.not.call(null, function() {
        var or__3479__auto__ = this$ === x.constructor;
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          return x instanceof this$;
        }
      }()) ? schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(class_walker) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), this$), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(class_walker)), null)) : null;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return class_walker.call(null, x);
      }
    };
  }(class_walker);
};
schema.core.explain["function"] = function(this$) {
  var temp__4124__auto__ = schema.utils.class_schema.call(null, this$);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var more_schema = temp__4124__auto__;
    return schema.core.explain.call(null, more_schema);
  } else {
    return this$;
  }
};
schema.core.AnythingSchema = function(_, __meta, __extmap) {
  this._ = _;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.AnythingSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14833, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14833, new cljs.core.Keyword(null, "_", "_", 1013904337))) {
    return self__._;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14833, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.AnythingSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.AnythingSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.AnythingSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "_", "_", 1013904337), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.AnythingSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14832) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14835 = cljs.core.keyword_identical_QMARK_;
  var expr__14836 = k__4073__auto__;
  if (cljs.core.truth_(pred__14835.call(null, new cljs.core.Keyword(null, "_", "_", 1013904337), expr__14836))) {
    return new schema.core.AnythingSchema(G__14832, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.AnythingSchema(self__._, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14832), null);
  }
};
schema.core.AnythingSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "_", "_", 1013904337), self__._], null)], null), self__.__extmap));
};
schema.core.AnythingSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14832) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.AnythingSchema(self__._, G__14832, self__.__extmap, self__.__hash);
};
schema.core.AnythingSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.AnythingSchema.prototype.schema$core$Schema$ = true;
schema.core.AnythingSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.identity;
};
schema.core.AnythingSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.Symbol(null, "Any", "Any", -1640465531, null);
};
schema.core.AnythingSchema.cljs$lang$type = true;
schema.core.AnythingSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/AnythingSchema");
};
schema.core.AnythingSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/AnythingSchema");
};
schema.core.__GT_AnythingSchema = function __GT_AnythingSchema(_) {
  return new schema.core.AnythingSchema(_);
};
schema.core.map__GT_AnythingSchema = function map__GT_AnythingSchema(G__14834) {
  return new schema.core.AnythingSchema((new cljs.core.Keyword(null, "_", "_", 1013904337)).cljs$core$IFn$_invoke$arity$1(G__14834), null, cljs.core.dissoc.call(null, G__14834, new cljs.core.Keyword(null, "_", "_", 1013904337)));
};
schema.core.Any = new schema.core.AnythingSchema(null);
schema.core.EqSchema = function(v, __meta, __extmap) {
  this.v = v;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.EqSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14839, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14839, new cljs.core.Keyword(null, "v", "v", 1013904360))) {
    return self__.v;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14839, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.EqSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.EqSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.EqSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EqSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.EqSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EqSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.EqSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14838) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14841 = cljs.core.keyword_identical_QMARK_;
  var expr__14842 = k__4073__auto__;
  if (cljs.core.truth_(pred__14841.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__14842))) {
    return new schema.core.EqSchema(G__14838, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EqSchema(self__.v, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14838), null);
  }
};
schema.core.EqSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null)], null), self__.__extmap));
};
schema.core.EqSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14838) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.EqSchema(self__.v, G__14838, self__.__extmap, self__.__hash);
};
schema.core.EqSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.EqSchema.prototype.schema$core$Schema$ = true;
schema.core.EqSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core._EQ_.call(null, self__.v, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.v), new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EqSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.v), new cljs.core.Symbol(null, "eq", "eq", -1640528283, null));
};
schema.core.EqSchema.cljs$lang$type = true;
schema.core.EqSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EqSchema");
};
schema.core.EqSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/EqSchema");
};
schema.core.__GT_EqSchema = function __GT_EqSchema(v) {
  return new schema.core.EqSchema(v);
};
schema.core.map__GT_EqSchema = function map__GT_EqSchema(G__14840) {
  return new schema.core.EqSchema((new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__14840), null, cljs.core.dissoc.call(null, G__14840, new cljs.core.Keyword(null, "v", "v", 1013904360)));
};
schema.core.eq = function eq(v) {
  return new schema.core.EqSchema(v);
};
schema.core.EnumSchema = function(vs, __meta, __extmap) {
  this.vs = vs;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.EnumSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14845, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14845, new cljs.core.Keyword(null, "vs", "vs", 1013908015))) {
    return self__.vs;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14845, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.EnumSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.EnumSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.EnumSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.EnumSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.EnumSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.EnumSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14844) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14847 = cljs.core.keyword_identical_QMARK_;
  var expr__14848 = k__4073__auto__;
  if (cljs.core.truth_(pred__14847.call(null, new cljs.core.Keyword(null, "vs", "vs", 1013908015), expr__14848))) {
    return new schema.core.EnumSchema(G__14844, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.EnumSchema(self__.vs, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14844), null);
  }
};
schema.core.EnumSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "vs", "vs", 1013908015), self__.vs], null)], null), self__.__extmap));
};
schema.core.EnumSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14844) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.EnumSchema(self__.vs, G__14844, self__.__extmap, self__.__hash);
};
schema.core.EnumSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.EnumSchema.prototype.schema$core$Schema$ = true;
schema.core.EnumSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.contains_QMARK_.call(null, self__.vs, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.vs);
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.EnumSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "enum", "enum", -1637413190, null), self__.vs);
};
schema.core.EnumSchema.cljs$lang$type = true;
schema.core.EnumSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/EnumSchema");
};
schema.core.EnumSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/EnumSchema");
};
schema.core.__GT_EnumSchema = function __GT_EnumSchema(vs) {
  return new schema.core.EnumSchema(vs);
};
schema.core.map__GT_EnumSchema = function map__GT_EnumSchema(G__14846) {
  return new schema.core.EnumSchema((new cljs.core.Keyword(null, "vs", "vs", 1013908015)).cljs$core$IFn$_invoke$arity$1(G__14846), null, cljs.core.dissoc.call(null, G__14846, new cljs.core.Keyword(null, "vs", "vs", 1013908015)));
};
schema.core.enum$ = function() {
  var enum$__delegate = function(vs) {
    return new schema.core.EnumSchema(cljs.core.set.call(null, vs));
  };
  var enum$ = function(var_args) {
    var vs = null;
    if (arguments.length > 0) {
      vs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return enum$__delegate.call(this, vs);
  };
  enum$.cljs$lang$maxFixedArity = 0;
  enum$.cljs$lang$applyTo = function(arglist__14850) {
    var vs = cljs.core.seq(arglist__14850);
    return enum$__delegate(vs);
  };
  enum$.cljs$core$IFn$_invoke$arity$variadic = enum$__delegate;
  return enum$;
}();
schema.core.Predicate = function(p_QMARK_, pred_name, __meta, __extmap) {
  this.p_QMARK_ = p_QMARK_;
  this.pred_name = pred_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Predicate.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14852, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14852, new cljs.core.Keyword(null, "p?", "p?", 1013907777))) {
    return self__.p_QMARK_;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14852, new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689))) {
      return self__.pred_name;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k14852, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.Predicate.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Predicate{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Predicate.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Predicate.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Predicate.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Predicate.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Predicate.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14851) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14854 = cljs.core.keyword_identical_QMARK_;
  var expr__14855 = k__4073__auto__;
  if (cljs.core.truth_(pred__14854.call(null, new cljs.core.Keyword(null, "p?", "p?", 1013907777), expr__14855))) {
    return new schema.core.Predicate(G__14851, self__.pred_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14854.call(null, new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), expr__14855))) {
      return new schema.core.Predicate(self__.p_QMARK_, G__14851, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14851), null);
    }
  }
};
schema.core.Predicate.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p?", "p?", 1013907777), self__.p_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689), self__.pred_name], null)], null), self__.__extmap));
};
schema.core.Predicate.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14851) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Predicate(self__.p_QMARK_, self__.pred_name, G__14851, self__.__extmap, self__.__hash);
};
schema.core.Predicate.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Predicate.prototype.schema$core$Schema$ = true;
schema.core.Predicate.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      var temp__4124__auto__ = function() {
        try {
          if (cljs.core.truth_(self__.p_QMARK_.call(null, x))) {
            return null;
          } else {
            return new cljs.core.Symbol(null, "not", "not", -1640422260, null);
          }
        } catch (e14857) {
          if (e14857 instanceof Object) {
            var e = e14857;
            return new cljs.core.Symbol(null, "throws?", "throws?", 1316818251, null);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e14857;
            } else {
              return null;
            }
          }
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var reason = temp__4124__auto__;
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(reason, temp__4124__auto__, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), self__.pred_name);
          };
        }(reason, temp__4124__auto__, this$__$1)), reason));
      } else {
        return x;
      }
    };
  }(this$__$1);
};
schema.core.Predicate.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.integer_QMARK_)) {
    return new cljs.core.Symbol(null, "Int", "Int", -1640457848, null);
  } else {
    if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.keyword_QMARK_)) {
      return new cljs.core.Symbol(null, "Keyword", "Keyword", -790286462, null);
    } else {
      if (cljs.core._EQ_.call(null, self__.p_QMARK_, cljs.core.symbol_QMARK_)) {
        return new cljs.core.Symbol(null, "Symbol", "Symbol", 850778993, null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.pred_name), new cljs.core.Symbol(null, "pred", "pred", -1637082150, null));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.Predicate.cljs$lang$type = true;
schema.core.Predicate.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Predicate");
};
schema.core.Predicate.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Predicate");
};
schema.core.__GT_Predicate = function __GT_Predicate(p_QMARK_, pred_name) {
  return new schema.core.Predicate(p_QMARK_, pred_name);
};
schema.core.map__GT_Predicate = function map__GT_Predicate(G__14853) {
  return new schema.core.Predicate((new cljs.core.Keyword(null, "p?", "p?", 1013907777)).cljs$core$IFn$_invoke$arity$1(G__14853), (new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)).cljs$core$IFn$_invoke$arity$1(G__14853), null, cljs.core.dissoc.call(null, G__14853, new cljs.core.Keyword(null, "p?", "p?", 1013907777), new cljs.core.Keyword(null, "pred-name", "pred-name", 3905755689)));
};
schema.core.pred = function() {
  var pred = null;
  var pred__1 = function(p_QMARK_) {
    return pred.call(null, p_QMARK_, p_QMARK_);
  };
  var pred__2 = function(p_QMARK_, pred_name) {
    if (cljs.core.ifn_QMARK_.call(null, p_QMARK_)) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Not a function: %s", p_QMARK_));
    }
    return new schema.core.Predicate(p_QMARK_, pred_name);
  };
  pred = function(p_QMARK_, pred_name) {
    switch(arguments.length) {
      case 1:
        return pred__1.call(this, p_QMARK_);
      case 2:
        return pred__2.call(this, p_QMARK_, pred_name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pred.cljs$core$IFn$_invoke$arity$1 = pred__1;
  pred.cljs$core$IFn$_invoke$arity$2 = pred__2;
  return pred;
}();
schema.core.protocol_name = function protocol_name(protocol) {
  return(new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, protocol));
};
schema.core.Protocol = function(p, __meta, __extmap) {
  this.p = p;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Protocol.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14859, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14859, new cljs.core.Keyword(null, "p", "p", 1013904354))) {
    return self__.p;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14859, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Protocol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Protocol{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Protocol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Protocol(self__.p, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Protocol.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Protocol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Protocol.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "p", "p", 1013904354), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Protocol.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14858) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14861 = cljs.core.keyword_identical_QMARK_;
  var expr__14862 = k__4073__auto__;
  if (cljs.core.truth_(pred__14861.call(null, new cljs.core.Keyword(null, "p", "p", 1013904354), expr__14862))) {
    return new schema.core.Protocol(G__14858, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Protocol(self__.p, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14858), null);
  }
};
schema.core.Protocol.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 1013904354), self__.p], null)], null), self__.__extmap));
};
schema.core.Protocol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14858) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Protocol(self__.p, G__14858, self__.__extmap, self__.__hash);
};
schema.core.Protocol.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Protocol.prototype.schema$core$Schema$ = true;
schema.core.Protocol.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, this$__$1)).call(null, x))) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "satisfies?", "satisfies?", 396750295, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.Protocol.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.protocol_name.call(null, this$__$1)), new cljs.core.Symbol(null, "protocol", "protocol", 1665271889, null));
};
schema.core.Protocol.cljs$lang$type = true;
schema.core.Protocol.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Protocol");
};
schema.core.Protocol.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Protocol");
};
schema.core.__GT_Protocol = function __GT_Protocol(p) {
  return new schema.core.Protocol(p);
};
schema.core.map__GT_Protocol = function map__GT_Protocol(G__14860) {
  return new schema.core.Protocol((new cljs.core.Keyword(null, "p", "p", 1013904354)).cljs$core$IFn$_invoke$arity$1(G__14860), null, cljs.core.dissoc.call(null, G__14860, new cljs.core.Keyword(null, "p", "p", 1013904354)));
};
RegExp.prototype.schema$core$Schema$ = true;
RegExp.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (!(typeof x === "string")) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "string?", "string?", 772676615, null));
          };
        }(this$__$1)), null));
      } else {
        if (cljs.core.not.call(null, cljs.core.re_find.call(null, this$__$1, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), schema.core.explain.call(null, this$__$1)), new cljs.core.Symbol(null, "re-find", "re-find", -608081204, null));
            };
          }(this$__$1)), null));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return x;
          } else {
            return null;
          }
        }
      }
    };
  }(this$__$1);
};
RegExp.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.symbol.call(null, [cljs.core.str('#"'), cljs.core.str([cljs.core.str(this$__$1)].join("").slice(1, -1)), cljs.core.str('"')].join(""));
};
schema.core.Str = schema.core.pred.call(null, cljs.core.string_QMARK_);
schema.core.Bool = Boolean;
schema.core.Num = Number;
schema.core.Int = schema.core.pred.call(null, cljs.core.integer_QMARK_, new cljs.core.Symbol(null, "integer?", "integer?", -1070456710, null));
schema.core.Keyword = schema.core.pred.call(null, cljs.core.keyword_QMARK_, new cljs.core.Symbol(null, "keyword?", "keyword?", -1117382353, null));
schema.core.Symbol = schema.core.pred.call(null, cljs.core.symbol_QMARK_, new cljs.core.Symbol(null, "symbol?", "symbol?", 910997344, null));
schema.core.Regex = RegExp;
schema.core.Inst = Date;
schema.core.Uuid = cljs.core.UUID;
schema.core.Maybe = function(schema, __meta, __extmap) {
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Maybe.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14865, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14865, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14865, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Maybe.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Maybe{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Maybe.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Maybe.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Maybe.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Maybe.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Maybe.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14864) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14867 = cljs.core.keyword_identical_QMARK_;
  var expr__14868 = k__4073__auto__;
  if (cljs.core.truth_(pred__14867.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__14868))) {
    return new schema.core.Maybe(G__14864, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Maybe(self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14864), null);
  }
};
schema.core.Maybe.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Maybe.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14864) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Maybe(self__.schema, G__14864, self__.__extmap, self__.__hash);
};
schema.core.Maybe.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Maybe.prototype.schema$core$Schema$ = true;
schema.core.Maybe.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      if (x == null) {
        return null;
      } else {
        return sub_walker.call(null, x);
      }
    };
  }(sub_walker, this$__$1);
};
schema.core.Maybe.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "maybe", "maybe", -1536858591, null));
};
schema.core.Maybe.cljs$lang$type = true;
schema.core.Maybe.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Maybe");
};
schema.core.Maybe.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Maybe");
};
schema.core.__GT_Maybe = function __GT_Maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.map__GT_Maybe = function map__GT_Maybe(G__14866) {
  return new schema.core.Maybe((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__14866), null, cljs.core.dissoc.call(null, G__14866, new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.maybe = function maybe(schema__$1) {
  return new schema.core.Maybe(schema__$1);
};
schema.core.NamedSchema = function(schema, name, __meta, __extmap) {
  this.schema = schema;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.NamedSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14871, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14871, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14871, new cljs.core.Keyword(null, "name", "name", 1017277949))) {
      return self__.name;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k14871, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.NamedSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.NamedSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.NamedSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.NamedSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.NamedSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null, new cljs.core.Keyword(null, "name", "name", 1017277949), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.NamedSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14870) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14873 = cljs.core.keyword_identical_QMARK_;
  var expr__14874 = k__4073__auto__;
  if (cljs.core.truth_(pred__14873.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__14874))) {
    return new schema.core.NamedSchema(G__14870, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14873.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__14874))) {
      return new schema.core.NamedSchema(self__.schema, G__14870, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.NamedSchema(self__.schema, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14870), null);
    }
  }
};
schema.core.NamedSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.NamedSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14870) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.NamedSchema(self__.schema, self__.name, G__14870, self__.__extmap, self__.__hash);
};
schema.core.NamedSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.NamedSchema.prototype.schema$core$Schema$ = true;
schema.core.NamedSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walker = schema.core.subschema_walker.call(null, self__.schema);
  return function(sub_walker, this$__$1) {
    return function(x) {
      return schema.utils.wrap_error_name.call(null, self__.name, sub_walker.call(null, x));
    };
  }(sub_walker, this$__$1);
};
schema.core.NamedSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.name), schema.core.explain.call(null, self__.schema)), new cljs.core.Symbol(null, "named", "named", -1535946510, null));
};
schema.core.NamedSchema.cljs$lang$type = true;
schema.core.NamedSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/NamedSchema");
};
schema.core.NamedSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/NamedSchema");
};
schema.core.__GT_NamedSchema = function __GT_NamedSchema(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.map__GT_NamedSchema = function map__GT_NamedSchema(G__14872) {
  return new schema.core.NamedSchema((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__14872), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__14872), null, cljs.core.dissoc.call(null, G__14872, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.named = function named(schema__$1, name) {
  return new schema.core.NamedSchema(schema__$1, name);
};
schema.core.Either = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Either.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14877, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14877, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348))) {
    return self__.schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14877, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Either.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Either{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Either.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Either(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Either.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Either.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Either.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Either.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14876) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14879 = cljs.core.keyword_identical_QMARK_;
  var expr__14880 = k__4073__auto__;
  if (cljs.core.truth_(pred__14879.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__14880))) {
    return new schema.core.Either(G__14876, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Either(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14876), null);
  }
};
schema.core.Either.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Either.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14876) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Either(self__.schemas, G__14876, self__.__extmap, self__.__hash);
};
schema.core.Either.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Either.prototype.schema$core$Schema$ = true;
schema.core.Either.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      var sub_walkers__$1 = cljs.core.seq.call(null, sub_walkers);
      while (true) {
        if (cljs.core.not.call(null, sub_walkers__$1)) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walkers__$1, sub_walkers, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "schemas", "schemas", 276625579, null)), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "%", "%", -1640531490, null)), new cljs.core.Symbol(null, "check", "check", -1545904447, null))), new cljs.core.Symbol(null, "some", "some", 
              -1636995411, null));
            };
          }(sub_walkers__$1, sub_walkers, this$__$1)), null));
        } else {
          var res = cljs.core.first.call(null, sub_walkers__$1).call(null, x);
          if (!schema.utils.error_QMARK_.call(null, res)) {
            return res;
          } else {
            var G__14882 = cljs.core.next.call(null, sub_walkers__$1);
            sub_walkers__$1 = G__14882;
            continue;
          }
        }
        break;
      }
    };
  }(sub_walkers, this$__$1);
};
schema.core.Either.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "either", "either", 1351541374, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Either.cljs$lang$type = true;
schema.core.Either.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Either");
};
schema.core.Either.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Either");
};
schema.core.__GT_Either = function __GT_Either(schemas) {
  return new schema.core.Either(schemas);
};
schema.core.map__GT_Either = function map__GT_Either(G__14878) {
  return new schema.core.Either((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__14878), null, cljs.core.dissoc.call(null, G__14878, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.either = function() {
  var either__delegate = function(schemas) {
    return new schema.core.Either(schemas);
  };
  var either = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return either__delegate.call(this, schemas);
  };
  either.cljs$lang$maxFixedArity = 0;
  either.cljs$lang$applyTo = function(arglist__14883) {
    var schemas = cljs.core.seq(arglist__14883);
    return either__delegate(schemas);
  };
  either.cljs$core$IFn$_invoke$arity$variadic = either__delegate;
  return either;
}();
schema.core.Both = function(schemas, __meta, __extmap) {
  this.schemas = schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Both.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14885, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14885, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348))) {
    return self__.schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14885, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.Both.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Both{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Both.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Both(self__.schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Both.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Both.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Both.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Both.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14884) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14887 = cljs.core.keyword_identical_QMARK_;
  var expr__14888 = k__4073__auto__;
  if (cljs.core.truth_(pred__14887.call(null, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), expr__14888))) {
    return new schema.core.Both(G__14884, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.Both(self__.schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14884), null);
  }
};
schema.core.Both.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schemas", "schemas", 2931061348), self__.schemas], null)], null), self__.__extmap));
};
schema.core.Both.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14884) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Both(self__.schemas, G__14884, self__.__extmap, self__.__hash);
};
schema.core.Both.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Both.prototype.schema$core$Schema$ = true;
schema.core.Both.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sub_walkers = cljs.core.mapv.call(null, schema.core.subschema_walker, self__.schemas);
  return function(sub_walkers, this$__$1) {
    return function(x) {
      return cljs.core.reduce.call(null, function(sub_walkers, this$__$1) {
        return function(x__$1, sub_walker) {
          if (schema.utils.error_QMARK_.call(null, x__$1)) {
            return x__$1;
          } else {
            return sub_walker.call(null, x__$1);
          }
        };
      }(sub_walkers, this$__$1), x, sub_walkers);
    };
  }(sub_walkers, this$__$1);
};
schema.core.Both.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "both", "both", -1637501638, null), cljs.core.map.call(null, schema.core.explain, self__.schemas));
};
schema.core.Both.cljs$lang$type = true;
schema.core.Both.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Both");
};
schema.core.Both.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Both");
};
schema.core.__GT_Both = function __GT_Both(schemas) {
  return new schema.core.Both(schemas);
};
schema.core.map__GT_Both = function map__GT_Both(G__14886) {
  return new schema.core.Both((new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)).cljs$core$IFn$_invoke$arity$1(G__14886), null, cljs.core.dissoc.call(null, G__14886, new cljs.core.Keyword(null, "schemas", "schemas", 2931061348)));
};
schema.core.both = function() {
  var both__delegate = function(schemas) {
    return new schema.core.Both(schemas);
  };
  var both = function(var_args) {
    var schemas = null;
    if (arguments.length > 0) {
      schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return both__delegate.call(this, schemas);
  };
  both.cljs$lang$maxFixedArity = 0;
  both.cljs$lang$applyTo = function(arglist__14890) {
    var schemas = cljs.core.seq(arglist__14890);
    return both__delegate(schemas);
  };
  both.cljs$core$IFn$_invoke$arity$variadic = both__delegate;
  return both;
}();
schema.core.ConditionalSchema = function(preds_and_schemas, __meta, __extmap) {
  this.preds_and_schemas = preds_and_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.ConditionalSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14892, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14892, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275))) {
    return self__.preds_and_schemas;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14892, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.ConditionalSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.ConditionalSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.ConditionalSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14891) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14894 = cljs.core.keyword_identical_QMARK_;
  var expr__14895 = k__4073__auto__;
  if (cljs.core.truth_(pred__14894.call(null, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), expr__14895))) {
    return new schema.core.ConditionalSchema(G__14891, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.ConditionalSchema(self__.preds_and_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14891), null);
  }
};
schema.core.ConditionalSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275), self__.preds_and_schemas], null)], null), self__.__extmap));
};
schema.core.ConditionalSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14891) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.ConditionalSchema(self__.preds_and_schemas, G__14891, self__.__extmap, self__.__hash);
};
schema.core.ConditionalSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$ = true;
schema.core.ConditionalSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var preds_and_walkers = cljs.core.mapv.call(null, function(this$__$1) {
    return function(p__14897) {
      var vec__14898 = p__14897;
      var pred = cljs.core.nth.call(null, vec__14898, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__14898, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.subschema_walker.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas);
  return function(preds_and_walkers, this$__$1) {
    return function(x) {
      var temp__4124__auto__ = cljs.core.first.call(null, cljs.core.filter.call(null, function(preds_and_walkers, this$__$1) {
        return function(p__14899) {
          var vec__14900 = p__14899;
          var pred = cljs.core.nth.call(null, vec__14900, 0, null);
          return pred.call(null, x);
        };
      }(preds_and_walkers, this$__$1), preds_and_walkers));
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__14901 = temp__4124__auto__;
        var _ = cljs.core.nth.call(null, vec__14901, 0, null);
        var match = cljs.core.nth.call(null, vec__14901, 1, null);
        return match.call(null, x);
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(temp__4124__auto__, preds_and_walkers, this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "matches-some-condition?", "matches-some-condition?", 1290930716, null));
          };
        }(temp__4124__auto__, preds_and_walkers, this$__$1)), null));
      }
    };
  }(preds_and_walkers, this$__$1);
};
schema.core.ConditionalSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, new cljs.core.Symbol(null, "conditional", "conditional", -432400321, null), cljs.core.mapcat.call(null, function(this$__$1) {
    return function(p__14902) {
      var vec__14903 = p__14902;
      var pred = cljs.core.nth.call(null, vec__14903, 0, null);
      var schema__$1 = cljs.core.nth.call(null, vec__14903, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pred, schema.core.explain.call(null, schema__$1)], null);
    };
  }(this$__$1), self__.preds_and_schemas));
};
schema.core.ConditionalSchema.cljs$lang$type = true;
schema.core.ConditionalSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/ConditionalSchema");
};
schema.core.ConditionalSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/ConditionalSchema");
};
schema.core.__GT_ConditionalSchema = function __GT_ConditionalSchema(preds_and_schemas) {
  return new schema.core.ConditionalSchema(preds_and_schemas);
};
schema.core.map__GT_ConditionalSchema = function map__GT_ConditionalSchema(G__14893) {
  return new schema.core.ConditionalSchema((new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)).cljs$core$IFn$_invoke$arity$1(G__14893), null, cljs.core.dissoc.call(null, G__14893, new cljs.core.Keyword(null, "preds-and-schemas", "preds-and-schemas", 684368275)));
};
schema.core.conditional = function() {
  var conditional__delegate = function(preds_and_schemas) {
    if (cljs.core.seq.call(null, preds_and_schemas) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, preds_and_schemas))) {
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Expected even, nonzero number of args; got %s", cljs.core.count.call(null, preds_and_schemas)));
    }
    return new schema.core.ConditionalSchema(function() {
      var iter__4196__auto__ = function iter__14912(s__14913) {
        return new cljs.core.LazySeq(null, function() {
          var s__14913__$1 = s__14913;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__14913__$1);
            if (temp__4126__auto__) {
              var s__14913__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__14913__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14913__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__14915 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__14914 = 0;
                  while (true) {
                    if (i__14914 < size__4195__auto__) {
                      var vec__14918 = cljs.core._nth.call(null, c__4194__auto__, i__14914);
                      var pred = cljs.core.nth.call(null, vec__14918, 0, null);
                      var schema__$1 = cljs.core.nth.call(null, vec__14918, 1, null);
                      cljs.core.chunk_append.call(null, b__14915, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null));
                      var G__14920 = i__14914 + 1;
                      i__14914 = G__14920;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14915), iter__14912.call(null, cljs.core.chunk_rest.call(null, s__14913__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14915), null);
                }
              } else {
                var vec__14919 = cljs.core.first.call(null, s__14913__$2);
                var pred = cljs.core.nth.call(null, vec__14919, 0, null);
                var schema__$1 = cljs.core.nth.call(null, vec__14919, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, pred, new cljs.core.Keyword(null, "else", "else", 1017020587)) ? cljs.core.constantly.call(null, true) : pred, schema__$1], null), iter__14912.call(null, cljs.core.rest.call(null, s__14913__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, preds_and_schemas));
    }());
  };
  var conditional = function(var_args) {
    var preds_and_schemas = null;
    if (arguments.length > 0) {
      preds_and_schemas = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return conditional__delegate.call(this, preds_and_schemas);
  };
  conditional.cljs$lang$maxFixedArity = 0;
  conditional.cljs$lang$applyTo = function(arglist__14921) {
    var preds_and_schemas = cljs.core.seq(arglist__14921);
    return conditional__delegate(preds_and_schemas);
  };
  conditional.cljs$core$IFn$_invoke$arity$variadic = conditional__delegate;
  return conditional;
}();
schema.core.if$ = function if$(pred, if_schema, else_schema) {
  return schema.core.conditional.call(null, pred, if_schema, cljs.core.constantly.call(null, true), else_schema);
};
schema.core._PLUS_missing_PLUS_ = new cljs.core.Keyword("schema.core", "missing", "schema.core/missing", 1882142615);
schema.core.RequiredKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.RequiredKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14923, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14923, new cljs.core.Keyword(null, "k", "k", 1013904349))) {
    return self__.k;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14923, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.RequiredKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.RequiredKey{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.RequiredKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.RequiredKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.RequiredKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.RequiredKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14922) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14925 = cljs.core.keyword_identical_QMARK_;
  var expr__14926 = k__4073__auto__;
  if (cljs.core.truth_(pred__14925.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__14926))) {
    return new schema.core.RequiredKey(G__14922, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.RequiredKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14922), null);
  }
};
schema.core.RequiredKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.RequiredKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14922) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.RequiredKey(self__.k, G__14922, self__.__extmap, self__.__hash);
};
schema.core.RequiredKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.RequiredKey.cljs$lang$type = true;
schema.core.RequiredKey.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/RequiredKey");
};
schema.core.RequiredKey.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/RequiredKey");
};
schema.core.__GT_RequiredKey = function __GT_RequiredKey(k) {
  return new schema.core.RequiredKey(k);
};
schema.core.map__GT_RequiredKey = function map__GT_RequiredKey(G__14924) {
  return new schema.core.RequiredKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__14924), null, cljs.core.dissoc.call(null, G__14924, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.required_key = function required_key(k) {
  if (k instanceof cljs.core.Keyword) {
    return k;
  } else {
    return new schema.core.RequiredKey(k);
  }
};
schema.core.required_key_QMARK_ = function required_key_QMARK_(ks) {
  return ks instanceof cljs.core.Keyword || ks instanceof schema.core.RequiredKey;
};
schema.core.OptionalKey = function(k, __meta, __extmap) {
  this.k = k;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 1) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.OptionalKey.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14929, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14929, new cljs.core.Keyword(null, "k", "k", 1013904349))) {
    return self__.k;
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      return cljs.core.get.call(null, self__.__extmap, k14929, else__4068__auto__);
    } else {
      return null;
    }
  }
};
schema.core.OptionalKey.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.OptionalKey{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.OptionalKey.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.OptionalKey.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.OptionalKey.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "k", "k", 1013904349), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.OptionalKey.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14928) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14931 = cljs.core.keyword_identical_QMARK_;
  var expr__14932 = k__4073__auto__;
  if (cljs.core.truth_(pred__14931.call(null, new cljs.core.Keyword(null, "k", "k", 1013904349), expr__14932))) {
    return new schema.core.OptionalKey(G__14928, self__.__meta, self__.__extmap, null);
  } else {
    return new schema.core.OptionalKey(self__.k, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14928), null);
  }
};
schema.core.OptionalKey.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "k", "k", 1013904349), self__.k], null)], null), self__.__extmap));
};
schema.core.OptionalKey.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14928) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.OptionalKey(self__.k, G__14928, self__.__extmap, self__.__hash);
};
schema.core.OptionalKey.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.OptionalKey.cljs$lang$type = true;
schema.core.OptionalKey.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/OptionalKey");
};
schema.core.OptionalKey.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/OptionalKey");
};
schema.core.__GT_OptionalKey = function __GT_OptionalKey(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.map__GT_OptionalKey = function map__GT_OptionalKey(G__14930) {
  return new schema.core.OptionalKey((new cljs.core.Keyword(null, "k", "k", 1013904349)).cljs$core$IFn$_invoke$arity$1(G__14930), null, cljs.core.dissoc.call(null, G__14930, new cljs.core.Keyword(null, "k", "k", 1013904349)));
};
schema.core.optional_key = function optional_key(k) {
  return new schema.core.OptionalKey(k);
};
schema.core.optional_key_QMARK_ = function optional_key_QMARK_(ks) {
  return ks instanceof schema.core.OptionalKey;
};
schema.core.explicit_schema_key = function explicit_schema_key(ks) {
  if (ks instanceof cljs.core.Keyword) {
    return ks;
  } else {
    if (ks instanceof schema.core.RequiredKey) {
      return ks.k;
    } else {
      if (schema.core.optional_key_QMARK_.call(null, ks)) {
        return ks.k;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error(schema.utils.format_STAR_.call(null, "Bad explicit key: %s", ks));
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.specific_key_QMARK_ = function specific_key_QMARK_(ks) {
  return schema.core.required_key_QMARK_.call(null, ks) || schema.core.optional_key_QMARK_.call(null, ks);
};
schema.core.explain_kspec = function explain_kspec(kspec) {
  if (schema.core.specific_key_QMARK_.call(null, kspec)) {
    if (kspec instanceof cljs.core.Keyword) {
      return kspec;
    } else {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explicit_schema_key.call(null, kspec)), schema.core.required_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "required-key", "required-key", 1024577770, null) : schema.core.optional_key_QMARK_.call(null, kspec) ? new cljs.core.Symbol(null, "optional-key", "optional-key", 180561963, null) : null);
    }
  } else {
    return schema.core.explain.call(null, kspec);
  }
};
schema.core.MapEntry = function(kspec, val_schema, __meta, __extmap) {
  this.kspec = kspec;
  this.val_schema = val_schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14935, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14935, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816))) {
    return self__.kspec;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14935, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239))) {
      return self__.val_schema;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k14935, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.MapEntry.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.MapEntry{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.MapEntry.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.MapEntry.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), null, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14934) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14937 = cljs.core.keyword_identical_QMARK_;
  var expr__14938 = k__4073__auto__;
  if (cljs.core.truth_(pred__14937.call(null, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), expr__14938))) {
    return new schema.core.MapEntry(G__14934, self__.val_schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14937.call(null, new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), expr__14938))) {
      return new schema.core.MapEntry(self__.kspec, G__14934, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.MapEntry(self__.kspec, self__.val_schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14934), null);
    }
  }
};
schema.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), self__.kspec], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239), self__.val_schema], null)], null), self__.__extmap));
};
schema.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14934) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.MapEntry(self__.kspec, self__.val_schema, G__14934, self__.__extmap, self__.__hash);
};
schema.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$ = true;
schema.core.MapEntry.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var val_walker = schema.core.subschema_walker.call(null, self__.val_schema);
  if (schema.core.specific_key_QMARK_.call(null, self__.kspec)) {
    var optional_QMARK_ = schema.core.optional_key_QMARK_.call(null, self__.kspec);
    var k = schema.core.explicit_schema_key.call(null, self__.kspec);
    return function(optional_QMARK_, k, val_walker, this$__$1) {
      return function(x) {
        if (schema.core._PLUS_missing_PLUS_ === x) {
          if (optional_QMARK_) {
            return null;
          } else {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null)], null));
          }
        } else {
          if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
            return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(optional_QMARK_, k, val_walker, this$__$1) {
              return function() {
                return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
              };
            }(optional_QMARK_, k, val_walker, this$__$1)), null));
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              var vec__14940 = x;
              var xk = cljs.core.nth.call(null, vec__14940, 0, null);
              var xv = cljs.core.nth.call(null, vec__14940, 1, null);
              if (cljs.core._EQ_.call(null, xk, k)) {
              } else {
                throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "xk", "xk", -1640527700, null), new cljs.core.Symbol(null, "k", "k", -1640531420, null))))].join(""));
              }
              var vres = val_walker.call(null, xv);
              var temp__4124__auto__ = schema.utils.error_val.call(null, vres);
              if (cljs.core.truth_(temp__4124__auto__)) {
                var ve = temp__4124__auto__;
                return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, ve], null));
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xk, vres], null);
              }
            } else {
              return null;
            }
          }
        }
      };
    }(optional_QMARK_, k, val_walker, this$__$1);
  } else {
    var key_walker = schema.core.subschema_walker.call(null, self__.kspec);
    return function(key_walker, val_walker, this$__$1) {
      return function(x) {
        if (!cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, x))) {
          return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(key_walker, val_walker, this$__$1) {
            return function() {
              return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "count", "count", -1545680184, null))), 2), cljs.core._EQ_);
            };
          }(key_walker, val_walker, this$__$1)), null));
        } else {
          var out_k = key_walker.call(null, cljs.core.key.call(null, x));
          var out_ke = schema.utils.error_val.call(null, out_k);
          var out_v = val_walker.call(null, cljs.core.val.call(null, x));
          var out_ve = schema.utils.error_val.call(null, out_v);
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = out_ke;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return out_ve;
            }
          }())) {
            return schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
              var or__3479__auto__ = out_ke;
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return cljs.core.key.call(null, x);
              }
            }(), function() {
              var or__3479__auto__ = out_ve;
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return new cljs.core.Symbol(null, "invalid-key", "invalid-key", 1700113218, null);
              }
            }()], null));
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out_k, out_v], null);
          }
        }
      };
    }(key_walker, val_walker, this$__$1);
  }
};
schema.core.MapEntry.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.val_schema)), schema.core.explain_kspec.call(null, self__.kspec)), new cljs.core.Symbol(null, "map-entry", "map-entry", -1829517702, null));
};
schema.core.MapEntry.cljs$lang$type = true;
schema.core.MapEntry.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/MapEntry");
};
schema.core.MapEntry.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/MapEntry");
};
schema.core.__GT_MapEntry = function __GT_MapEntry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.map__GT_MapEntry = function map__GT_MapEntry(G__14936) {
  return new schema.core.MapEntry((new cljs.core.Keyword(null, "kspec", "kspec", 1116257816)).cljs$core$IFn$_invoke$arity$1(G__14936), (new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)).cljs$core$IFn$_invoke$arity$1(G__14936), null, cljs.core.dissoc.call(null, G__14936, new cljs.core.Keyword(null, "kspec", "kspec", 1116257816), new cljs.core.Keyword(null, "val-schema", "val-schema", 3985618239)));
};
schema.core.map_entry = function map_entry(kspec, val_schema) {
  return new schema.core.MapEntry(kspec, val_schema);
};
schema.core.find_extra_keys_schema = function find_extra_keys_schema(map_schema) {
  var key_schemata = cljs.core.remove.call(null, schema.core.specific_key_QMARK_, cljs.core.keys.call(null, map_schema));
  if (cljs.core.count.call(null, key_schemata) < 2) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "More than one non-optional/required key schemata: %s", cljs.core.vec.call(null, key_schemata)));
  }
  return cljs.core.first.call(null, key_schemata);
};
schema.core.map_walker = function map_walker(map_schema) {
  var extra_keys_schema = schema.core.find_extra_keys_schema.call(null, map_schema);
  var extra_walker = cljs.core.truth_(extra_keys_schema) ? schema.core.subschema_walker.call(null, cljs.core.apply.call(null, schema.core.map_entry, cljs.core.find.call(null, map_schema, extra_keys_schema))) : null;
  var explicit_schema = cljs.core.dissoc.call(null, map_schema, extra_keys_schema);
  var explicit_walkers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4196__auto__ = function(extra_keys_schema, extra_walker, explicit_schema) {
      return function iter__14953(s__14954) {
        return new cljs.core.LazySeq(null, function(extra_keys_schema, extra_walker, explicit_schema) {
          return function() {
            var s__14954__$1 = s__14954;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__14954__$1);
              if (temp__4126__auto__) {
                var s__14954__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__14954__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14954__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__14956 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__14955 = 0;
                    while (true) {
                      if (i__14955 < size__4195__auto__) {
                        var vec__14959 = cljs.core._nth.call(null, c__4194__auto__, i__14955);
                        var k = cljs.core.nth.call(null, vec__14959, 0, null);
                        var v = cljs.core.nth.call(null, vec__14959, 1, null);
                        cljs.core.chunk_append.call(null, b__14956, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null));
                        var G__14964 = i__14955 + 1;
                        i__14955 = G__14964;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14956), iter__14953.call(null, cljs.core.chunk_rest.call(null, s__14954__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14956), null);
                  }
                } else {
                  var vec__14960 = cljs.core.first.call(null, s__14954__$2);
                  var k = cljs.core.nth.call(null, vec__14960, 0, null);
                  var v = cljs.core.nth.call(null, vec__14960, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.subschema_walker.call(null, schema.core.map_entry.call(null, k, v))], null), iter__14953.call(null, cljs.core.rest.call(null, s__14954__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(extra_keys_schema, extra_walker, explicit_schema), null, null);
      };
    }(extra_keys_schema, extra_walker, explicit_schema);
    return iter__4196__auto__.call(null, explicit_schema);
  }());
  var err_conj = schema.utils.result_builder.call(null, cljs.core.constantly.call(null, cljs.core.PersistentArrayMap.EMPTY));
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, explicit_schema), cljs.core.count.call(null, explicit_walkers))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Schema has multiple variants of the same explicit key: %s", cljs.core.mapv.call(null, schema.core.explain_kspec, cljs.core.apply.call(null, cljs.core.concat, cljs.core.filter.call(null, function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
      return function(p1__14941_SHARP_) {
        return cljs.core.count.call(null, p1__14941_SHARP_) > 1;
      };
    }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), cljs.core.vals.call(null, cljs.core.group_by.call(null, schema.core.explicit_schema_key, cljs.core.keys.call(null, explicit_schema))))))));
  }
  return function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
    return function(x) {
      if (!cljs.core.map_QMARK_.call(null, x)) {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, map_schema, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
          };
        }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj)), null));
      } else {
        var x__$1 = x;
        var explicit_walkers__$1 = cljs.core.seq.call(null, explicit_walkers);
        var out = cljs.core.PersistentArrayMap.EMPTY;
        while (true) {
          if (cljs.core.not.call(null, explicit_walkers__$1)) {
            return cljs.core.reduce.call(null, cljs.core.truth_(extra_walker) ? function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, e) {
                return err_conj.call(null, out__$1, extra_walker.call(null, e));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) : function(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj) {
              return function(out__$1, p__14961) {
                var vec__14962 = p__14961;
                var k = cljs.core.nth.call(null, vec__14962, 0, null);
                var _ = cljs.core.nth.call(null, vec__14962, 1, null);
                return err_conj.call(null, out__$1, schema.utils.error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.Symbol(null, "disallowed-key", "disallowed-key", 2071998757, null)], null)));
              };
            }(x__$1, explicit_walkers__$1, out, extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj), out, x__$1);
          } else {
            var vec__14963 = cljs.core.first.call(null, explicit_walkers__$1);
            var wk = cljs.core.nth.call(null, vec__14963, 0, null);
            var wv = cljs.core.nth.call(null, vec__14963, 1, null);
            var G__14965 = cljs.core.dissoc.call(null, x__$1, wk);
            var G__14966 = cljs.core.next.call(null, explicit_walkers__$1);
            var G__14967 = err_conj.call(null, out, wv.call(null, function() {
              var or__3479__auto__ = cljs.core.find.call(null, x__$1, wk);
              if (cljs.core.truth_(or__3479__auto__)) {
                return or__3479__auto__;
              } else {
                return schema.core._PLUS_missing_PLUS_;
              }
            }()));
            x__$1 = G__14965;
            explicit_walkers__$1 = G__14966;
            out = G__14967;
            continue;
          }
          break;
        }
      }
    };
  }(extra_keys_schema, extra_walker, explicit_schema, explicit_walkers, err_conj);
};
schema.core.map_explain = function map_explain(this$) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4196__auto__ = function iter__14976(s__14977) {
      return new cljs.core.LazySeq(null, function() {
        var s__14977__$1 = s__14977;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__14977__$1);
          if (temp__4126__auto__) {
            var s__14977__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__14977__$2)) {
              var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14977__$2);
              var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
              var b__14979 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
              if (function() {
                var i__14978 = 0;
                while (true) {
                  if (i__14978 < size__4195__auto__) {
                    var vec__14982 = cljs.core._nth.call(null, c__4194__auto__, i__14978);
                    var k = cljs.core.nth.call(null, vec__14982, 0, null);
                    var v = cljs.core.nth.call(null, vec__14982, 1, null);
                    cljs.core.chunk_append.call(null, b__14979, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))));
                    var G__14984 = i__14978 + 1;
                    i__14978 = G__14984;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14979), iter__14976.call(null, cljs.core.chunk_rest.call(null, s__14977__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14979), null);
              }
            } else {
              var vec__14983 = cljs.core.first.call(null, s__14977__$2);
              var k = cljs.core.nth.call(null, vec__14983, 0, null);
              var v = cljs.core.nth.call(null, vec__14983, 1, null);
              return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.next.call(null, schema.core.explain.call(null, schema.core.map_entry.call(null, k, v)))), iter__14976.call(null, cljs.core.rest.call(null, s__14977__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4196__auto__.call(null, this$);
  }());
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentHashMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$ = true;
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_walker.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return schema.core.map_explain.call(null, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$ = true;
cljs.core.PersistentHashSet.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, this$__$1), 1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Set schema must have exactly one element"));
  }
  var sub_walker = schema.core.subschema_walker.call(null, cljs.core.first.call(null, this$__$1));
  return function(sub_walker, this$__$1) {
    return function(x) {
      var or__3479__auto__ = cljs.core.set_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(sub_walker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "set?", "set?", -1637004842, null));
        };
      }(sub_walker, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var vec__14985 = cljs.core.juxt.call(null, cljs.core.remove, cljs.core.keep).call(null, schema.utils.error_val, cljs.core.map.call(null, sub_walker, x));
        var good = cljs.core.nth.call(null, vec__14985, 0, null);
        var bad = cljs.core.nth.call(null, vec__14985, 1, null);
        if (cljs.core.seq.call(null, bad)) {
          return schema.utils.error.call(null, cljs.core.set.call(null, bad));
        } else {
          return cljs.core.set.call(null, good);
        }
      }
    };
  }(sub_walker, this$__$1);
};
cljs.core.PersistentHashSet.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.set.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, cljs.core.first.call(null, this$__$1))], null));
};
schema.core.One = function(schema, optional_QMARK_, name, __meta, __extmap) {
  this.schema = schema;
  this.optional_QMARK_ = optional_QMARK_;
  this.name = name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.One.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k14987, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k14987, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k14987, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881))) {
      return self__.optional_QMARK_;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k14987, new cljs.core.Keyword(null, "name", "name", 1017277949))) {
        return self__.name;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get.call(null, self__.__extmap, k14987, else__4068__auto__);
        } else {
          return null;
        }
      }
    }
  }
};
schema.core.One.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.One{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.One.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.One.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.One.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.One.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null, new cljs.core.Keyword(null, "name", "name", 1017277949), null, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.One.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__14986) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__14989 = cljs.core.keyword_identical_QMARK_;
  var expr__14990 = k__4073__auto__;
  if (cljs.core.truth_(pred__14989.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__14990))) {
    return new schema.core.One(G__14986, self__.optional_QMARK_, self__.name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14989.call(null, new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), expr__14990))) {
      return new schema.core.One(self__.schema, G__14986, self__.name, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14989.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), expr__14990))) {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, G__14986, self__.__meta, self__.__extmap, null);
      } else {
        return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__14986), null);
      }
    }
  }
};
schema.core.One.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), self__.optional_QMARK_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1017277949), self__.name], null)], null), self__.__extmap));
};
schema.core.One.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__14986) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.One(self__.schema, self__.optional_QMARK_, self__.name, G__14986, self__.__extmap, self__.__hash);
};
schema.core.One.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.One.cljs$lang$type = true;
schema.core.One.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/One");
};
schema.core.One.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/One");
};
schema.core.__GT_One = function __GT_One(schema__$1, optional_QMARK_, name) {
  return new schema.core.One(schema__$1, optional_QMARK_, name);
};
schema.core.map__GT_One = function map__GT_One(G__14988) {
  return new schema.core.One((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__14988), (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(G__14988), (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(G__14988), null, cljs.core.dissoc.call(null, G__14988, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "optional?", "optional?", 2859340881), 
  new cljs.core.Keyword(null, "name", "name", 1017277949)));
};
schema.core.one = function one(schema__$1, name) {
  return new schema.core.One(schema__$1, false, name);
};
schema.core.optional = function optional(schema__$1, name) {
  return new schema.core.One(schema__$1, true, name);
};
schema.core.parse_sequence_schema = function parse_sequence_schema(s) {
  var vec__14997 = cljs.core.split_with.call(null, function(p1__14992_SHARP_) {
    return p1__14992_SHARP_ instanceof schema.core.One && cljs.core.not.call(null, (new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__14992_SHARP_));
  }, s);
  var required = cljs.core.nth.call(null, vec__14997, 0, null);
  var more = cljs.core.nth.call(null, vec__14997, 1, null);
  var vec__14998 = cljs.core.split_with.call(null, function(vec__14997, required, more) {
    return function(p1__14993_SHARP_) {
      var and__3467__auto__ = p1__14993_SHARP_ instanceof schema.core.One;
      if (and__3467__auto__) {
        return(new cljs.core.Keyword(null, "optional?", "optional?", 2859340881)).cljs$core$IFn$_invoke$arity$1(p1__14993_SHARP_);
      } else {
        return and__3467__auto__;
      }
    };
  }(vec__14997, required, more), more);
  var optional = cljs.core.nth.call(null, vec__14998, 0, null);
  var more__$1 = cljs.core.nth.call(null, vec__14998, 1, null);
  if (cljs.core.count.call(null, more__$1) <= 1 && cljs.core.every_QMARK_.call(null, function(vec__14997, required, more, vec__14998, optional, more__$1) {
    return function(p1__14994_SHARP_) {
      return!(p1__14994_SHARP_ instanceof schema.core.One);
    };
  }(vec__14997, required, more, vec__14998, optional, more__$1), more__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Sequence schema %s does not match [one* optional* rest-schema?]", s));
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, required, optional), cljs.core.first.call(null, more__$1)], null);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$ = true;
cljs.core.PersistentVector.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__14999 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__14999, 0, null);
  var multi = cljs.core.nth.call(null, vec__14999, 1, null);
  var single_walkers = cljs.core.vec.call(null, function() {
    var iter__4196__auto__ = function(vec__14999, singles, multi, this$__$1) {
      return function iter__15000(s__15001) {
        return new cljs.core.LazySeq(null, function(vec__14999, singles, multi, this$__$1) {
          return function() {
            var s__15001__$1 = s__15001;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__15001__$1);
              if (temp__4126__auto__) {
                var s__15001__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15001__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__15001__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__15003 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__15002 = 0;
                    while (true) {
                      if (i__15002 < size__4195__auto__) {
                        var s = cljs.core._nth.call(null, c__4194__auto__, i__15002);
                        cljs.core.chunk_append.call(null, b__15003, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null));
                        var G__15018 = i__15002 + 1;
                        i__15002 = G__15018;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15003), iter__15000.call(null, cljs.core.chunk_rest.call(null, s__15001__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15003), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__15001__$2);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, schema.core.subschema_walker.call(null, s.schema)], null), iter__15000.call(null, cljs.core.rest.call(null, s__15001__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__14999, singles, multi, this$__$1), null, null);
      };
    }(vec__14999, singles, multi, this$__$1);
    return iter__4196__auto__.call(null, singles);
  }());
  var multi_walker = cljs.core.truth_(multi) ? schema.core.subschema_walker.call(null, multi) : null;
  var err_conj = schema.utils.result_builder.call(null, function(vec__14999, singles, multi, single_walkers, multi_walker, this$__$1) {
    return function(m) {
      return cljs.core.vec.call(null, cljs.core.repeat.call(null, cljs.core.count.call(null, m), null));
    };
  }(vec__14999, singles, multi, single_walkers, multi_walker, this$__$1));
  return function(vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
    return function(x) {
      var or__3479__auto__ = x == null || cljs.core.sequential_QMARK_.call(null, x) ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "sequential?", "sequential?", 1865038041, null));
        };
      }(vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var single_walkers__$1 = single_walkers;
        var x__$1 = x;
        var out = cljs.core.PersistentVector.EMPTY;
        while (true) {
          var temp__4124__auto__ = cljs.core.first.call(null, single_walkers__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var vec__15004 = temp__4124__auto__;
            var first_single = cljs.core.nth.call(null, vec__15004, 0, null);
            var single_walker = cljs.core.nth.call(null, vec__15004, 1, null);
            if (cljs.core.empty_QMARK_.call(null, x__$1)) {
              if (cljs.core.truth_(first_single.optional_QMARK_)) {
                return out;
              } else {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first, single_walkers__$1)), null, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, vec__15004, first_single, 
                single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                  return function() {
                    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "present?", "present?", 1377769629, null), function() {
                      var iter__4196__auto__ = function(single_walkers__$1, x__$1, out, vec__15004, first_single, single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                        return function iter__15005(s__15006) {
                          return new cljs.core.LazySeq(null, function(single_walkers__$1, x__$1, out, vec__15004, first_single, single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1) {
                            return function() {
                              var s__15006__$1 = s__15006;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq.call(null, s__15006__$1);
                                if (temp__4126__auto__) {
                                  var s__15006__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15006__$2)) {
                                    var c__4194__auto__ = cljs.core.chunk_first.call(null, s__15006__$2);
                                    var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                    var b__15008 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                    if (function() {
                                      var i__15007 = 0;
                                      while (true) {
                                        if (i__15007 < size__4195__auto__) {
                                          var vec__15011 = cljs.core._nth.call(null, c__4194__auto__, i__15007);
                                          var single = cljs.core.nth.call(null, vec__15011, 0, null);
                                          if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                            cljs.core.chunk_append.call(null, b__15008, single.name);
                                            var G__15019 = i__15007 + 1;
                                            i__15007 = G__15019;
                                            continue;
                                          } else {
                                            return null;
                                          }
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15008), iter__15005.call(null, cljs.core.chunk_rest.call(null, s__15006__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15008), null);
                                    }
                                  } else {
                                    var vec__15012 = cljs.core.first.call(null, s__15006__$2);
                                    var single = cljs.core.nth.call(null, vec__15012, 0, null);
                                    if (cljs.core.not.call(null, single.optional_QMARK_)) {
                                      return cljs.core.cons.call(null, single.name, iter__15005.call(null, cljs.core.rest.call(null, s__15006__$2)));
                                    } else {
                                      return null;
                                    }
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(single_walkers__$1, x__$1, out, vec__15004, first_single, single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1), null, null);
                        };
                      }(single_walkers__$1, x__$1, out, vec__15004, first_single, single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
                      return iter__4196__auto__.call(null, single_walkers__$1);
                    }());
                  };
                }(single_walkers__$1, x__$1, out, vec__15004, first_single, single_walker, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              }
            } else {
              var G__15020 = cljs.core.next.call(null, single_walkers__$1);
              var G__15021 = cljs.core.rest.call(null, x__$1);
              var G__15022 = err_conj.call(null, out, schema.utils.wrap_error_name.call(null, first_single.name, single_walker.call(null, cljs.core.first.call(null, x__$1))));
              single_walkers__$1 = G__15020;
              x__$1 = G__15021;
              out = G__15022;
              continue;
            }
          } else {
            if (cljs.core.truth_(multi)) {
              return cljs.core.reduce.call(null, err_conj, out, cljs.core.map.call(null, multi_walker, x__$1));
            } else {
              if (cljs.core.seq.call(null, x__$1)) {
                return err_conj.call(null, out, schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, null, x__$1, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(single_walkers__$1, x__$1, out, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, 
                this$__$1) {
                  return function() {
                    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.count.call(null, x__$1)), new cljs.core.Symbol(null, "has-extra-elts?", "has-extra-elts?", 1127383714, null));
                  };
                }(single_walkers__$1, x__$1, out, temp__4124__auto__, or__3479__auto__, vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1)), null)));
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return out;
                } else {
                  return null;
                }
              }
            }
          }
          break;
        }
      }
    };
  }(vec__14999, singles, multi, single_walkers, multi_walker, err_conj, this$__$1);
};
cljs.core.PersistentVector.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var this$__$1 = this;
  var vec__15013 = schema.core.parse_sequence_schema.call(null, this$__$1);
  var singles = cljs.core.nth.call(null, vec__15013, 0, null);
  var multi = cljs.core.nth.call(null, vec__15013, 1, null);
  return cljs.core.vec.call(null, cljs.core.concat.call(null, function() {
    var iter__4196__auto__ = function(vec__15013, singles, multi, this$__$1) {
      return function iter__15014(s__15015) {
        return new cljs.core.LazySeq(null, function(vec__15013, singles, multi, this$__$1) {
          return function() {
            var s__15015__$1 = s__15015;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__15015__$1);
              if (temp__4126__auto__) {
                var s__15015__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15015__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__15015__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__15017 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__15016 = 0;
                    while (true) {
                      if (i__15016 < size__4195__auto__) {
                        var s = cljs.core._nth.call(null, c__4194__auto__, i__15016);
                        cljs.core.chunk_append.call(null, b__15017, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : 
                        new cljs.core.Symbol(null, "one", "one", -1640421345, null)));
                        var G__15023 = i__15016 + 1;
                        i__15016 = G__15023;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15017), iter__15014.call(null, cljs.core.chunk_rest.call(null, s__15015__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15017), null);
                  }
                } else {
                  var s = cljs.core.first.call(null, s__15015__$2);
                  return cljs.core.cons.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(s)), schema.core.explain.call(null, (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(s))), cljs.core.truth_(s.optional_QMARK_) ? new cljs.core.Symbol(null, "optional", "optional", -1719548647, null) : new cljs.core.Symbol(null, 
                  "one", "one", -1640421345, null)), iter__15014.call(null, cljs.core.rest.call(null, s__15015__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__15013, singles, multi, this$__$1), null, null);
      };
    }(vec__15013, singles, multi, this$__$1);
    return iter__4196__auto__.call(null, singles);
  }(), cljs.core.truth_(multi) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explain.call(null, multi)], null) : null));
};
schema.core.pair = function pair(first_schema, first_name, second_schema, second_name) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, first_schema, first_name), schema.core.one.call(null, second_schema, second_name)], null);
};
schema.core.Record = function(klass, schema, __meta, __extmap) {
  this.klass = klass;
  this.schema = schema;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.Record.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k15025, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k15025, new cljs.core.Keyword(null, "klass", "klass", 1116035314))) {
    return self__.klass;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k15025, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
      return self__.schema;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k15025, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.Record.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.Record{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.Record.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.Record.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.Record.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.Record.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), null, new cljs.core.Keyword(null, "klass", "klass", 1116035314), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.Record.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__15024) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__15027 = cljs.core.keyword_identical_QMARK_;
  var expr__15028 = k__4073__auto__;
  if (cljs.core.truth_(pred__15027.call(null, new cljs.core.Keyword(null, "klass", "klass", 1116035314), expr__15028))) {
    return new schema.core.Record(G__15024, self__.schema, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15027.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__15028))) {
      return new schema.core.Record(self__.klass, G__15024, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.Record(self__.klass, self__.schema, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__15024), null);
    }
  }
};
schema.core.Record.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "klass", "klass", 1116035314), self__.klass], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null)], null), self__.__extmap));
};
schema.core.Record.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__15024) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.Record(self__.klass, self__.schema, G__15024, self__.__extmap, self__.__hash);
};
schema.core.Record.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.Record.prototype.schema$core$Schema$ = true;
schema.core.Record.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var map_checker = schema.core.subschema_walker.call(null, self__.schema);
  var pred_checker = function() {
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "extra-validator-fn", "extra-validator-fn", 2525540146)).cljs$core$IFn$_invoke$arity$1(this$__$1);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var evf = temp__4126__auto__;
      return schema.core.subschema_walker.call(null, schema.core.pred.call(null, evf));
    } else {
      return null;
    }
  }();
  return function(map_checker, pred_checker, this$__$1) {
    return function(r) {
      var or__3479__auto__ = r instanceof self__.klass ? null : schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, r, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(map_checker, pred_checker, this$__$1) {
        return function() {
          return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, r)), self__.klass), new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null));
        };
      }(map_checker, pred_checker, this$__$1)), null));
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        var res = map_checker.call(null, r);
        if (schema.utils.error_QMARK_.call(null, res)) {
          return res;
        } else {
          var pred_res = cljs.core.truth_(pred_checker) ? pred_checker.call(null, r) : null;
          if (schema.utils.error_QMARK_.call(null, pred_res)) {
            return pred_res;
          } else {
            return cljs.core.merge.call(null, r, res);
          }
        }
      }
    };
  }(map_checker, pred_checker, this$__$1);
};
schema.core.Record.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, self__.schema)), cljs.core.symbol.call(null, cljs.core.pr_str.call(null, self__.klass))), new cljs.core.Symbol(null, "record", "record", 1719526922, null));
};
schema.core.Record.cljs$lang$type = true;
schema.core.Record.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/Record");
};
schema.core.Record.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/Record");
};
schema.core.__GT_Record = function __GT_Record(klass, schema__$1) {
  return new schema.core.Record(klass, schema__$1);
};
schema.core.map__GT_Record = function map__GT_Record(G__15026) {
  return new schema.core.Record((new cljs.core.Keyword(null, "klass", "klass", 1116035314)).cljs$core$IFn$_invoke$arity$1(G__15026), (new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__15026), null, cljs.core.dissoc.call(null, G__15026, new cljs.core.Keyword(null, "klass", "klass", 1116035314), new cljs.core.Keyword(null, "schema", "schema", 4400883987)));
};
schema.core.record = function record(klass, schema__$1) {
  if (cljs.core.map_QMARK_.call(null, schema__$1)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Expected map, got %s", schema.utils.type_of.call(null, schema__$1)));
  }
  return new schema.core.Record(klass, schema__$1);
};
schema.core.explain_input_schema = function explain_input_schema(input_schema) {
  var vec__15033 = cljs.core.split_with.call(null, function(p1__15030_SHARP_) {
    return p1__15030_SHARP_ instanceof schema.core.One;
  }, input_schema);
  var required = cljs.core.nth.call(null, vec__15033, 0, null);
  var more = cljs.core.nth.call(null, vec__15033, 1, null);
  return cljs.core.concat.call(null, cljs.core.map.call(null, function(vec__15033, required, more) {
    return function(p1__15031_SHARP_) {
      return schema.core.explain.call(null, p1__15031_SHARP_.schema);
    };
  }(vec__15033, required, more), required), cljs.core.seq.call(null, more) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), cljs.core.mapv.call(null, schema.core.explain, more)], null) : null);
};
schema.core.FnSchema = function(output_schema, input_schemas, __meta, __extmap) {
  this.output_schema = output_schema;
  this.input_schemas = input_schemas;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
schema.core.FnSchema.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k15035, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k15035, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263))) {
    return self__.output_schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k15035, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529))) {
      return self__.input_schemas;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k15035, else__4068__auto__);
      } else {
        return null;
      }
    }
  }
};
schema.core.FnSchema.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#schema.core.FnSchema{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
schema.core.FnSchema.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
schema.core.FnSchema.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
schema.core.FnSchema.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
schema.core.FnSchema.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
schema.core.FnSchema.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__15034) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__15037 = cljs.core.keyword_identical_QMARK_;
  var expr__15038 = k__4073__auto__;
  if (cljs.core.truth_(pred__15037.call(null, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), expr__15038))) {
    return new schema.core.FnSchema(G__15034, self__.input_schemas, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15037.call(null, new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), expr__15038))) {
      return new schema.core.FnSchema(self__.output_schema, G__15034, self__.__meta, self__.__extmap, null);
    } else {
      return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__15034), null);
    }
  }
};
schema.core.FnSchema.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), self__.output_schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529), self__.input_schemas], 
  null)], null), self__.__extmap));
};
schema.core.FnSchema.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__15034) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new schema.core.FnSchema(self__.output_schema, self__.input_schemas, G__15034, self__.__extmap, self__.__hash);
};
schema.core.FnSchema.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
schema.core.FnSchema.prototype.schema$core$Schema$ = true;
schema.core.FnSchema.prototype.schema$core$Schema$walker$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return function(this$__$1) {
    return function(x) {
      if (cljs.core.fn_QMARK_.call(null, x)) {
        return x;
      } else {
        return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, this$__$1, x, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(this$__$1) {
          return function() {
            return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.utils.value_name.call(null, x)), new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null));
          };
        }(this$__$1)), null));
      }
    };
  }(this$__$1);
};
schema.core.FnSchema.prototype.schema$core$Schema$explain$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.input_schemas) > 1) {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e*", "\x3d\x3e*", -1640470942, null), schema.core.explain.call(null, self__.output_schema), cljs.core.map.call(null, schema.core.explain_input_schema, self__.input_schemas));
  } else {
    return cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, "\x3d\x3e", "\x3d\x3e", -1640529574, null), schema.core.explain.call(null, self__.output_schema), schema.core.explain_input_schema.call(null, cljs.core.first.call(null, self__.input_schemas)));
  }
};
schema.core.FnSchema.cljs$lang$type = true;
schema.core.FnSchema.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "schema.core/FnSchema");
};
schema.core.FnSchema.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "schema.core/FnSchema");
};
schema.core.__GT_FnSchema = function __GT_FnSchema(output_schema, input_schemas) {
  return new schema.core.FnSchema(output_schema, input_schemas);
};
schema.core.map__GT_FnSchema = function map__GT_FnSchema(G__15036) {
  return new schema.core.FnSchema((new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263)).cljs$core$IFn$_invoke$arity$1(G__15036), (new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)).cljs$core$IFn$_invoke$arity$1(G__15036), null, cljs.core.dissoc.call(null, G__15036, new cljs.core.Keyword(null, "output-schema", "output-schema", 1859815263), new cljs.core.Keyword(null, "input-schemas", "input-schemas", 4496114529)));
};
schema.core.arity = function arity(input_schema) {
  if (cljs.core.seq.call(null, input_schema)) {
    if (cljs.core.last.call(null, input_schema) instanceof schema.core.One) {
      return cljs.core.count.call(null, input_schema);
    } else {
      return Number.MAX_VALUE;
    }
  } else {
    return 0;
  }
};
schema.core.make_fn_schema = function make_fn_schema(output_schema, input_schemas) {
  if (cljs.core.seq.call(null, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Function must have at least one input schema"));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.vector_QMARK_, input_schemas)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Each arity must be a vector."));
  }
  if (cljs.core.truth_(cljs.core.apply.call(null, cljs.core.distinct_QMARK_, cljs.core.map.call(null, schema.core.arity, input_schemas)))) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Arities must be distinct"));
  }
  return new schema.core.FnSchema(output_schema, cljs.core.sort_by.call(null, schema.core.arity, input_schemas));
};
schema.core.fn_validation_QMARK_ = function fn_validation_QMARK_() {
  return schema.utils.use_fn_validation.get_cell();
};
schema.core.set_fn_validation_BANG_ = function set_fn_validation_BANG_(on_QMARK_) {
  return schema.utils.use_fn_validation.set_cell(on_QMARK_);
};
schema.core.schematize_fn = function schematize_fn(f, schema__$1) {
  return cljs.core.vary_meta.call(null, f, cljs.core.assoc, new cljs.core.Keyword(null, "schema", "schema", 4400883987), schema__$1);
};
schema.core.fn_schema = function fn_schema(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
  } else {
    throw new Error(schema.utils.format_STAR_.call(null, "Non-function %s", schema.utils.type_of.call(null, f)));
  }
  var or__3479__auto__ = schema.utils.class_schema.call(null, schema.utils.fn_schema_bearer.call(null, f));
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    var m__7099__auto__ = cljs.core.meta.call(null, f);
    var k__7100__auto__ = new cljs.core.Keyword(null, "schema", "schema", 4400883987);
    var temp__4124__auto__ = cljs.core.find.call(null, m__7099__auto__, k__7100__auto__);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var pair__7101__auto__ = temp__4124__auto__;
      return cljs.core.val.call(null, pair__7101__auto__);
    } else {
      throw new Error(schema.utils.format_STAR_.call(null, "Key %s not found in %s", k__7100__auto__, m__7099__auto__));
    }
  }
};
schema.core.schema_with_name = function schema_with_name(schema__$1, name) {
  return cljs.core.with_meta.call(null, schema__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1017277949), name], null));
};
schema.core.schema_name = function schema_name(schema__$1) {
  return(new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, schema__$1));
};
goog.provide("plumbing.fnk.schema");
goog.require("cljs.core");
goog.require("schema.utils");
goog.require("schema.utils");
goog.require("schema.core");
goog.require("schema.core");
plumbing.fnk.schema.Schema = cljs.core.with_meta.call(null, schema.core.__GT_Protocol.call(null, schema.core.Schema), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "proto-sym", "proto-sym", 4707957972), new cljs.core.Symbol("s", "Schema", "s/Schema", 830322725, null), new cljs.core.Keyword(null, "proto-pred", "proto-pred", 3860323928), function(p1__7207__7208__auto__) {
  var G__14502 = p1__7207__7208__auto__;
  if (G__14502) {
    var bit__4129__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3479__auto__ = bit__4129__auto__;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return G__14502.schema$core$Schema$;
      }
    }())) {
      return true;
    } else {
      if (!G__14502.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__14502);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, schema.core.Schema, G__14502);
  }
}], null));
plumbing.fnk.schema.InputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.eq.call(null, schema.core.Keyword), schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.OutputSchema = plumbing.fnk.schema.Schema;
plumbing.fnk.schema.IOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.OutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.GraphInputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.either.call(null, schema.core.OptionalKey, schema.core.Keyword), plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.MapOutputSchema = new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, plumbing.fnk.schema.Schema], true, false);
plumbing.fnk.schema.GraphIOSchemata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphInputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null);
plumbing.fnk.schema.assert_distinct = function assert_distinct(things) {
  var repeated_things = cljs.core.seq.call(null, cljs.core.filter.call(null, function(p1__14503_SHARP_) {
    return cljs.core.val.call(null, p1__14503_SHARP_) > 1;
  }, cljs.core.frequencies.call(null, things)));
  if (cljs.core.empty_QMARK_.call(null, repeated_things)) {
    return null;
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Got repeated items (expected distinct): %s", repeated_things));
  }
};
plumbing.fnk.schema.safe_get = function safe_get(m, k, key_path) {
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Expected a map at key-path %s, got type %s", key_path, schema.utils.type_of.call(null, m)));
  }
  var vec__14505 = cljs.core.find.call(null, m, k);
  var _ = cljs.core.nth.call(null, vec__14505, 0, null);
  var v = cljs.core.nth.call(null, vec__14505, 1, null);
  var p = vec__14505;
  if (cljs.core.truth_(p)) {
  } else {
    throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.keys.call(null, m)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "missing-key", "missing-key", 2360894698), new cljs.core.Keyword(null, "key", "key", 1014010321), k, new cljs.core.Keyword(null, "map", "map", 1014012110), m], null));
  }
  return v;
};
plumbing.fnk.schema.non_map_union = function non_map_union(s1, s2) {
  if (cljs.core._EQ_.call(null, s1, s2)) {
    return s1;
  } else {
    if (cljs.core._EQ_.call(null, s1, schema.core.Any)) {
      return s2;
    } else {
      if (cljs.core._EQ_.call(null, s2, schema.core.Any)) {
        return s1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return schema.core.both.call(null, s1, s2);
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.fnk.schema.non_map_diff = function non_map_diff(s1, s2) {
  return null;
};
plumbing.fnk.schema.map_schema_QMARK_ = function map_schema_QMARK_(m) {
  return m instanceof cljs.core.PersistentArrayMap || m instanceof cljs.core.PersistentHashMap;
};
var ufv___14511 = schema.utils.use_fn_validation;
var output_schema14506_14512 = schema.core.maybe.call(null, schema.core.pair.call(null, schema.core.Keyword, "k", schema.core.Bool, "optional?"));
var input_schema14507_14513 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "k", "k", -1640531420, null))], null);
var input_checker14508_14514 = schema.core.checker.call(null, input_schema14507_14513);
var output_checker14509_14515 = schema.core.checker.call(null, output_schema14506_14512);
plumbing.fnk.schema.unwrap_schema_form_key = function(ufv___14511, output_schema14506_14512, input_schema14507_14513, input_checker14508_14514, output_checker14509_14515) {
  return function unwrap_schema_form_key(G__14510) {
    var validate__7177__auto__ = ufv___14511.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14516 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14510], null);
      var temp__4126__auto___14517 = input_checker14508_14514.call(null, args__7178__auto___14516);
      if (cljs.core.truth_(temp__4126__auto___14517)) {
        var error__7179__auto___14518 = temp__4126__auto___14517;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__7179__auto___14518)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14507_14513, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14516, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14518], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var k = G__14510;
      while (true) {
        if (schema.core.specific_key_QMARK_.call(null, k)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.explicit_schema_key.call(null, k), schema.core.required_key_QMARK_.call(null, k)], null);
        } else {
          if (cljs.core.sequential_QMARK_.call(null, k) && (!cljs.core.vector_QMARK_.call(null, k) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, k), 2) && cljs.core._EQ_.call(null, cljs.core.first.call(null, k), new cljs.core.Symbol("schema.core", "optional-key", "schema.core/optional-key", -54341422, null))))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, k), false], null);
          } else {
            return null;
          }
        }
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14519 = output_checker14509_14515.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14519)) {
        var error__7179__auto___14520 = temp__4126__auto___14519;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "unwrap-schema-form-key", "unwrap-schema-form-key", -143561007, null), cljs.core.pr_str.call(null, error__7179__auto___14520)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14506_14512, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14520], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14511, output_schema14506_14512, input_schema14507_14513, input_checker14508_14514, output_checker14509_14515);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.unwrap_schema_form_key), schema.core.make_fn_schema.call(null, output_schema14506_14512, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14507_14513], null)));
var ufv___14526 = schema.utils.use_fn_validation;
var output_schema14521_14527 = schema.core.Any;
var input_schema14522_14528 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Any, new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker14523_14529 = schema.core.checker.call(null, input_schema14522_14528);
var output_checker14524_14530 = schema.core.checker.call(null, output_schema14521_14527);
plumbing.fnk.schema.explicit_schema_key_map = function(ufv___14526, output_schema14521_14527, input_schema14522_14528, input_checker14523_14529, output_checker14524_14530) {
  return function explicit_schema_key_map(G__14525) {
    var validate__7177__auto__ = ufv___14526.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14531 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14525], null);
      var temp__4126__auto___14532 = input_checker14523_14529.call(null, args__7178__auto___14531);
      if (cljs.core.truth_(temp__4126__auto___14532)) {
        var error__7179__auto___14533 = temp__4126__auto___14532;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__7179__auto___14533)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14522_14528, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14531, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14533], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var s = G__14525;
      while (true) {
        new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false);
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.keep.call(null, plumbing.fnk.schema.unwrap_schema_form_key, cljs.core.keys.call(null, s)));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14534 = output_checker14524_14530.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14534)) {
        var error__7179__auto___14535 = temp__4126__auto___14534;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "explicit-schema-key-map", "explicit-schema-key-map", 2031840052, null), cljs.core.pr_str.call(null, error__7179__auto___14535)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14521_14527, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14535], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14526, output_schema14521_14527, input_schema14522_14528, input_checker14523_14529, output_checker14524_14530);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.explicit_schema_key_map), schema.core.make_fn_schema.call(null, output_schema14521_14527, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14522_14528], null)));
var ufv___14541 = schema.utils.use_fn_validation;
var output_schema14536_14542 = schema.core.Any;
var input_schema14537_14543 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Bool], true, false), new cljs.core.Symbol(null, "s", "s", -1640531412, null))], null);
var input_checker14538_14544 = schema.core.checker.call(null, input_schema14537_14543);
var output_checker14539_14545 = schema.core.checker.call(null, output_schema14536_14542);
plumbing.fnk.schema.split_schema_keys = function(ufv___14541, output_schema14536_14542, input_schema14537_14543, input_checker14538_14544, output_checker14539_14545) {
  return function split_schema_keys(G__14540) {
    var validate__7177__auto__ = ufv___14541.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14546 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14540], null);
      var temp__4126__auto___14547 = input_checker14538_14544.call(null, args__7178__auto___14546);
      if (cljs.core.truth_(temp__4126__auto___14547)) {
        var error__7179__auto___14548 = temp__4126__auto___14547;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__7179__auto___14548)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14537_14543, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14546, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14548], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var s = G__14540;
      while (true) {
        new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "required", "required", -2033670824, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "optional", "optional", -1719548647, 
        null))], null);
        return cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core.mapv, cljs.core.key), cljs.core.juxt.call(null, cljs.core.filter, cljs.core.remove).call(null, cljs.core.val, s));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14549 = output_checker14539_14545.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14549)) {
        var error__7179__auto___14550 = temp__4126__auto___14549;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema-keys", "split-schema-keys", 1165575718, null), cljs.core.pr_str.call(null, error__7179__auto___14550)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14536_14542, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14550], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14541, output_schema14536_14542, input_schema14537_14543, input_checker14538_14544, output_checker14539_14545);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema_keys), schema.core.make_fn_schema.call(null, output_schema14536_14542, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14537_14543], null)));
plumbing.fnk.schema.merge_on_with = function() {
  var merge_on_with__delegate = function(key_project, key_combine, val_combine, maps) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.vals.call(null, cljs.core.reduce.call(null, function(m, p__14554) {
      var vec__14555 = p__14554;
      var k = cljs.core.nth.call(null, vec__14555, 0, null);
      var v = cljs.core.nth.call(null, vec__14555, 1, null);
      var pk = key_project.call(null, k);
      var temp__4124__auto__ = cljs.core.get.call(null, m, pk);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__14556 = temp__4124__auto__;
        var ok = cljs.core.nth.call(null, vec__14556, 0, null);
        var ov = cljs.core.nth.call(null, vec__14556, 1, null);
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_combine.call(null, ok, k), val_combine.call(null, ov, v)], null));
      } else {
        return cljs.core.assoc.call(null, m, pk, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
      }
    }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.apply.call(null, cljs.core.concat, maps))));
  };
  var merge_on_with = function(key_project, key_combine, val_combine, var_args) {
    var maps = null;
    if (arguments.length > 3) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return merge_on_with__delegate.call(this, key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$lang$maxFixedArity = 3;
  merge_on_with.cljs$lang$applyTo = function(arglist__14557) {
    var key_project = cljs.core.first(arglist__14557);
    arglist__14557 = cljs.core.next(arglist__14557);
    var key_combine = cljs.core.first(arglist__14557);
    arglist__14557 = cljs.core.next(arglist__14557);
    var val_combine = cljs.core.first(arglist__14557);
    var maps = cljs.core.rest(arglist__14557);
    return merge_on_with__delegate(key_project, key_combine, val_combine, maps);
  };
  merge_on_with.cljs$core$IFn$_invoke$arity$variadic = merge_on_with__delegate;
  return merge_on_with;
}();
var ufv___14565 = schema.utils.use_fn_validation;
var output_schema14559_14566 = plumbing.fnk.schema.InputSchema;
var input_schema14560_14567 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i1", "i1", -1640528223, null)), schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "i2", "i2", -1640528222, null))], null);
var input_checker14561_14568 = schema.core.checker.call(null, input_schema14560_14567);
var output_checker14562_14569 = schema.core.checker.call(null, output_schema14559_14566);
plumbing.fnk.schema.union_input_schemata = function(ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569) {
  return function union_input_schemata(G__14563, G__14564) {
    var validate__7177__auto__ = ufv___14565.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14570 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14563, G__14564], null);
      var temp__4126__auto___14571 = input_checker14561_14568.call(null, args__7178__auto___14570);
      if (cljs.core.truth_(temp__4126__auto___14571)) {
        var error__7179__auto___14572 = temp__4126__auto___14571;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__7179__auto___14572)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14560_14567, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14570, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14572], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var i1 = G__14563;
      var i2 = G__14564;
      while (true) {
        return plumbing.fnk.schema.merge_on_with.call(null, function(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569) {
          return function(p1__14558_SHARP_) {
            if (schema.core.specific_key_QMARK_.call(null, p1__14558_SHARP_)) {
              return schema.core.explicit_schema_key.call(null, p1__14558_SHARP_);
            } else {
              return new cljs.core.Keyword(null, "extra", "extra", 1110869890);
            }
          };
        }(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569), function(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569) {
          return function(k1, k2) {
            if (schema.core.required_key_QMARK_.call(null, k1)) {
              return k1;
            } else {
              if (schema.core.required_key_QMARK_.call(null, k2)) {
                return k2;
              } else {
                if (schema.core.optional_key_QMARK_.call(null, k1)) {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), new cljs.core.Symbol(null, "k1", "k1", -1640528161, null), new cljs.core.Symbol(null, "k2", "k2", -1640528160, null))))].join(""));
                  }
                  return k1;
                } else {
                  if (cljs.core._EQ_.call(null, k1, k2)) {
                    return k1;
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      if (false) {
                        return null;
                      } else {
                        throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Only one extra schema allowed"));
                      }
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569), function(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569) {
          return function(s1, s2) {
            if (plumbing.fnk.schema.map_schema_QMARK_.call(null, s1) && plumbing.fnk.schema.map_schema_QMARK_.call(null, s2)) {
              return union_input_schemata.call(null, s1, s2);
            } else {
              return plumbing.fnk.schema.non_map_union.call(null, s1, s2);
            }
          };
        }(validate__7177__auto__, ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569), i1, i2);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14573 = output_checker14562_14569.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14573)) {
        var error__7179__auto___14574 = temp__4126__auto___14573;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "union-input-schemata", "union-input-schemata", 1314662120, null), cljs.core.pr_str.call(null, error__7179__auto___14574)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14559_14566, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14574], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14565, output_schema14559_14566, input_schema14560_14567, input_checker14561_14568, output_checker14562_14569);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.union_input_schemata), schema.core.make_fn_schema.call(null, output_schema14559_14566, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14560_14567], null)));
var ufv___14580 = schema.utils.use_fn_validation;
var output_schema14575_14581 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null);
var input_schema14576_14582 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input-schema", "input-schema", -1943844163, null))], null);
var input_checker14577_14583 = schema.core.checker.call(null, input_schema14576_14582);
var output_checker14578_14584 = schema.core.checker.call(null, output_schema14575_14581);
plumbing.fnk.schema.required_toplevel_keys = function(ufv___14580, output_schema14575_14581, input_schema14576_14582, input_checker14577_14583, output_checker14578_14584) {
  return function required_toplevel_keys(G__14579) {
    var validate__7177__auto__ = ufv___14580.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14585 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14579], null);
      var temp__4126__auto___14586 = input_checker14577_14583.call(null, args__7178__auto___14585);
      if (cljs.core.truth_(temp__4126__auto___14586)) {
        var error__7179__auto___14587 = temp__4126__auto___14586;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__7179__auto___14587)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14576_14582, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14585, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14587], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var input_schema = G__14579;
      while (true) {
        return cljs.core.keep.call(null, function(validate__7177__auto__, ufv___14580, output_schema14575_14581, input_schema14576_14582, input_checker14577_14583, output_checker14578_14584) {
          return function(k) {
            if (schema.core.required_key_QMARK_.call(null, k)) {
              return schema.core.explicit_schema_key.call(null, k);
            } else {
              return null;
            }
          };
        }(validate__7177__auto__, ufv___14580, output_schema14575_14581, input_schema14576_14582, input_checker14577_14583, output_checker14578_14584), cljs.core.keys.call(null, input_schema));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14588 = output_checker14578_14584.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14588)) {
        var error__7179__auto___14589 = temp__4126__auto___14588;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "required-toplevel-keys", "required-toplevel-keys", -1439959619, null), cljs.core.pr_str.call(null, error__7179__auto___14589)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14575_14581, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14589], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14580, output_schema14575_14581, input_schema14576_14582, input_checker14577_14583, output_checker14578_14584);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.required_toplevel_keys), schema.core.make_fn_schema.call(null, output_schema14575_14581, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14576_14582], null)));
plumbing.fnk.schema.guess_expr_output_schema = function guess_expr_output_schema(expr) {
  if (cljs.core.map_QMARK_.call(null, expr) && cljs.core.every_QMARK_.call(null, cljs.core.keyword_QMARK_, cljs.core.keys.call(null, expr))) {
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4196__auto__ = function iter__14598(s__14599) {
        return new cljs.core.LazySeq(null, function() {
          var s__14599__$1 = s__14599;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__14599__$1);
            if (temp__4126__auto__) {
              var s__14599__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__14599__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14599__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__14601 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__14600 = 0;
                  while (true) {
                    if (i__14600 < size__4195__auto__) {
                      var vec__14604 = cljs.core._nth.call(null, c__4194__auto__, i__14600);
                      var k = cljs.core.nth.call(null, vec__14604, 0, null);
                      var v = cljs.core.nth.call(null, vec__14604, 1, null);
                      cljs.core.chunk_append.call(null, b__14601, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null));
                      var G__14606 = i__14600 + 1;
                      i__14600 = G__14606;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14601), iter__14598.call(null, cljs.core.chunk_rest.call(null, s__14599__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14601), null);
                }
              } else {
                var vec__14605 = cljs.core.first.call(null, s__14599__$2);
                var k = cljs.core.nth.call(null, vec__14605, 0, null);
                var v = cljs.core.nth.call(null, vec__14605, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, guess_expr_output_schema.call(null, v)], null), iter__14598.call(null, cljs.core.rest.call(null, s__14599__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, expr);
    }());
  } else {
    return new cljs.core.Symbol("schema.core", "Any", "schema.core/Any", 271859124, null);
  }
};
plumbing.fnk.schema.schema_diff = function schema_diff(input_schema, output_schema) {
  if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, input_schema)) {
    return plumbing.fnk.schema.non_map_diff.call(null, input_schema, output_schema);
  } else {
    if (!plumbing.fnk.schema.map_schema_QMARK_.call(null, output_schema)) {
      return schema.utils.error.call(null, schema.utils.__GT_ValidationError.call(null, input_schema, output_schema, new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
        return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, schema.core.explain.call(null, output_schema)), new cljs.core.Symbol(null, "map?", "map?", -1637187556, null));
      }), null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.not_empty.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
          var iter__4196__auto__ = function iter__14615(s__14616) {
            return new cljs.core.LazySeq(null, function() {
              var s__14616__$1 = s__14616;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__14616__$1);
                if (temp__4126__auto__) {
                  var s__14616__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__14616__$2)) {
                    var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14616__$2);
                    var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                    var b__14618 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                    if (function() {
                      var i__14617 = 0;
                      while (true) {
                        if (i__14617 < size__4195__auto__) {
                          var vec__14621 = cljs.core._nth.call(null, c__4194__auto__, i__14617);
                          var k = cljs.core.nth.call(null, vec__14621, 0, null);
                          var v = cljs.core.nth.call(null, vec__14621, 1, null);
                          if (schema.core.specific_key_QMARK_.call(null, k)) {
                            var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                            var raw_k = schema.core.explicit_schema_key.call(null, k);
                            var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                            if (required_QMARK_ || present_QMARK_) {
                              var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                              if (cljs.core.truth_(fail)) {
                                cljs.core.chunk_append.call(null, b__14618, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null));
                                var G__14623 = i__14617 + 1;
                                i__14617 = G__14623;
                                continue;
                              } else {
                                var G__14624 = i__14617 + 1;
                                i__14617 = G__14624;
                                continue;
                              }
                            } else {
                              var G__14625 = i__14617 + 1;
                              i__14617 = G__14625;
                              continue;
                            }
                          } else {
                            var G__14626 = i__14617 + 1;
                            i__14617 = G__14626;
                            continue;
                          }
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14618), iter__14615.call(null, cljs.core.chunk_rest.call(null, s__14616__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14618), null);
                    }
                  } else {
                    var vec__14622 = cljs.core.first.call(null, s__14616__$2);
                    var k = cljs.core.nth.call(null, vec__14622, 0, null);
                    var v = cljs.core.nth.call(null, vec__14622, 1, null);
                    if (schema.core.specific_key_QMARK_.call(null, k)) {
                      var required_QMARK_ = schema.core.required_key_QMARK_.call(null, k);
                      var raw_k = schema.core.explicit_schema_key.call(null, k);
                      var present_QMARK_ = cljs.core.contains_QMARK_.call(null, output_schema, raw_k);
                      if (required_QMARK_ || present_QMARK_) {
                        var fail = !present_QMARK_ ? new cljs.core.Symbol(null, "missing-required-key", "missing-required-key", -1340904975, null) : schema_diff.call(null, v, cljs.core.get.call(null, output_schema, raw_k));
                        if (cljs.core.truth_(fail)) {
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, fail], null), iter__14615.call(null, cljs.core.rest.call(null, s__14616__$2)));
                        } else {
                          var G__14627 = cljs.core.rest.call(null, s__14616__$2);
                          s__14616__$1 = G__14627;
                          continue;
                        }
                      } else {
                        var G__14628 = cljs.core.rest.call(null, s__14616__$2);
                        s__14616__$1 = G__14628;
                        continue;
                      }
                    } else {
                      var G__14629 = cljs.core.rest.call(null, s__14616__$2);
                      s__14616__$1 = G__14629;
                      continue;
                    }
                  }
                } else {
                  return null;
                }
                break;
              }
            }, null, null);
          };
          return iter__4196__auto__.call(null, input_schema);
        }()));
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.assert_satisfies_schema = function assert_satisfies_schema(input_schema, output_schema) {
  var fails = plumbing.fnk.schema.schema_diff.call(null, input_schema, output_schema);
  if (cljs.core.truth_(fails)) {
    throw cljs.core.ex_info.call(null, [cljs.core.str(fails)].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "does-not-satisfy-schema", "does-not-satisfy-schema", 2405949387), new cljs.core.Keyword(null, "failures", "failures", 1689842587), fails], null));
  } else {
    return null;
  }
};
var ufv___14652 = schema.utils.use_fn_validation;
var output_schema14630_14653 = schema.core.Any;
var input_schema14631_14654 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "input", "input", -1540173437, null)), schema.core.one.call(null, plumbing.fnk.schema.MapOutputSchema, 
new cljs.core.Symbol(null, "output", "output", 1648923322, null))], null), new cljs.core.Symbol(null, "arg1", "arg1", -1637529004, null))], null);
var input_checker14632_14655 = schema.core.checker.call(null, input_schema14631_14654);
var output_checker14633_14656 = schema.core.checker.call(null, output_schema14630_14653);
plumbing.fnk.schema.compose_schemata = function(ufv___14652, output_schema14630_14653, input_schema14631_14654, input_checker14632_14655, output_checker14633_14656) {
  return function compose_schemata(G__14634, G__14635) {
    var validate__7177__auto__ = true;
    if (validate__7177__auto__) {
      var args__7178__auto___14657 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14634, G__14635], null);
      var temp__4126__auto___14658 = input_checker14632_14655.call(null, args__7178__auto___14657);
      if (cljs.core.truth_(temp__4126__auto___14658)) {
        var error__7179__auto___14659 = temp__4126__auto___14658;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__7179__auto___14659)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14631_14654, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14657, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14659], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var G__14646 = G__14634;
      var vec__14648 = G__14646;
      var i2 = cljs.core.nth.call(null, vec__14648, 0, null);
      var o2 = cljs.core.nth.call(null, vec__14648, 1, null);
      var G__14647 = G__14635;
      var vec__14649 = G__14647;
      var i1 = cljs.core.nth.call(null, vec__14649, 0, null);
      var o1 = cljs.core.nth.call(null, vec__14649, 1, null);
      var G__14646__$1 = G__14646;
      var G__14647__$1 = G__14647;
      while (true) {
        var vec__14650 = G__14646__$1;
        var i2__$1 = cljs.core.nth.call(null, vec__14650, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__14650, 1, null);
        var vec__14651 = G__14647__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__14651, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__14651, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, cljs.core.select_keys.call(null, i2__$1, cljs.core.keys.call(null, o1__$1)), o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, cljs.core.apply.call(null, cljs.core.dissoc, i2__$1, cljs.core.concat.call(null, cljs.core.keys.call(null, o1__$1), cljs.core.map.call(null, schema.core.optional_key, cljs.core.keys.call(null, o1__$1)))), i1__$1), o2__$1], null);
        break;
      }
    }();
    if (validate__7177__auto__) {
      var temp__4126__auto___14660 = output_checker14633_14656.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14660)) {
        var error__7179__auto___14661 = temp__4126__auto___14660;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "compose-schemata", "compose-schemata", -726429854, null), cljs.core.pr_str.call(null, error__7179__auto___14661)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14630_14653, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, "error", 
        "error", 1110689146), error__7179__auto___14661], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14652, output_schema14630_14653, input_schema14631_14654, input_checker14632_14655, output_checker14633_14656);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.compose_schemata), schema.core.make_fn_schema.call(null, output_schema14630_14653, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14631_14654], null)));
plumbing.fnk.schema.schema_key = function schema_key(m, k) {
  if (cljs.core.contains_QMARK_.call(null, m, k)) {
    return k;
  } else {
    if (cljs.core.contains_QMARK_.call(null, m, schema.core.optional_key.call(null, k))) {
      return schema.core.optional_key.call(null, k);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
plumbing.fnk.schema.possibly_contains_QMARK_ = function possibly_contains_QMARK_(m, k) {
  return cljs.core.boolean$.call(null, plumbing.fnk.schema.schema_key.call(null, m, k));
};
var ufv___14740 = schema.utils.use_fn_validation;
var output_schema14662_14741 = schema.core.Any;
var input_schema14663_14742 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.InputSchema, new cljs.core.Symbol(null, "s", "s", -1640531412, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Keyword], null), new cljs.core.Symbol(null, "ks", "ks", -1640528095, null))], null);
var input_checker14664_14743 = schema.core.checker.call(null, input_schema14663_14742);
var output_checker14665_14744 = schema.core.checker.call(null, output_schema14662_14741);
plumbing.fnk.schema.split_schema = function(ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
  return function split_schema(G__14666, G__14667) {
    var validate__7177__auto__ = ufv___14740.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14745 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14666, G__14667], null);
      var temp__4126__auto___14746 = input_checker14664_14743.call(null, args__7178__auto___14745);
      if (cljs.core.truth_(temp__4126__auto___14746)) {
        var error__7179__auto___14747 = temp__4126__auto___14746;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__7179__auto___14747)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14663_14742, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14745, new cljs.core.Keyword(null, "error", 
        "error", 1110689146), error__7179__auto___14747], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var s = G__14666;
      var ks = G__14667;
      while (true) {
        var ks__$1 = cljs.core.set.call(null, ks);
        var iter__4196__auto__ = function(ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
          return function iter__14704(s__14705) {
            return new cljs.core.LazySeq(null, function(ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
              return function() {
                var s__14705__$1 = s__14705;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__14705__$1);
                  if (temp__4126__auto__) {
                    var s__14705__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__14705__$2)) {
                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14705__$2);
                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                      var b__14707 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                      if (function() {
                        var i__14706 = 0;
                        while (true) {
                          if (i__14706 < size__4195__auto__) {
                            var in_QMARK_ = cljs.core._nth.call(null, c__4194__auto__, i__14706);
                            cljs.core.chunk_append.call(null, b__14707, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                              var iter__4196__auto__ = function(i__14706, in_QMARK_, c__4194__auto__, size__4195__auto__, b__14707, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
                                return function iter__14724(s__14725) {
                                  return new cljs.core.LazySeq(null, function(i__14706, in_QMARK_, c__4194__auto__, size__4195__auto__, b__14707, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
                                    return function() {
                                      var s__14725__$1 = s__14725;
                                      while (true) {
                                        var temp__4126__auto____$1 = cljs.core.seq.call(null, s__14725__$1);
                                        if (temp__4126__auto____$1) {
                                          var s__14725__$2 = temp__4126__auto____$1;
                                          if (cljs.core.chunked_seq_QMARK_.call(null, s__14725__$2)) {
                                            var c__4194__auto____$1 = cljs.core.chunk_first.call(null, s__14725__$2);
                                            var size__4195__auto____$1 = cljs.core.count.call(null, c__4194__auto____$1);
                                            var b__14727 = cljs.core.chunk_buffer.call(null, size__4195__auto____$1);
                                            if (function() {
                                              var i__14726 = 0;
                                              while (true) {
                                                if (i__14726 < size__4195__auto____$1) {
                                                  var vec__14730 = cljs.core._nth.call(null, c__4194__auto____$1, i__14726);
                                                  var k = cljs.core.nth.call(null, vec__14730, 0, null);
                                                  var v = cljs.core.nth.call(null, vec__14730, 1, null);
                                                  if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                                    cljs.core.chunk_append.call(null, b__14727, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                                    var G__14748 = i__14726 + 1;
                                                    i__14726 = G__14748;
                                                    continue;
                                                  } else {
                                                    var G__14749 = i__14726 + 1;
                                                    i__14726 = G__14749;
                                                    continue;
                                                  }
                                                } else {
                                                  return true;
                                                }
                                                break;
                                              }
                                            }()) {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14727), iter__14724.call(null, cljs.core.chunk_rest.call(null, s__14725__$2)));
                                            } else {
                                              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14727), null);
                                            }
                                          } else {
                                            var vec__14731 = cljs.core.first.call(null, s__14725__$2);
                                            var k = cljs.core.nth.call(null, vec__14731, 0, null);
                                            var v = cljs.core.nth.call(null, vec__14731, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__14724.call(null, cljs.core.rest.call(null, s__14725__$2)));
                                            } else {
                                              var G__14750 = cljs.core.rest.call(null, s__14725__$2);
                                              s__14725__$1 = G__14750;
                                              continue;
                                            }
                                          }
                                        } else {
                                          return null;
                                        }
                                        break;
                                      }
                                    };
                                  }(i__14706, in_QMARK_, c__4194__auto__, size__4195__auto__, b__14707, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744), null, null);
                                };
                              }(i__14706, in_QMARK_, c__4194__auto__, size__4195__auto__, b__14707, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744);
                              return iter__4196__auto__.call(null, s);
                            }()));
                            var G__14751 = i__14706 + 1;
                            i__14706 = G__14751;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14707), iter__14704.call(null, cljs.core.chunk_rest.call(null, s__14705__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14707), null);
                      }
                    } else {
                      var in_QMARK_ = cljs.core.first.call(null, s__14705__$2);
                      return cljs.core.cons.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4196__auto__ = function(in_QMARK_, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
                          return function iter__14732(s__14733) {
                            return new cljs.core.LazySeq(null, function(in_QMARK_, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744) {
                              return function() {
                                var s__14733__$1 = s__14733;
                                while (true) {
                                  var temp__4126__auto____$1 = cljs.core.seq.call(null, s__14733__$1);
                                  if (temp__4126__auto____$1) {
                                    var s__14733__$2 = temp__4126__auto____$1;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__14733__$2)) {
                                      var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14733__$2);
                                      var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                      var b__14735 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                      if (function() {
                                        var i__14734 = 0;
                                        while (true) {
                                          if (i__14734 < size__4195__auto__) {
                                            var vec__14738 = cljs.core._nth.call(null, c__4194__auto__, i__14734);
                                            var k = cljs.core.nth.call(null, vec__14738, 0, null);
                                            var v = cljs.core.nth.call(null, vec__14738, 1, null);
                                            if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                              cljs.core.chunk_append.call(null, b__14735, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                                              var G__14752 = i__14734 + 1;
                                              i__14734 = G__14752;
                                              continue;
                                            } else {
                                              var G__14753 = i__14734 + 1;
                                              i__14734 = G__14753;
                                              continue;
                                            }
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14735), iter__14732.call(null, cljs.core.chunk_rest.call(null, s__14733__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14735), null);
                                      }
                                    } else {
                                      var vec__14739 = cljs.core.first.call(null, s__14733__$2);
                                      var k = cljs.core.nth.call(null, vec__14739, 0, null);
                                      var v = cljs.core.nth.call(null, vec__14739, 1, null);
                                      if (schema.core.specific_key_QMARK_.call(null, k) && cljs.core._EQ_.call(null, in_QMARK_, cljs.core.contains_QMARK_.call(null, ks__$1, schema.core.explicit_schema_key.call(null, k)))) {
                                        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__14732.call(null, cljs.core.rest.call(null, s__14733__$2)));
                                      } else {
                                        var G__14754 = cljs.core.rest.call(null, s__14733__$2);
                                        s__14733__$1 = G__14754;
                                        continue;
                                      }
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(in_QMARK_, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744), null, null);
                          };
                        }(in_QMARK_, s__14705__$2, temp__4126__auto__, ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744);
                        return iter__4196__auto__.call(null, s);
                      }()), iter__14704.call(null, cljs.core.rest.call(null, s__14705__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744), null, null);
          };
        }(ks__$1, validate__7177__auto__, ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744);
        return iter__4196__auto__.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, false], null));
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14755 = output_checker14665_14744.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14755)) {
        var error__7179__auto___14756 = temp__4126__auto___14755;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "split-schema", "split-schema", 1048718701, null), cljs.core.pr_str.call(null, error__7179__auto___14756)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14662_14741, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, "error", "error", 
        1110689146), error__7179__auto___14756], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14740, output_schema14662_14741, input_schema14663_14742, input_checker14664_14743, output_checker14665_14744);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.split_schema), schema.core.make_fn_schema.call(null, output_schema14662_14741, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14663_14742], null)));
var ufv___14787 = schema.utils.use_fn_validation;
var output_schema14757_14788 = plumbing.fnk.schema.GraphIOSchemata;
var input_schema14758_14789 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, plumbing.fnk.schema.GraphIOSchemata, new cljs.core.Symbol(null, "arg0", "arg0", -1637529005, null)), schema.core.one.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, schema.core.Keyword, "key"), schema.core.one.call(null, plumbing.fnk.schema.IOSchemata, "inner-schemas")], null), new cljs.core.Symbol(null, 
"arg1", "arg1", -1637529004, null))], null);
var input_checker14759_14790 = schema.core.checker.call(null, input_schema14758_14789);
var output_checker14760_14791 = schema.core.checker.call(null, output_schema14757_14788);
plumbing.fnk.schema.sequence_schemata = function(ufv___14787, output_schema14757_14788, input_schema14758_14789, input_checker14759_14790, output_checker14760_14791) {
  return function sequence_schemata(G__14761, G__14762) {
    var validate__7177__auto__ = ufv___14787.get_cell();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var args__7178__auto___14792 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14761, G__14762], null);
      var temp__4126__auto___14793 = input_checker14759_14790.call(null, args__7178__auto___14792);
      if (cljs.core.truth_(temp__4126__auto___14793)) {
        var error__7179__auto___14794 = temp__4126__auto___14793;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__7179__auto___14794)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14758_14789, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14792, new cljs.core.Keyword(null, 
        "error", "error", 1110689146), error__7179__auto___14794], null));
      } else {
      }
    } else {
    }
    var o__7180__auto__ = function() {
      var G__14778 = G__14761;
      var vec__14780 = G__14778;
      var i1 = cljs.core.nth.call(null, vec__14780, 0, null);
      var o1 = cljs.core.nth.call(null, vec__14780, 1, null);
      var G__14779 = G__14762;
      var vec__14781 = G__14779;
      var k = cljs.core.nth.call(null, vec__14781, 0, null);
      var vec__14782 = cljs.core.nth.call(null, vec__14781, 1, null);
      var i2 = cljs.core.nth.call(null, vec__14782, 0, null);
      var o2 = cljs.core.nth.call(null, vec__14782, 1, null);
      var G__14778__$1 = G__14778;
      var G__14779__$1 = G__14779;
      while (true) {
        var vec__14783 = G__14778__$1;
        var i1__$1 = cljs.core.nth.call(null, vec__14783, 0, null);
        var o1__$1 = cljs.core.nth.call(null, vec__14783, 1, null);
        var vec__14784 = G__14779__$1;
        var k__$1 = cljs.core.nth.call(null, vec__14784, 0, null);
        var vec__14785 = cljs.core.nth.call(null, vec__14784, 1, null);
        var i2__$1 = cljs.core.nth.call(null, vec__14785, 0, null);
        var o2__$1 = cljs.core.nth.call(null, vec__14785, 1, null);
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Duplicate key output (possibly due to a misordered graph) %s for input %s from input %s", k__$1, schema.core.explain.call(null, i2__$1), schema.core.explain.call(null, i1__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, i2__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a key %s in its inputs %s", k__$1, schema.core.explain.call(null, i2__$1)));
        }
        if (!plumbing.fnk.schema.possibly_contains_QMARK_.call(null, o1__$1, k__$1)) {
        } else {
          throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "Node outputs a duplicate key %s given inputs %s", k__$1, schema.core.explain.call(null, i1__$1)));
        }
        var vec__14786 = plumbing.fnk.schema.split_schema.call(null, i2__$1, cljs.core.keys.call(null, o1__$1));
        var used = cljs.core.nth.call(null, vec__14786, 0, null);
        var unused = cljs.core.nth.call(null, vec__14786, 1, null);
        plumbing.fnk.schema.assert_satisfies_schema.call(null, used, o1__$1);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [plumbing.fnk.schema.union_input_schemata.call(null, unused, i1__$1), cljs.core.assoc.call(null, o1__$1, k__$1, o2__$1)], null);
        break;
      }
    }();
    if (cljs.core.truth_(validate__7177__auto__)) {
      var temp__4126__auto___14795 = output_checker14760_14791.call(null, o__7180__auto__);
      if (cljs.core.truth_(temp__4126__auto___14795)) {
        var error__7179__auto___14796 = temp__4126__auto___14795;
        throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "sequence-schemata", "sequence-schemata", 19729939, null), cljs.core.pr_str.call(null, error__7179__auto___14796)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14757_14788, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, "error", 
        "error", 1110689146), error__7179__auto___14796], null));
      } else {
      }
    } else {
    }
    return o__7180__auto__;
  };
}(ufv___14787, output_schema14757_14788, input_schema14758_14789, input_checker14759_14790, output_checker14760_14791);
schema.utils.declare_class_schema_BANG_.call(null, schema.utils.fn_schema_bearer.call(null, plumbing.fnk.schema.sequence_schemata), schema.core.make_fn_schema.call(null, output_schema14757_14788, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14758_14789], null)));
goog.provide("plumbing.core");
goog.require("cljs.core");
goog.require("plumbing.fnk.schema");
goog.require("plumbing.fnk.schema");
goog.require("schema.utils");
goog.require("schema.utils");
plumbing.core._PLUS_none_PLUS_ = new cljs.core.Keyword("plumbing.core", "missing", "plumbing.core/missing", 1730933117);
plumbing.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
  };
  var update__4 = function(m, k, f, x1) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1));
  };
  var update__5 = function(m, k, f, x1, x2) {
    return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), x1, x2));
  };
  var update__6 = function() {
    var G__15040__delegate = function(m, k, f, x1, x2, xs) {
      return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), x1, x2, xs));
    };
    var G__15040 = function(m, k, f, x1, x2, var_args) {
      var xs = null;
      if (arguments.length > 5) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__15040__delegate.call(this, m, k, f, x1, x2, xs);
    };
    G__15040.cljs$lang$maxFixedArity = 5;
    G__15040.cljs$lang$applyTo = function(arglist__15041) {
      var m = cljs.core.first(arglist__15041);
      arglist__15041 = cljs.core.next(arglist__15041);
      var k = cljs.core.first(arglist__15041);
      arglist__15041 = cljs.core.next(arglist__15041);
      var f = cljs.core.first(arglist__15041);
      arglist__15041 = cljs.core.next(arglist__15041);
      var x1 = cljs.core.first(arglist__15041);
      arglist__15041 = cljs.core.next(arglist__15041);
      var x2 = cljs.core.first(arglist__15041);
      var xs = cljs.core.rest(arglist__15041);
      return G__15040__delegate(m, k, f, x1, x2, xs);
    };
    G__15040.cljs$core$IFn$_invoke$arity$variadic = G__15040__delegate;
    return G__15040;
  }();
  update = function(m, k, f, x1, x2, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x1);
      case 5:
        return update__5.call(this, m, k, f, x1, x2);
      default:
        return update__6.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x1, x2, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 5;
  update.cljs$lang$applyTo = update__6.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$variadic = update__6.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
plumbing.core.map_vals = function map_vals(f, m) {
  if (cljs.core.sorted_QMARK_.call(null, m)) {
    return cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc.call(null, out_m, k, f.call(null, v));
    }, cljs.core.sorted_map.call(null), m);
  } else {
    if (cljs.core.map_QMARK_.call(null, m)) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
        return cljs.core.assoc_BANG_.call(null, out_m, k, f.call(null, v));
      }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var m_atom__8678__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
        var seq__15050_15056 = cljs.core.seq.call(null, m);
        var chunk__15051_15057 = null;
        var count__15052_15058 = 0;
        var i__15053_15059 = 0;
        while (true) {
          if (i__15053_15059 < count__15052_15058) {
            var vec__15054_15060 = cljs.core._nth.call(null, chunk__15051_15057, i__15053_15059);
            var k_15061 = cljs.core.nth.call(null, vec__15054_15060, 0, null);
            var v_15062 = cljs.core.nth.call(null, vec__15054_15060, 1, null);
            var m15049_15063 = cljs.core.deref.call(null, m_atom__8678__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15049_15063, k_15061, f.call(null, v_15062)));
            var G__15064 = seq__15050_15056;
            var G__15065 = chunk__15051_15057;
            var G__15066 = count__15052_15058;
            var G__15067 = i__15053_15059 + 1;
            seq__15050_15056 = G__15064;
            chunk__15051_15057 = G__15065;
            count__15052_15058 = G__15066;
            i__15053_15059 = G__15067;
            continue;
          } else {
            var temp__4126__auto___15068 = cljs.core.seq.call(null, seq__15050_15056);
            if (temp__4126__auto___15068) {
              var seq__15050_15069__$1 = temp__4126__auto___15068;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__15050_15069__$1)) {
                var c__4227__auto___15070 = cljs.core.chunk_first.call(null, seq__15050_15069__$1);
                var G__15071 = cljs.core.chunk_rest.call(null, seq__15050_15069__$1);
                var G__15072 = c__4227__auto___15070;
                var G__15073 = cljs.core.count.call(null, c__4227__auto___15070);
                var G__15074 = 0;
                seq__15050_15056 = G__15071;
                chunk__15051_15057 = G__15072;
                count__15052_15058 = G__15073;
                i__15053_15059 = G__15074;
                continue;
              } else {
                var vec__15055_15075 = cljs.core.first.call(null, seq__15050_15069__$1);
                var k_15076 = cljs.core.nth.call(null, vec__15055_15075, 0, null);
                var v_15077 = cljs.core.nth.call(null, vec__15055_15075, 1, null);
                var m15049_15078 = cljs.core.deref.call(null, m_atom__8678__auto__);
                cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15049_15078, k_15076, f.call(null, v_15077)));
                var G__15079 = cljs.core.next.call(null, seq__15050_15069__$1);
                var G__15080 = null;
                var G__15081 = 0;
                var G__15082 = 0;
                seq__15050_15056 = G__15079;
                chunk__15051_15057 = G__15080;
                count__15052_15058 = G__15081;
                i__15053_15059 = G__15082;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8678__auto__));
      } else {
        return null;
      }
    }
  }
};
plumbing.core.map_keys = function map_keys(f, m) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(out_m, k, v) {
      return cljs.core.assoc_BANG_.call(null, out_m, f.call(null, k), v);
    }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), m));
  } else {
    var m_atom__8678__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__15091_15097 = cljs.core.seq.call(null, m);
    var chunk__15092_15098 = null;
    var count__15093_15099 = 0;
    var i__15094_15100 = 0;
    while (true) {
      if (i__15094_15100 < count__15093_15099) {
        var vec__15095_15101 = cljs.core._nth.call(null, chunk__15092_15098, i__15094_15100);
        var k_15102 = cljs.core.nth.call(null, vec__15095_15101, 0, null);
        var v_15103 = cljs.core.nth.call(null, vec__15095_15101, 1, null);
        var m15090_15104 = cljs.core.deref.call(null, m_atom__8678__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15090_15104, f.call(null, k_15102), v_15103));
        var G__15105 = seq__15091_15097;
        var G__15106 = chunk__15092_15098;
        var G__15107 = count__15093_15099;
        var G__15108 = i__15094_15100 + 1;
        seq__15091_15097 = G__15105;
        chunk__15092_15098 = G__15106;
        count__15093_15099 = G__15107;
        i__15094_15100 = G__15108;
        continue;
      } else {
        var temp__4126__auto___15109 = cljs.core.seq.call(null, seq__15091_15097);
        if (temp__4126__auto___15109) {
          var seq__15091_15110__$1 = temp__4126__auto___15109;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15091_15110__$1)) {
            var c__4227__auto___15111 = cljs.core.chunk_first.call(null, seq__15091_15110__$1);
            var G__15112 = cljs.core.chunk_rest.call(null, seq__15091_15110__$1);
            var G__15113 = c__4227__auto___15111;
            var G__15114 = cljs.core.count.call(null, c__4227__auto___15111);
            var G__15115 = 0;
            seq__15091_15097 = G__15112;
            chunk__15092_15098 = G__15113;
            count__15093_15099 = G__15114;
            i__15094_15100 = G__15115;
            continue;
          } else {
            var vec__15096_15116 = cljs.core.first.call(null, seq__15091_15110__$1);
            var k_15117 = cljs.core.nth.call(null, vec__15096_15116, 0, null);
            var v_15118 = cljs.core.nth.call(null, vec__15096_15116, 1, null);
            var m15090_15119 = cljs.core.deref.call(null, m_atom__8678__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15090_15119, f.call(null, k_15117), v_15118));
            var G__15120 = cljs.core.next.call(null, seq__15091_15110__$1);
            var G__15121 = null;
            var G__15122 = 0;
            var G__15123 = 0;
            seq__15091_15097 = G__15120;
            chunk__15092_15098 = G__15121;
            count__15093_15099 = G__15122;
            i__15094_15100 = G__15123;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8678__auto__));
  }
};
plumbing.core.map_from_keys = function map_from_keys(f, ks) {
  var m_atom__8678__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__15130_15134 = cljs.core.seq.call(null, ks);
  var chunk__15131_15135 = null;
  var count__15132_15136 = 0;
  var i__15133_15137 = 0;
  while (true) {
    if (i__15133_15137 < count__15132_15136) {
      var k_15138 = cljs.core._nth.call(null, chunk__15131_15135, i__15133_15137);
      var m15129_15139 = cljs.core.deref.call(null, m_atom__8678__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15129_15139, k_15138, f.call(null, k_15138)));
      var G__15140 = seq__15130_15134;
      var G__15141 = chunk__15131_15135;
      var G__15142 = count__15132_15136;
      var G__15143 = i__15133_15137 + 1;
      seq__15130_15134 = G__15140;
      chunk__15131_15135 = G__15141;
      count__15132_15136 = G__15142;
      i__15133_15137 = G__15143;
      continue;
    } else {
      var temp__4126__auto___15144 = cljs.core.seq.call(null, seq__15130_15134);
      if (temp__4126__auto___15144) {
        var seq__15130_15145__$1 = temp__4126__auto___15144;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15130_15145__$1)) {
          var c__4227__auto___15146 = cljs.core.chunk_first.call(null, seq__15130_15145__$1);
          var G__15147 = cljs.core.chunk_rest.call(null, seq__15130_15145__$1);
          var G__15148 = c__4227__auto___15146;
          var G__15149 = cljs.core.count.call(null, c__4227__auto___15146);
          var G__15150 = 0;
          seq__15130_15134 = G__15147;
          chunk__15131_15135 = G__15148;
          count__15132_15136 = G__15149;
          i__15133_15137 = G__15150;
          continue;
        } else {
          var k_15151 = cljs.core.first.call(null, seq__15130_15145__$1);
          var m15129_15152 = cljs.core.deref.call(null, m_atom__8678__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15129_15152, k_15151, f.call(null, k_15151)));
          var G__15153 = cljs.core.next.call(null, seq__15130_15145__$1);
          var G__15154 = null;
          var G__15155 = 0;
          var G__15156 = 0;
          seq__15130_15134 = G__15153;
          chunk__15131_15135 = G__15154;
          count__15132_15136 = G__15155;
          i__15133_15137 = G__15156;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8678__auto__));
};
plumbing.core.map_from_vals = function map_from_vals(f, vs) {
  var m_atom__8678__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
  var seq__15163_15167 = cljs.core.seq.call(null, vs);
  var chunk__15164_15168 = null;
  var count__15165_15169 = 0;
  var i__15166_15170 = 0;
  while (true) {
    if (i__15166_15170 < count__15165_15169) {
      var v_15171 = cljs.core._nth.call(null, chunk__15164_15168, i__15166_15170);
      var m15162_15172 = cljs.core.deref.call(null, m_atom__8678__auto__);
      cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15162_15172, f.call(null, v_15171), v_15171));
      var G__15173 = seq__15163_15167;
      var G__15174 = chunk__15164_15168;
      var G__15175 = count__15165_15169;
      var G__15176 = i__15166_15170 + 1;
      seq__15163_15167 = G__15173;
      chunk__15164_15168 = G__15174;
      count__15165_15169 = G__15175;
      i__15166_15170 = G__15176;
      continue;
    } else {
      var temp__4126__auto___15177 = cljs.core.seq.call(null, seq__15163_15167);
      if (temp__4126__auto___15177) {
        var seq__15163_15178__$1 = temp__4126__auto___15177;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15163_15178__$1)) {
          var c__4227__auto___15179 = cljs.core.chunk_first.call(null, seq__15163_15178__$1);
          var G__15180 = cljs.core.chunk_rest.call(null, seq__15163_15178__$1);
          var G__15181 = c__4227__auto___15179;
          var G__15182 = cljs.core.count.call(null, c__4227__auto___15179);
          var G__15183 = 0;
          seq__15163_15167 = G__15180;
          chunk__15164_15168 = G__15181;
          count__15165_15169 = G__15182;
          i__15166_15170 = G__15183;
          continue;
        } else {
          var v_15184 = cljs.core.first.call(null, seq__15163_15178__$1);
          var m15162_15185 = cljs.core.deref.call(null, m_atom__8678__auto__);
          cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15162_15185, f.call(null, v_15184), v_15184));
          var G__15186 = cljs.core.next.call(null, seq__15163_15178__$1);
          var G__15187 = null;
          var G__15188 = 0;
          var G__15189 = 0;
          seq__15163_15167 = G__15186;
          chunk__15164_15168 = G__15187;
          count__15165_15169 = G__15188;
          i__15166_15170 = G__15189;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8678__auto__));
};
plumbing.core.dissoc_in = function dissoc_in(m, p__15190) {
  var vec__15192 = p__15190;
  var k = cljs.core.nth.call(null, vec__15192, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__15192, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3467__auto__ = ks;
      if (and__3467__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3467__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
plumbing.core.keywordize_map = function keywordize_map(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    var m_atom__8678__auto__ = cljs.core.atom.call(null, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY));
    var seq__15201_15207 = cljs.core.seq.call(null, x);
    var chunk__15202_15208 = null;
    var count__15203_15209 = 0;
    var i__15204_15210 = 0;
    while (true) {
      if (i__15204_15210 < count__15203_15209) {
        var vec__15205_15211 = cljs.core._nth.call(null, chunk__15202_15208, i__15204_15210);
        var k_15212 = cljs.core.nth.call(null, vec__15205_15211, 0, null);
        var v_15213 = cljs.core.nth.call(null, vec__15205_15211, 1, null);
        var m15200_15214 = cljs.core.deref.call(null, m_atom__8678__auto__);
        cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15200_15214, typeof k_15212 === "string" ? cljs.core.keyword.call(null, k_15212) : k_15212, keywordize_map.call(null, v_15213)));
        var G__15215 = seq__15201_15207;
        var G__15216 = chunk__15202_15208;
        var G__15217 = count__15203_15209;
        var G__15218 = i__15204_15210 + 1;
        seq__15201_15207 = G__15215;
        chunk__15202_15208 = G__15216;
        count__15203_15209 = G__15217;
        i__15204_15210 = G__15218;
        continue;
      } else {
        var temp__4126__auto___15219 = cljs.core.seq.call(null, seq__15201_15207);
        if (temp__4126__auto___15219) {
          var seq__15201_15220__$1 = temp__4126__auto___15219;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15201_15220__$1)) {
            var c__4227__auto___15221 = cljs.core.chunk_first.call(null, seq__15201_15220__$1);
            var G__15222 = cljs.core.chunk_rest.call(null, seq__15201_15220__$1);
            var G__15223 = c__4227__auto___15221;
            var G__15224 = cljs.core.count.call(null, c__4227__auto___15221);
            var G__15225 = 0;
            seq__15201_15207 = G__15222;
            chunk__15202_15208 = G__15223;
            count__15203_15209 = G__15224;
            i__15204_15210 = G__15225;
            continue;
          } else {
            var vec__15206_15226 = cljs.core.first.call(null, seq__15201_15220__$1);
            var k_15227 = cljs.core.nth.call(null, vec__15206_15226, 0, null);
            var v_15228 = cljs.core.nth.call(null, vec__15206_15226, 1, null);
            var m15200_15229 = cljs.core.deref.call(null, m_atom__8678__auto__);
            cljs.core.reset_BANG_.call(null, m_atom__8678__auto__, cljs.core.assoc_BANG_.call(null, m15200_15229, typeof k_15227 === "string" ? cljs.core.keyword.call(null, k_15227) : k_15227, keywordize_map.call(null, v_15228)));
            var G__15230 = cljs.core.next.call(null, seq__15201_15220__$1);
            var G__15231 = null;
            var G__15232 = 0;
            var G__15233 = 0;
            seq__15201_15207 = G__15230;
            chunk__15202_15208 = G__15231;
            count__15203_15209 = G__15232;
            i__15204_15210 = G__15233;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.persistent_BANG_.call(null, cljs.core.deref.call(null, m_atom__8678__auto__));
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.map.call(null, keywordize_map, x);
    } else {
      if (cljs.core.vector_QMARK_.call(null, x)) {
        return cljs.core.mapv.call(null, keywordize_map, x);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return x;
        } else {
          return null;
        }
      }
    }
  }
};
plumbing.core.safe_get = function safe_get(m, k) {
  var temp__4124__auto__ = cljs.core.find.call(null, m, k);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var pair__8747__auto__ = temp__4124__auto__;
    return cljs.core.val.call(null, pair__8747__auto__);
  } else {
    var e = schema.utils.format_STAR_.call(null, "Key %s not found in %s", k, cljs.core.mapv.call(null, cljs.core.key, m));
    throw new Error(e);
  }
};
plumbing.core.safe_get_in = function safe_get_in(m, ks) {
  while (true) {
    if (cljs.core.seq.call(null, ks)) {
      var G__15234 = plumbing.core.safe_get.call(null, m, cljs.core.first.call(null, ks));
      var G__15235 = cljs.core.next.call(null, ks);
      m = G__15234;
      ks = G__15235;
      continue;
    } else {
      return m;
    }
    break;
  }
};
plumbing.core.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__3479__auto__ = m;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__4196__auto__ = function iter__15244(s__15245) {
        return new cljs.core.LazySeq(null, function() {
          var s__15245__$1 = s__15245;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__15245__$1);
            if (temp__4126__auto__) {
              var s__15245__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15245__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__15245__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__15247 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__15246 = 0;
                  while (true) {
                    if (i__15246 < size__4195__auto__) {
                      var vec__15250 = cljs.core._nth.call(null, c__4194__auto__, i__15246);
                      var k = cljs.core.nth.call(null, vec__15250, 0, null);
                      var v = cljs.core.nth.call(null, vec__15250, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__15247, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__15252 = i__15246 + 1;
                        i__15246 = G__15252;
                        continue;
                      } else {
                        var G__15253 = i__15246 + 1;
                        i__15246 = G__15253;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15247), iter__15244.call(null, cljs.core.chunk_rest.call(null, s__15245__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15247), null);
                }
              } else {
                var vec__15251 = cljs.core.first.call(null, s__15245__$2);
                var k = cljs.core.nth.call(null, vec__15251, 0, null);
                var v = cljs.core.nth.call(null, vec__15251, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__15244.call(null, cljs.core.rest.call(null, s__15245__$2)));
                } else {
                  var G__15254 = cljs.core.rest.call(null, s__15245__$2);
                  s__15245__$1 = G__15254;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__4196__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__15255) {
    var m = cljs.core.first(arglist__15255);
    var kvs = cljs.core.rest(arglist__15255);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
plumbing.core.update_in_when = function() {
  var update_in_when__delegate = function(m, key_seq, f, args) {
    var found = cljs.core.get_in.call(null, m, key_seq, plumbing.core._PLUS_none_PLUS_);
    if (!(plumbing.core._PLUS_none_PLUS_ === found)) {
      return cljs.core.assoc_in.call(null, m, key_seq, cljs.core.apply.call(null, f, found, args));
    } else {
      return m;
    }
  };
  var update_in_when = function(m, key_seq, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return update_in_when__delegate.call(this, m, key_seq, f, args);
  };
  update_in_when.cljs$lang$maxFixedArity = 3;
  update_in_when.cljs$lang$applyTo = function(arglist__15256) {
    var m = cljs.core.first(arglist__15256);
    arglist__15256 = cljs.core.next(arglist__15256);
    var key_seq = cljs.core.first(arglist__15256);
    arglist__15256 = cljs.core.next(arglist__15256);
    var f = cljs.core.first(arglist__15256);
    var args = cljs.core.rest(arglist__15256);
    return update_in_when__delegate(m, key_seq, f, args);
  };
  update_in_when.cljs$core$IFn$_invoke$arity$variadic = update_in_when__delegate;
  return update_in_when;
}();
plumbing.core.grouped_map = function grouped_map(key_fn, map_fn, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = key_fn.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), map_fn.call(null, x)));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
plumbing.core.aconcat = function aconcat(s) {
  return cljs.core.concat.call(null, new cljs.core.LazySeq(null, function() {
    return cljs.core.first.call(null, s);
  }, null, null), new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.next.call(null, s);
    if (temp__4126__auto__) {
      var n = temp__4126__auto__;
      return aconcat.call(null, n);
    } else {
      return null;
    }
  }, null, null));
};
plumbing.core.unchunk = function unchunk(s) {
  if (cljs.core.seq.call(null, s)) {
    return cljs.core.cons.call(null, cljs.core.first.call(null, s), new cljs.core.LazySeq(null, function() {
      return unchunk.call(null, cljs.core.rest.call(null, s));
    }, null, null));
  } else {
    return null;
  }
};
plumbing.core.sum = function() {
  var sum = null;
  var sum__1 = function(xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, xs);
  };
  var sum__2 = function(f, xs) {
    return cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, f, xs));
  };
  sum = function(f, xs) {
    switch(arguments.length) {
      case 1:
        return sum__1.call(this, f);
      case 2:
        return sum__2.call(this, f, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sum.cljs$core$IFn$_invoke$arity$1 = sum__1;
  sum.cljs$core$IFn$_invoke$arity$2 = sum__2;
  return sum;
}();
plumbing.core.singleton = function singleton(xs) {
  var temp__4126__auto__ = cljs.core.seq.call(null, xs);
  if (temp__4126__auto__) {
    var xs__$1 = temp__4126__auto__;
    if (cljs.core.next.call(null, xs__$1)) {
      return null;
    } else {
      return cljs.core.first.call(null, xs__$1);
    }
  } else {
    return null;
  }
};
plumbing.core.indexed = function indexed(s) {
  return cljs.core.map_indexed.call(null, cljs.core.vector, s);
};
plumbing.core.positions = function positions(f, s) {
  return cljs.core.keep_indexed.call(null, function(i, x) {
    if (cljs.core.truth_(f.call(null, x))) {
      return i;
    } else {
      return null;
    }
  }, s);
};
plumbing.core.distinct_by = function distinct_by(f, xs) {
  var s = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
  var iter__4196__auto__ = function(s) {
    return function iter__15261(s__15262) {
      return new cljs.core.LazySeq(null, function(s) {
        return function() {
          var s__15262__$1 = s__15262;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__15262__$1);
            if (temp__4126__auto__) {
              var s__15262__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__15262__$2)) {
                var c__4194__auto__ = cljs.core.chunk_first.call(null, s__15262__$2);
                var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                var b__15264 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                if (function() {
                  var i__15263 = 0;
                  while (true) {
                    if (i__15263 < size__4195__auto__) {
                      var x = cljs.core._nth.call(null, c__4194__auto__, i__15263);
                      var id = f.call(null, x);
                      if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                        cljs.core.chunk_append.call(null, b__15264, function() {
                          cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                          return x;
                        }());
                        var G__15265 = i__15263 + 1;
                        i__15263 = G__15265;
                        continue;
                      } else {
                        var G__15266 = i__15263 + 1;
                        i__15263 = G__15266;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15264), iter__15261.call(null, cljs.core.chunk_rest.call(null, s__15262__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15264), null);
                }
              } else {
                var x = cljs.core.first.call(null, s__15262__$2);
                var id = f.call(null, x);
                if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, s), id)) {
                  return cljs.core.cons.call(null, function() {
                    cljs.core.swap_BANG_.call(null, s, cljs.core.conj, id);
                    return x;
                  }(), iter__15261.call(null, cljs.core.rest.call(null, s__15262__$2)));
                } else {
                  var G__15267 = cljs.core.rest.call(null, s__15262__$2);
                  s__15262__$1 = G__15267;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(s), null, null);
    };
  }(s);
  return iter__4196__auto__.call(null, xs);
};
plumbing.core.interleave_all = function() {
  var interleave_all__delegate = function(colls) {
    return new cljs.core.LazySeq(null, function() {
      return function helper(seqs) {
        if (cljs.core.seq.call(null, seqs)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, seqs), new cljs.core.LazySeq(null, function() {
            return helper.call(null, cljs.core.keep.call(null, cljs.core.next, seqs));
          }, null, null));
        } else {
          return null;
        }
      }.call(null, cljs.core.keep.call(null, cljs.core.seq, colls));
    }, null, null);
  };
  var interleave_all = function(var_args) {
    var colls = null;
    if (arguments.length > 0) {
      colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return interleave_all__delegate.call(this, colls);
  };
  interleave_all.cljs$lang$maxFixedArity = 0;
  interleave_all.cljs$lang$applyTo = function(arglist__15268) {
    var colls = cljs.core.seq(arglist__15268);
    return interleave_all__delegate(colls);
  };
  interleave_all.cljs$core$IFn$_invoke$arity$variadic = interleave_all__delegate;
  return interleave_all;
}();
plumbing.core.count_when = function count_when(pred, xs) {
  return cljs.core.count.call(null, cljs.core.filter.call(null, pred, xs));
};
plumbing.core.conj_when = function() {
  var conj_when = null;
  var conj_when__2 = function(coll, x) {
    if (cljs.core.truth_(x)) {
      return cljs.core.conj.call(null, coll, x);
    } else {
      return coll;
    }
  };
  var conj_when__3 = function() {
    var G__15269__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__15270 = conj_when.call(null, coll, x);
          var G__15271 = cljs.core.first.call(null, xs);
          var G__15272 = cljs.core.next.call(null, xs);
          coll = G__15270;
          x = G__15271;
          xs = G__15272;
          continue;
        } else {
          return conj_when.call(null, coll, x);
        }
        break;
      }
    };
    var G__15269 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15269__delegate.call(this, coll, x, xs);
    };
    G__15269.cljs$lang$maxFixedArity = 2;
    G__15269.cljs$lang$applyTo = function(arglist__15273) {
      var coll = cljs.core.first(arglist__15273);
      arglist__15273 = cljs.core.next(arglist__15273);
      var x = cljs.core.first(arglist__15273);
      var xs = cljs.core.rest(arglist__15273);
      return G__15269__delegate(coll, x, xs);
    };
    G__15269.cljs$core$IFn$_invoke$arity$variadic = G__15269__delegate;
    return G__15269;
  }();
  conj_when = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj_when__2.call(this, coll, x);
      default:
        return conj_when__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_when.cljs$lang$maxFixedArity = 2;
  conj_when.cljs$lang$applyTo = conj_when__3.cljs$lang$applyTo;
  conj_when.cljs$core$IFn$_invoke$arity$2 = conj_when__2;
  conj_when.cljs$core$IFn$_invoke$arity$variadic = conj_when__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_when;
}();
plumbing.core.cons_when = function cons_when(x, s) {
  if (cljs.core.truth_(x)) {
    return cljs.core.cons.call(null, x, s);
  } else {
    return s;
  }
};
plumbing.core.rsort_by = cljs.core.comp.call(null, cljs.core.reverse, cljs.core.sort_by);
plumbing.core.swap_pair_BANG_ = function() {
  var swap_pair_BANG_ = null;
  var swap_pair_BANG___2 = function(a, f) {
    while (true) {
      var old_val = cljs.core.deref.call(null, a);
      var new_val = f.call(null, old_val);
      if (cljs.core.compare_and_set_BANG_.call(null, a, old_val, new_val)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_val, new_val], null);
      } else {
        continue;
      }
      break;
    }
  };
  var swap_pair_BANG___3 = function() {
    var G__15275__delegate = function(a, f, args) {
      return swap_pair_BANG_.call(null, a, function(p1__15274_SHARP_) {
        return cljs.core.apply.call(null, f, p1__15274_SHARP_, args);
      });
    };
    var G__15275 = function(a, f, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15275__delegate.call(this, a, f, args);
    };
    G__15275.cljs$lang$maxFixedArity = 2;
    G__15275.cljs$lang$applyTo = function(arglist__15276) {
      var a = cljs.core.first(arglist__15276);
      arglist__15276 = cljs.core.next(arglist__15276);
      var f = cljs.core.first(arglist__15276);
      var args = cljs.core.rest(arglist__15276);
      return G__15275__delegate(a, f, args);
    };
    G__15275.cljs$core$IFn$_invoke$arity$variadic = G__15275__delegate;
    return G__15275;
  }();
  swap_pair_BANG_ = function(a, f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return swap_pair_BANG___2.call(this, a, f);
      default:
        return swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic(a, f, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_pair_BANG_.cljs$lang$maxFixedArity = 2;
  swap_pair_BANG_.cljs$lang$applyTo = swap_pair_BANG___3.cljs$lang$applyTo;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_pair_BANG___2;
  swap_pair_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_pair_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return swap_pair_BANG_;
}();
plumbing.core.get_and_set_BANG_ = function get_and_set_BANG_(a, new_val) {
  return cljs.core.first.call(null, plumbing.core.swap_pair_BANG_.call(null, a, cljs.core.constantly.call(null, new_val)));
};
plumbing.core.millis = function millis() {
  return(new Date).getTime();
};
plumbing.core.mapply = function() {
  var mapply = null;
  var mapply__2 = function(f, m) {
    return cljs.core.apply.call(null, f, cljs.core.apply.call(null, cljs.core.concat, m));
  };
  var mapply__3 = function() {
    var G__15277__delegate = function(f, arg, args) {
      return cljs.core.apply.call(null, f, arg, cljs.core.concat.call(null, cljs.core.butlast.call(null, args), cljs.core.apply.call(null, cljs.core.concat, cljs.core.last.call(null, args))));
    };
    var G__15277 = function(f, arg, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__15277__delegate.call(this, f, arg, args);
    };
    G__15277.cljs$lang$maxFixedArity = 2;
    G__15277.cljs$lang$applyTo = function(arglist__15278) {
      var f = cljs.core.first(arglist__15278);
      arglist__15278 = cljs.core.next(arglist__15278);
      var arg = cljs.core.first(arglist__15278);
      var args = cljs.core.rest(arglist__15278);
      return G__15277__delegate(f, arg, args);
    };
    G__15277.cljs$core$IFn$_invoke$arity$variadic = G__15277__delegate;
    return G__15277;
  }();
  mapply = function(f, arg, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return mapply__2.call(this, f, arg);
      default:
        return mapply__3.cljs$core$IFn$_invoke$arity$variadic(f, arg, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapply.cljs$lang$maxFixedArity = 2;
  mapply.cljs$lang$applyTo = mapply__3.cljs$lang$applyTo;
  mapply.cljs$core$IFn$_invoke$arity$2 = mapply__2;
  mapply.cljs$core$IFn$_invoke$arity$variadic = mapply__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapply;
}();
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("om.dom");
goog.require("om.dom");
om.core._STAR_read_enabled_STAR_ = false;
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core.IDisplayName = function() {
  var obj18984 = {};
  return obj18984;
}();
om.core.display_name = function display_name(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.display_name[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.display_name["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj18986 = {};
  return obj18986;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.init_state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.init_state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj18988 = {};
  return obj18988;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.should_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.should_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj18990 = {};
  return obj18990;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_mount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_mount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj18992 = {};
  return obj18992;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.did_mount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.did_mount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj18994 = {};
  return obj18994;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_unmount[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_unmount["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj18996 = {};
  return obj18996;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj18998 = {};
  return obj18998;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.did_update[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.did_update["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj19000 = {};
  return obj19000;
}();
om.core.will_receive_props = function will_receive_props(this$, next_props) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.will_receive_props[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.will_receive_props["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj19002 = {};
  return obj19002;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.render[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.render["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderState = function() {
  var obj19004 = {};
  return obj19004;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core.render_state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core.render_state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.IOmSwap = function() {
  var obj19006 = {};
  return obj19006;
}();
om.core._om_swap_BANG_ = function _om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj19008 = {};
  return obj19008;
}();
om.core._get_state = function() {
  var _get_state = null;
  var _get_state__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_state__2 = function(this$, ks) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_state__1.call(this, this$);
      case 2:
        return _get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_state.cljs$core$IFn$_invoke$arity$1 = _get_state__1;
  _get_state.cljs$core$IFn$_invoke$arity$2 = _get_state__2;
  return _get_state;
}();
om.core.IGetRenderState = function() {
  var obj19010 = {};
  return obj19010;
}();
om.core._get_render_state = function() {
  var _get_render_state = null;
  var _get_render_state__1 = function(this$) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_render_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_render_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._get_render_state[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._get_render_state["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_render_state__1.call(this, this$);
      case 2:
        return _get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_render_state.cljs$core$IFn$_invoke$arity$1 = _get_render_state__1;
  _get_render_state.cljs$core$IFn$_invoke$arity$2 = _get_render_state__2;
  return _get_render_state;
}();
om.core.ISetState = function() {
  var obj19012 = {};
  return obj19012;
}();
om.core._set_state_BANG_ = function() {
  var _set_state_BANG_ = null;
  var _set_state_BANG___2 = function(this$, val) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$2(this$, val);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val);
    }
  };
  var _set_state_BANG___3 = function(this$, ks, val) {
    if (function() {
      var and__3467__auto__ = this$;
      if (and__3467__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, ks, val);
    } else {
      var x__4106__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3479__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val);
    }
  };
  _set_state_BANG_ = function(this$, ks, val) {
    switch(arguments.length) {
      case 2:
        return _set_state_BANG___2.call(this, this$, ks);
      case 3:
        return _set_state_BANG___3.call(this, this$, ks, val);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = _set_state_BANG___2;
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = _set_state_BANG___3;
  return _set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj19014 = {};
  return obj19014;
}();
om.core._get_queue = function _get_queue(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._get_queue[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._get_queue["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function _queue_render_BANG_(this$, c) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function _empty_queue_BANG_(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj19016 = {};
  return obj19016;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._value[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._value["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj19018 = {};
  return obj19018;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._path[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._path["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._state[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._state["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj19020 = {};
  return obj19020;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3467__auto__ = value;
      if (and__3467__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4106__auto__ = value == null ? null : value;
      return function() {
        var or__3479__auto__ = om.core._to_cursor[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._to_cursor["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3467__auto__ = value;
      if (and__3467__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4106__auto__ = value == null ? null : value;
      return function() {
        var or__3479__auto__ = om.core._to_cursor[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = om.core._to_cursor["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj19022 = {};
  return obj19022;
}();
om.core._derive = function _derive(cursor, derived, state, path) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._derive[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._derive["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj19024 = {};
  return obj19024;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__3467__auto__ = cursor;
    if (and__3467__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4106__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3479__auto__ = om.core._transact_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj19026 = {};
  return obj19026;
}();
om.core._listen_BANG_ = function _listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._listen_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._listen_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function _unlisten_BANG_(x, key) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function _notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__3467__auto__ = x;
    if (and__3467__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4106__auto__ = x == null ? null : x;
    return function() {
      var or__3479__auto__ = om.core._notify_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om.core._notify_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.transact_STAR_ = function transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__19028 = state;
    if (G__19028) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19028.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__19028.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__19028);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__19028);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f) : null;
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", 3145885106))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", 1017337751), path, new cljs.core.Keyword(null, "old-value", "old-value", 1451216317), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 3626601078), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1449001181), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    3624385942), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__19030 = x;
  if (G__19030) {
    var bit__4129__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3479__auto__ = bit__4129__auto__;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return G__19030.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__19030.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__19030);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__19030);
  }
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.fn_QMARK_.call(null, c)) {
    return node.props.children = function() {
      var _STAR_read_enabled_STAR_19032 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        return c.call(null, node);
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19032;
      }
    }();
  } else {
    return c;
  }
};
om.core.get_props = function get_props(x) {
  return x.props["__om_cursor"];
};
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    return om.core._get_state.call(null, owner);
  };
  var get_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
        } else {
          return null;
        }
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4126__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var pending_state = temp__4126__auto__;
    var G__19034 = state;
    G__19034["__om_prev_state"] = state["__om_state"];
    G__19034["__om_state"] = pending_state;
    G__19034["__om_pending_state"] = null;
    return G__19034;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3479__auto__ = props;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4126__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4126__auto__)) {
      var props_state = temp__4126__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3479__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", 4103164189), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 4147620643), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 2122862542), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 3193956709), new cljs.core.Keyword(null, "render", "render", 4374279432), new cljs.core.Keyword(null, 
"componentWillUpdate", "componentWillUpdate", 2086388618), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 2219830677), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 3877103209), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 2087784617), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", 3257856604)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__19035 = c;
    if (G__19035) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19035.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__19035.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__19035);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__19035);
    }
  }()) {
    var state_19062 = this$.state;
    var _STAR_read_enabled_STAR_19036_19063 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.did_update.call(null, c, om.core.get_props.call(null, {"props":prev_props}), function() {
        var or__3479__auto__ = state_19062["__om_prev_state"];
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return state_19062["__om_state"];
        }
      }());
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19036_19063;
    }
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__19037 = c;
    if (G__19037) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19037.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__19037.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__19037);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__19037);
    }
  }()) {
    var _STAR_read_enabled_STAR_19038 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_unmount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19038;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__19039 = c;
    if (G__19039) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19039.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__19039.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__19039);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__19039);
    }
  }()) {
    var _STAR_read_enabled_STAR_19040 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"props":next_props}));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19040;
    }
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var _STAR_read_enabled_STAR_19041 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    var props = this$.props;
    var state = this$.state;
    var c = om.core.children.call(null, this$);
    om.core.merge_props_state.call(null, this$, next_props);
    if (function() {
      var G__19042 = c;
      if (G__19042) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__19042.om$core$IShouldUpdate$;
          }
        }())) {
          return true;
        } else {
          if (!G__19042.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__19042);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__19042);
      }
    }()) {
      return om.core.should_update.call(null, c, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } else {
      if (cljs.core.not_EQ_.call(null, om.core._value.call(null, props["__om_cursor"]), om.core._value.call(null, next_props["__om_cursor"]))) {
        return true;
      } else {
        if (!(state["__om_pending_state"] == null)) {
          return true;
        } else {
          if (!(props["__om_index"] === next_props["__om_index"])) {
            return true;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19041;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_read_enabled_STAR_19043 = om.core._STAR_read_enabled_STAR_;
  try {
    om.core._STAR_read_enabled_STAR_ = true;
    if (function() {
      var G__19044 = c;
      if (G__19044) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__19044.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__19044.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__19044);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__19044);
      }
    }()) {
      var _STAR_parent_STAR_19045 = om.core._STAR_parent_STAR_;
      var _STAR_state_STAR_19046 = om.core._STAR_state_STAR_;
      var _STAR_instrument_STAR_19047 = om.core._STAR_instrument_STAR_;
      try {
        om.core._STAR_parent_STAR_ = this$;
        om.core._STAR_state_STAR_ = props["__om_app_state"];
        om.core._STAR_instrument_STAR_ = props["__om_instrument"];
        return om.core.render.call(null, c);
      } finally {
        om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_19047;
        om.core._STAR_state_STAR_ = _STAR_state_STAR_19046;
        om.core._STAR_parent_STAR_ = _STAR_parent_STAR_19045;
      }
    } else {
      if (function() {
        var G__19048 = c;
        if (G__19048) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__19048.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__19048.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__19048);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__19048);
        }
      }()) {
        var _STAR_parent_STAR_19049 = om.core._STAR_parent_STAR_;
        var _STAR_state_STAR_19050 = om.core._STAR_state_STAR_;
        var _STAR_instrument_STAR_19051 = om.core._STAR_instrument_STAR_;
        try {
          om.core._STAR_parent_STAR_ = this$;
          om.core._STAR_state_STAR_ = props["__om_app_state"];
          om.core._STAR_instrument_STAR_ = props["__om_instrument"];
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } finally {
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_19051;
          om.core._STAR_state_STAR_ = _STAR_state_STAR_19050;
          om.core._STAR_parent_STAR_ = _STAR_parent_STAR_19049;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return c;
        } else {
          return null;
        }
      }
    }
  } finally {
    om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19043;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_19064 = om.core.children.call(null, this$);
  if (function() {
    var G__19052 = c_19064;
    if (G__19052) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19052.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__19052.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__19052);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__19052);
    }
  }()) {
    var state_19065 = this$.state;
    var _STAR_read_enabled_STAR_19053_19066 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_update.call(null, c_19064, om.core.get_props.call(null, {"props":next_props}), om.core._get_state.call(null, this$));
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19053_19066;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3479__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 2663181321)), function() {
    var G__19054 = c;
    if (G__19054) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19054.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__19054.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__19054);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__19054);
    }
  }() ? function() {
    var _STAR_read_enabled_STAR_19055 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.init_state.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19055;
    }
  }() : null), "__om_id":function() {
    var or__3479__auto__ = id;
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__19056 = c;
    if (G__19056) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19056.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__19056.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__19056);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__19056);
    }
  }()) {
    var _STAR_read_enabled_STAR_19057 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.did_mount.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19057;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__19058 = c;
    if (G__19058) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19058.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__19058.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__19058);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__19058);
    }
  }()) {
    var _STAR_read_enabled_STAR_19059 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      return om.core.display_name.call(null, c);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19059;
    }
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_19067 = om.core.children.call(null, this$);
  if (function() {
    var G__19060 = c_19067;
    if (G__19060) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19060.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__19060.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__19060);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__19060);
    }
  }()) {
    var _STAR_read_enabled_STAR_19061_19068 = om.core._STAR_read_enabled_STAR_;
    try {
      om.core._STAR_read_enabled_STAR_ = true;
      om.core.will_mount.call(null, c_19067);
    } finally {
      om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19061_19068;
    }
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function specify_state_methods_BANG_(obj) {
  var x19072 = obj;
  x19072.om$core$IGetState$ = true;
  x19072.om$core$IGetState$_get_state$arity$1 = function(x19072) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__3479__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x19072);
  x19072.om$core$IGetState$_get_state$arity$2 = function(x19072) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x19072);
  x19072.om$core$IGetRenderState$ = true;
  x19072.om$core$IGetRenderState$_get_render_state$arity$1 = function(x19072) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x19072);
  x19072.om$core$IGetRenderState$_get_render_state$arity$2 = function(x19072) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x19072);
  x19072.om$core$ISetState$ = true;
  x19072.om$core$ISetState$_set_state_BANG_$arity$2 = function(x19072) {
    return function(this$, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_19073 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        var app_state = props["__om_app_state"];
        this$__$1.state["__om_pending_state"] = val;
        if (app_state == null) {
          return null;
        } else {
          return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
        }
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19073;
      }
    };
  }(x19072);
  x19072.om$core$ISetState$_set_state_BANG_$arity$3 = function(x19072) {
    return function(this$, ks, val) {
      var this$__$1 = this;
      var _STAR_read_enabled_STAR_19074 = om.core._STAR_read_enabled_STAR_;
      try {
        om.core._STAR_read_enabled_STAR_ = true;
        var props = this$__$1.props;
        var state = this$__$1.state;
        var pstate = om.core._get_state.call(null, this$__$1);
        var app_state = props["__om_app_state"];
        state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
        if (app_state == null) {
          return null;
        } else {
          return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
        }
      } finally {
        om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19074;
      }
    };
  }(x19072);
  return x19072;
};
om.core.Pure = React.createClass(om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods)));
om.core.pure = function pure(obj) {
  return new om.core.Pure(obj);
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2158397195;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "om.core/MapCursor");
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    var v = cljs.core._lookup.call(null, self__.value, k, not_found);
    if (!cljs.core._EQ_.call(null, v, not_found)) {
      return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(p__19076) {
          var vec__19077 = p__19076;
          var k = cljs.core.nth.call(null, vec__19077, 0, null);
          var v = cljs.core.nth.call(null, vec__19077, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
        };
      }(this$__$1), self__.value);
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.MapCursor.prototype.call = function() {
  var G__19078 = null;
  var G__19078__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19078__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19078 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19078__2.call(this, self__, k);
      case 3:
        return G__19078__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19078;
}();
om.core.MapCursor.prototype.apply = function(self__, args19075) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args19075)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2175181595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "om.core/IndexedCursor");
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, null);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._nth.call(null, this$__$1, n, not_found);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (n < cljs.core._count.call(null, self__.value)) {
      return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
    } else {
      return not_found;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._pr_writer.call(null, self__.value, writer, opts);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core.meta.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._count.call(null, self__.value);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (om.core.cursor_QMARK_.call(null, other)) {
      return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
    } else {
      return cljs.core._EQ_.call(null, self__.value, other);
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    if (cljs.core.count.call(null, self__.value) > 0) {
      return cljs.core.map.call(null, function(this$__$1) {
        return function(v, i) {
          return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
        };
      }(this$__$1), self__.value, cljs.core.range.call(null));
    } else {
      return null;
    }
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  if (om.core._STAR_read_enabled_STAR_) {
    return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
  }
};
om.core.IndexedCursor.prototype.call = function() {
  var G__19080 = null;
  var G__19080__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19080__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19080 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19080__2.call(this, self__, k);
      case 3:
        return G__19080__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19080;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args19079) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args19079)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!om.core._STAR_read_enabled_STAR_) {
    return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path);
  } else {
    throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
  }
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x19082 = cljs.core.clone.call(null, val);
  x19082.cljs$core$IEquiv$ = true;
  x19082.cljs$core$IEquiv$_equiv$arity$2 = function(x19082) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core._STAR_read_enabled_STAR_) {
        if (om.core.cursor_QMARK_.call(null, other)) {
          return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
        } else {
          return cljs.core._EQ_.call(null, val, other);
        }
      } else {
        throw new Error([cljs.core.str("Cannot manipulate cursor outside of render phase, only "), cljs.core.str("om.core/transact!, om.core/update!, and cljs.core/deref operations allowed")].join(""));
      }
    };
  }(x19082);
  x19082.om$core$ITransact$ = true;
  x19082.om$core$ITransact$_transact_BANG_$arity$4 = function(x19082) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x19082);
  x19082.om$core$ICursor$ = true;
  x19082.om$core$ICursor$_path$arity$1 = function(x19082) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x19082);
  x19082.om$core$ICursor$_state$arity$1 = function(x19082) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x19082);
  x19082.cljs$core$IDeref$ = true;
  x19082.cljs$core$IDeref$_deref$arity$1 = function(x19082) {
    return function(this$) {
      var this$__$1 = this;
      if (!om.core._STAR_read_enabled_STAR_) {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path);
      } else {
        throw new Error([cljs.core.str("Cannot deref cursor during render phase: "), cljs.core.str(this$__$1)].join(""));
      }
    };
  }(x19082);
  return x19082;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__19085 = val;
        if (G__19085) {
          var bit__4129__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3479__auto__ = bit__4129__auto__;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return G__19085.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__19085.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__19085);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__19085);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__19086 = val;
              if (G__19086) {
                var bit__4129__auto__ = G__19086.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4129__auto__ || G__19086.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__19086.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__19086);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__19086);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return val;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.render_all = function render_all() {
  om.core.refresh_queued = false;
  var seq__19091 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__19092 = null;
  var count__19093 = 0;
  var i__19094 = 0;
  while (true) {
    if (i__19094 < count__19093) {
      var f = cljs.core._nth.call(null, chunk__19092, i__19094);
      f.call(null);
      var G__19095 = seq__19091;
      var G__19096 = chunk__19092;
      var G__19097 = count__19093;
      var G__19098 = i__19094 + 1;
      seq__19091 = G__19095;
      chunk__19092 = G__19096;
      count__19093 = G__19097;
      i__19094 = G__19098;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__19091);
      if (temp__4126__auto__) {
        var seq__19091__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19091__$1)) {
          var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__19091__$1);
          var G__19099 = cljs.core.chunk_rest.call(null, seq__19091__$1);
          var G__19100 = c__4227__auto__;
          var G__19101 = cljs.core.count.call(null, c__4227__auto__);
          var G__19102 = 0;
          seq__19091 = G__19099;
          chunk__19092 = G__19100;
          count__19093 = G__19101;
          i__19094 = G__19102;
          continue;
        } else {
          var f = cljs.core.first.call(null, seq__19091__$1);
          f.call(null);
          var G__19103 = cljs.core.next.call(null, seq__19091__$1);
          var G__19104 = null;
          var G__19105 = 0;
          var G__19106 = 0;
          seq__19091 = G__19103;
          chunk__19092 = G__19104;
          count__19093 = G__19105;
          i__19094 = G__19106;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_QMARK_ = function valid_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null, "ctor", "ctor", 1016968582), null, new cljs.core.Keyword(null, "fn", "fn", 1013907514), null, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865), null, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563), null, new cljs.core.Keyword(null, "key", "key", 1014010321), null, new cljs.core.Keyword(null, "init-state", "init-state", 
  4479067398), null, new cljs.core.Keyword(null, "state", "state", 1123661827), null, new cljs.core.Keyword(null, "opts", "opts", 1017322386), null, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), null, new cljs.core.Keyword(null, "shared", "shared", 4405305303), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function id(owner) {
  return owner.state["__om_id"];
};
om.core.build_STAR_ = function() {
  var build_STAR_ = null;
  var build_STAR___2 = function(f, cursor) {
    return build_STAR_.call(null, f, cursor, null);
  };
  var build_STAR___3 = function(f, cursor, m) {
    if (om.core.valid_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid?", "valid?", 1830611324, null), new cljs.core.Symbol(null, "m", "m", -1640531418, null))))].join(""));
    }
    if (m == null) {
      var shared = function() {
        var or__3479__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = function() {
        var or__3479__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return om.core.pure;
        }
      }();
      var pure__6341__auto__ = ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var _STAR_read_enabled_STAR_19111 = om.core._STAR_read_enabled_STAR_;
          try {
            om.core._STAR_read_enabled_STAR_ = true;
            return f.call(null, cursor, this$);
          } finally {
            om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19111;
          }
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_shared":shared, "__om_cursor":cursor});
      pure__6341__auto__.constructor = goog.getUid(f);
      return pure__6341__auto__;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var map__19112 = m;
        var map__19112__$1 = cljs.core.seq_QMARK_.call(null, map__19112) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19112) : map__19112;
        var opts = cljs.core.get.call(null, map__19112__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
        var init_state = cljs.core.get.call(null, map__19112__$1, new cljs.core.Keyword(null, "init-state", "init-state", 4479067398));
        var state = cljs.core.get.call(null, map__19112__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
        var key = cljs.core.get.call(null, map__19112__$1, new cljs.core.Keyword(null, "key", "key", 1014010321));
        var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", 1013907514));
        var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
          var temp__4124__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var i = temp__4124__auto__;
            return dataf.call(null, cursor, i);
          } else {
            return dataf.call(null, cursor);
          }
        }() : cursor;
        var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 4184082563));
        var shared = function() {
          var or__3479__auto__ = (new cljs.core.Keyword(null, "shared", "shared", 4405305303)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
          }
        }();
        var ctor = function() {
          var or__3479__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1016968582)).cljs$core$IFn$_invoke$arity$1(m);
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return om.core.pure;
          }
        }();
        var pure__6341__auto__ = ctor.call(null, {"__om_shared":shared, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514)).cljs$core$IFn$_invoke$arity$1(m), "__om_cursor":cursor_SINGLEQUOTE_, "__om_app_state":om.core._STAR_state_STAR_, "key":rkey, "__om_init_state":init_state, "children":opts == null ? function(map__19112, map__19112__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_19113 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19113;
            }
          };
        }(map__19112, map__19112__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__19112, map__19112__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
          return function(this$) {
            var _STAR_read_enabled_STAR_19114 = om.core._STAR_read_enabled_STAR_;
            try {
              om.core._STAR_read_enabled_STAR_ = true;
              return f.call(null, cursor_SINGLEQUOTE_, this$, opts);
            } finally {
              om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19114;
            }
          };
        }(map__19112, map__19112__$1, opts, init_state, state, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_state":state});
        pure__6341__auto__.constructor = goog.getUid(f);
        return pure__6341__auto__;
      } else {
        return null;
      }
    }
  };
  build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build_STAR___2.call(this, f, cursor);
      case 3:
        return build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_STAR_.cljs$core$IFn$_invoke$arity$2 = build_STAR___2;
  build_STAR_.cljs$core$IFn$_invoke$arity$3 = build_STAR___3;
  return build_STAR_;
}();
om.core.build = function() {
  var build = null;
  var build__2 = function(f, cursor) {
    return build.call(null, f, cursor, null);
  };
  var build__3 = function(f, cursor, m) {
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = function() {
        var _STAR_read_enabled_STAR_19116 = om.core._STAR_read_enabled_STAR_;
        try {
          om.core._STAR_read_enabled_STAR_ = true;
          return om.core._STAR_instrument_STAR_.call(null, f, cursor, m);
        } finally {
          om.core._STAR_read_enabled_STAR_ = _STAR_read_enabled_STAR_19116;
        }
      }();
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", 2667619603))) {
        return om.core.build_STAR_.call(null, f, cursor, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, cursor, m);
    }
  };
  build = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, cursor);
      case 3:
        return build__3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", 3166146514), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.setup = function setup(state, key, tx_listen) {
  if (function() {
    var G__19125 = state;
    if (G__19125) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19125.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__19125.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__19125);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__19125);
    }
  }()) {
  } else {
    var listeners_19133 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_19134 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x19126_19135 = state;
    x19126_19135.om$core$IRenderQueue$ = true;
    x19126_19135.om$core$IRenderQueue$_get_queue$arity$1 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_19134);
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
    x19126_19135.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_19134), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_19134, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
    x19126_19135.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_19134, cljs.core.empty);
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
    x19126_19135.om$core$INotify$ = true;
    x19126_19135.om$core$INotify$_listen_BANG_$arity$3 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_19133, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
    x19126_19135.om$core$INotify$_unlisten_BANG_$arity$2 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_19133, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
    x19126_19135.om$core$INotify$_notify_BANG_$arity$3 = function(x19126_19135, listeners_19133, render_queue_19134) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        if (tx_listen == null) {
        } else {
          var seq__19127_19136 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_19133));
          var chunk__19128_19137 = null;
          var count__19129_19138 = 0;
          var i__19130_19139 = 0;
          while (true) {
            if (i__19130_19139 < count__19129_19138) {
              var vec__19131_19140 = cljs.core._nth.call(null, chunk__19128_19137, i__19130_19139);
              var __19141 = cljs.core.nth.call(null, vec__19131_19140, 0, null);
              var f_19142 = cljs.core.nth.call(null, vec__19131_19140, 1, null);
              f_19142.call(null, tx_data, root_cursor);
              var G__19143 = seq__19127_19136;
              var G__19144 = chunk__19128_19137;
              var G__19145 = count__19129_19138;
              var G__19146 = i__19130_19139 + 1;
              seq__19127_19136 = G__19143;
              chunk__19128_19137 = G__19144;
              count__19129_19138 = G__19145;
              i__19130_19139 = G__19146;
              continue;
            } else {
              var temp__4126__auto___19147 = cljs.core.seq.call(null, seq__19127_19136);
              if (temp__4126__auto___19147) {
                var seq__19127_19148__$1 = temp__4126__auto___19147;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__19127_19148__$1)) {
                  var c__4227__auto___19149 = cljs.core.chunk_first.call(null, seq__19127_19148__$1);
                  var G__19150 = cljs.core.chunk_rest.call(null, seq__19127_19148__$1);
                  var G__19151 = c__4227__auto___19149;
                  var G__19152 = cljs.core.count.call(null, c__4227__auto___19149);
                  var G__19153 = 0;
                  seq__19127_19136 = G__19150;
                  chunk__19128_19137 = G__19151;
                  count__19129_19138 = G__19152;
                  i__19130_19139 = G__19153;
                  continue;
                } else {
                  var vec__19132_19154 = cljs.core.first.call(null, seq__19127_19148__$1);
                  var __19155 = cljs.core.nth.call(null, vec__19132_19154, 0, null);
                  var f_19156 = cljs.core.nth.call(null, vec__19132_19154, 1, null);
                  f_19156.call(null, tx_data, root_cursor);
                  var G__19157 = cljs.core.next.call(null, seq__19127_19148__$1);
                  var G__19158 = null;
                  var G__19159 = 0;
                  var G__19160 = 0;
                  seq__19127_19136 = G__19157;
                  chunk__19128_19137 = G__19158;
                  count__19129_19138 = G__19159;
                  i__19130_19139 = G__19160;
                  continue;
                }
              } else {
              }
            }
            break;
          }
        }
        return this$__$1;
      };
    }(x19126_19135, listeners_19133, render_queue_19134);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.root = function root(f, value, p__19161) {
  var map__19176 = p__19161;
  var map__19176__$1 = cljs.core.seq_QMARK_.call(null, map__19176) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19176) : map__19176;
  var options = map__19176__$1;
  var instrument = cljs.core.get.call(null, map__19176__$1, new cljs.core.Keyword(null, "instrument", "instrument", 2409387865));
  var path = cljs.core.get.call(null, map__19176__$1, new cljs.core.Keyword(null, "path", "path", 1017337751));
  var tx_listen = cljs.core.get.call(null, map__19176__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114));
  var target = cljs.core.get.call(null, map__19176__$1, new cljs.core.Keyword(null, "target", "target", 4427965699));
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "target", "target", 1773529930, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__19190 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__19190, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__19190, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__19177 = value;
    if (G__19177) {
      var bit__4129__auto__ = G__19177.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4129__auto__ || G__19177.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__19177.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__19177);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__19177);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 4427965699), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 666878114), new cljs.core.Keyword(null, "path", "path", 1017337751));
  var rootf = function(watch_key, state, state__$1, m, map__19176, map__19176__$1, options, instrument, path, tx_listen, target) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path);
      om.dom.render.call(null, function() {
        var _STAR_instrument_STAR_19184 = om.core._STAR_instrument_STAR_;
        var _STAR_state_STAR_19185 = om.core._STAR_state_STAR_;
        try {
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          return om.core.build.call(null, f, cursor, m);
        } finally {
          om.core._STAR_state_STAR_ = _STAR_state_STAR_19185;
          om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_19184;
        }
      }(), target);
      var queue = om.core._get_queue.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue)) {
        return null;
      } else {
        var seq__19186_19191 = cljs.core.seq.call(null, queue);
        var chunk__19187_19192 = null;
        var count__19188_19193 = 0;
        var i__19189_19194 = 0;
        while (true) {
          if (i__19189_19194 < count__19188_19193) {
            var c_19195 = cljs.core._nth.call(null, chunk__19187_19192, i__19189_19194);
            if (cljs.core.truth_(c_19195.isMounted())) {
              c_19195.forceUpdate();
            } else {
            }
            var G__19196 = seq__19186_19191;
            var G__19197 = chunk__19187_19192;
            var G__19198 = count__19188_19193;
            var G__19199 = i__19189_19194 + 1;
            seq__19186_19191 = G__19196;
            chunk__19187_19192 = G__19197;
            count__19188_19193 = G__19198;
            i__19189_19194 = G__19199;
            continue;
          } else {
            var temp__4126__auto___19200 = cljs.core.seq.call(null, seq__19186_19191);
            if (temp__4126__auto___19200) {
              var seq__19186_19201__$1 = temp__4126__auto___19200;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19186_19201__$1)) {
                var c__4227__auto___19202 = cljs.core.chunk_first.call(null, seq__19186_19201__$1);
                var G__19203 = cljs.core.chunk_rest.call(null, seq__19186_19201__$1);
                var G__19204 = c__4227__auto___19202;
                var G__19205 = cljs.core.count.call(null, c__4227__auto___19202);
                var G__19206 = 0;
                seq__19186_19191 = G__19203;
                chunk__19187_19192 = G__19204;
                count__19188_19193 = G__19205;
                i__19189_19194 = G__19206;
                continue;
              } else {
                var c_19207 = cljs.core.first.call(null, seq__19186_19201__$1);
                if (cljs.core.truth_(c_19207.isMounted())) {
                  c_19207.forceUpdate();
                } else {
                }
                var G__19208 = cljs.core.next.call(null, seq__19186_19201__$1);
                var G__19209 = null;
                var G__19210 = 0;
                var G__19211 = 0;
                seq__19186_19191 = G__19208;
                chunk__19187_19192 = G__19209;
                count__19188_19193 = G__19210;
                i__19189_19194 = G__19211;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return om.core._empty_queue_BANG_.call(null, state__$1);
      }
    };
  }(watch_key, state, state__$1, m, map__19176, map__19176__$1, options, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, m, rootf, map__19176, map__19176__$1, options, instrument, path, tx_listen, target) {
    return function(_, ___$1, ___$2, ___$3) {
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (typeof requestAnimationFrame !== "undefined") {
          return requestAnimationFrame(om.core.render_all);
        } else {
          return setTimeout(om.core.render_all, 16);
        }
      }
    };
  }(watch_key, state, state__$1, m, rootf, map__19176, map__19176__$1, options, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, m, rootf, map__19176, map__19176__$1, options, instrument, path, tx_listen, target) {
    return function() {
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, m, rootf, map__19176, map__19176__$1, options, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.Keyword(null, "else", "else", 1017020587) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null) : null;
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    var temp__4126__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var refs = temp__4126__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.set_state_BANG_ = function() {
  var set_state_BANG_ = null;
  var set_state_BANG___2 = function(owner, v) {
    return om.core._set_state_BANG_.call(null, owner, v);
  };
  var set_state_BANG___3 = function(owner, korks, v) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v);
  };
  set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_BANG___2;
  set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_BANG___3;
  return set_state_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var update_state_BANG_ = null;
  var update_state_BANG___2 = function(owner, f) {
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_BANG___3 = function(owner, korks, f) {
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_BANG___2;
  update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_BANG___3;
  return update_state_BANG_;
}();
om.core.refresh_BANG_ = function refresh_BANG_(owner) {
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    return om.core._get_render_state.call(null, owner);
  };
  var get_render_state__2 = function(owner, korks) {
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
om.core.rendering_QMARK_ = function rendering_QMARK_() {
  return om.core._STAR_read_enabled_STAR_ === true;
};
goog.provide("om_tools.core");
goog.require("cljs.core");
goog.require("plumbing.core");
goog.require("plumbing.core");
goog.require("plumbing.fnk.schema");
goog.require("om.core");
goog.require("om.core");
om_tools.core.state_proxy = function state_proxy(owner) {
  if (cljs.core.truth_(owner)) {
    var get_state = function() {
      return om.core.get_state.call(null, owner);
    };
    if (typeof om_tools.core.t14499 !== "undefined") {
    } else {
      om_tools.core.t14499 = function(get_state, owner, state_proxy, meta14500) {
        this.get_state = get_state;
        this.owner = owner;
        this.state_proxy = state_proxy;
        this.meta14500 = meta14500;
        this.cljs$lang$protocol_mask$partition1$ = 98304;
        this.cljs$lang$protocol_mask$partition0$ = 425984;
      };
      om_tools.core.t14499.cljs$lang$type = true;
      om_tools.core.t14499.cljs$lang$ctorStr = "om-tools.core/t14499";
      om_tools.core.t14499.cljs$lang$ctorPrWriter = function(get_state) {
        return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "om-tools.core/t14499");
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(get_state) {
        return function(s, f) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null)));
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(get_state) {
        return function(s, f, x) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x));
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(get_state) {
        return function(s, f, x, y) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, f.call(null, self__.get_state.call(null), x, y));
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(get_state) {
        return function(s, f, x, y, more) {
          var self__ = this;
          var s__$1 = this;
          return cljs.core._reset_BANG_.call(null, s__$1, cljs.core.apply.call(null, f, self__.get_state.call(null), x, y, more));
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(get_state) {
        return function(_, v) {
          var self__ = this;
          var ___$1 = this;
          return om.core.set_state_BANG_.call(null, self__.owner, v);
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$IDeref$_deref$arity$1 = function(get_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.get_state.call(null);
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$IMeta$_meta$arity$1 = function(get_state) {
        return function(_14501) {
          var self__ = this;
          var _14501__$1 = this;
          return self__.meta14500;
        };
      }(get_state);
      om_tools.core.t14499.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(get_state) {
        return function(_14501, meta14500__$1) {
          var self__ = this;
          var _14501__$1 = this;
          return new om_tools.core.t14499(self__.get_state, self__.owner, self__.state_proxy, meta14500__$1);
        };
      }(get_state);
      om_tools.core.__GT_t14499 = function(get_state) {
        return function __GT_t14499(get_state__$1, owner__$1, state_proxy__$1, meta14500) {
          return new om_tools.core.t14499(get_state__$1, owner__$1, state_proxy__$1, meta14500);
        };
      }(get_state);
    }
    return new om_tools.core.t14499(get_state, owner, state_proxy, null);
  } else {
    return null;
  }
};
om_tools.core.set_state_QMARK__BANG_ = function() {
  var set_state_QMARK__BANG_ = null;
  var set_state_QMARK__BANG___2 = function(owner, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, v);
    }
  };
  var set_state_QMARK__BANG___3 = function(owner, korks, v) {
    if (cljs.core._EQ_.call(null, v, om.core.get_state.call(null, owner, korks))) {
      return null;
    } else {
      return om.core.set_state_BANG_.call(null, owner, korks, v);
    }
  };
  set_state_QMARK__BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_QMARK__BANG___2.call(this, owner, korks);
      case 3:
        return set_state_QMARK__BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_QMARK__BANG___2;
  set_state_QMARK__BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_QMARK__BANG___3;
  return set_state_QMARK__BANG_;
}();
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj18958 = {};
  return obj18958;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3467__auto__ = port;
    if (and__3467__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4106__auto__ = port == null ? null : port;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj18960 = {};
  return obj18960;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__3467__auto__ = port;
    if (and__3467__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__4106__auto__ = port == null ? null : port;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj18962 = {};
  return obj18962;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3467__auto__ = chan;
    if (and__3467__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4106__auto__ = chan == null ? null : chan;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj18964 = {};
  return obj18964;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3467__auto__ = h;
    if (and__3467__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4106__auto__ = h == null ? null : h;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3467__auto__ = h;
    if (and__3467__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4106__auto__ = h == null ? null : h;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj18966 = {};
  return obj18966;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3467__auto__ = b;
    if (and__3467__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4106__auto__ = b == null ? null : b;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3467__auto__ = b;
    if (and__3467__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4106__auto__ = b == null ? null : b;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3467__auto__ = b;
    if (and__3467__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4106__auto__ = b == null ? null : b;
    return function() {
      var or__3479__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj18968 = {};
  return obj18968;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__18969 = cnt + 1;
      cnt = G__18969;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4327__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4327__auto__) {
      var v_18970 = this$.pop();
      if (keep_QMARK_.call(null, v_18970)) {
        this$.unshift(v_18970);
      } else {
      }
      var G__18971 = x + 1;
      x = G__18971;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_18972 = 0;
  while (true) {
    var m_18973 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_18973 == null) {
    } else {
      m_18973.call(null);
      if (count_18972 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__18974 = count_18972 + 1;
        count_18972 = G__18974;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3467__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3467__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t18978 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t18978 = function(val, box, meta18979) {
      this.val = val;
      this.box = box;
      this.meta18979 = meta18979;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t18978.cljs$lang$type = true;
    cljs.core.async.impl.channels.t18978.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t18978";
    cljs.core.async.impl.channels.t18978.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.channels/t18978");
    };
    cljs.core.async.impl.channels.t18978.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t18978.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18980) {
      var self__ = this;
      var _18980__$1 = this;
      return self__.meta18979;
    };
    cljs.core.async.impl.channels.t18978.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18980, meta18979__$1) {
      var self__ = this;
      var _18980__$1 = this;
      return new cljs.core.async.impl.channels.t18978(self__.val, self__.box, meta18979__$1);
    };
    cljs.core.async.impl.channels.__GT_t18978 = function __GT_t18978(val__$1, box__$1, meta18979) {
      return new cljs.core.async.impl.channels.t18978(val__$1, box__$1, meta18979);
    };
  }
  return new cljs.core.async.impl.channels.t18978(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4049__auto__, writer__4050__auto__, opts__4051__auto__) {
  return cljs.core._write.call(null, writer__4050__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_18981 = self__.takes.pop();
      if (taker_18981 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_18981)) {
          var take_cb_18982 = cljs.core.async.impl.protocols.commit.call(null, taker_18981);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_18982, taker_18981, this$__$1) {
            return function() {
              return take_cb_18982.call(null, null);
            };
          }(take_cb_18982, taker_18981, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t18907 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t18907 = function(f, fn_handler, meta18908) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta18908 = meta18908;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t18907.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t18907.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t18907";
    cljs.core.async.impl.ioc_helpers.t18907.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.ioc-helpers/t18907");
    };
    cljs.core.async.impl.ioc_helpers.t18907.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t18907.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t18907.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t18907.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18909) {
      var self__ = this;
      var _18909__$1 = this;
      return self__.meta18908;
    };
    cljs.core.async.impl.ioc_helpers.t18907.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18909, meta18908__$1) {
      var self__ = this;
      var _18909__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t18907(self__.f, self__.fn_handler, meta18908__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t18907 = function __GT_t18907(f__$1, fn_handler__$1, meta18908) {
      return new cljs.core.async.impl.ioc_helpers.t18907(f__$1, fn_handler__$1, meta18908);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t18907(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e18911) {
    if (e18911 instanceof Object) {
      var ex = e18911;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e18911;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_18914_18916 = state;
    statearr_18914_18916[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_18914_18916[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_18915_18917 = state;
    statearr_18915_18917[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_18915_18917[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_18920_18922 = state;
    statearr_18920_18922[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_18920_18922[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_18921_18923 = state;
    statearr_18921_18923[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_18921_18923[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__18924) {
    var map__18929 = p__18924;
    var map__18929__$1 = cljs.core.seq_QMARK_.call(null, map__18929) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18929) : map__18929;
    var opts = map__18929__$1;
    var statearr_18930_18933 = state;
    statearr_18930_18933[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__18929, map__18929__$1, opts) {
      return function(val) {
        var statearr_18931_18934 = state;
        statearr_18931_18934[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__18929, map__18929__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_18932_18935 = state;
      statearr_18932_18935[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__18924 = null;
    if (arguments.length > 3) {
      p__18924 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__18924);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__18936) {
    var state = cljs.core.first(arglist__18936);
    arglist__18936 = cljs.core.next(arglist__18936);
    var cont_block = cljs.core.first(arglist__18936);
    arglist__18936 = cljs.core.next(arglist__18936);
    var ports = cljs.core.first(arglist__18936);
    var p__18924 = cljs.core.rest(arglist__18936);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__18924);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4065__auto__, k__4066__auto__) {
  var self__ = this;
  var this__4065__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4065__auto____$1, k__4066__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4067__auto__, k18938, else__4068__auto__) {
  var self__ = this;
  var this__4067__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k18938, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k18938, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k18938, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k18938, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k18938, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k18938, else__4068__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4079__auto__, writer__4080__auto__, opts__4081__auto__) {
  var self__ = this;
  var this__4079__auto____$1 = this;
  var pr_pair__4082__auto__ = function(this__4079__auto____$1) {
    return function(keyval__4083__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, cljs.core.pr_writer, "", " ", "", opts__4081__auto__, keyval__4083__auto__);
    };
  }(this__4079__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4080__auto__, pr_pair__4082__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4081__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4063__auto__) {
  var self__ = this;
  var this__4063__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4059__auto__) {
  var self__ = this;
  var this__4059__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4069__auto__) {
  var self__ = this;
  var this__4069__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4060__auto__) {
  var self__ = this;
  var this__4060__auto____$1 = this;
  var h__3890__auto__ = self__.__hash;
  if (!(h__3890__auto__ == null)) {
    return h__3890__auto__;
  } else {
    var h__3890__auto____$1 = cljs.core.hash_imap.call(null, this__4060__auto____$1);
    self__.__hash = h__3890__auto____$1;
    return h__3890__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4061__auto__, other__4062__auto__) {
  var self__ = this;
  var this__4061__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3467__auto__ = other__4062__auto__;
    if (cljs.core.truth_(and__3467__auto__)) {
      return this__4061__auto____$1.constructor === other__4062__auto__.constructor && cljs.core.equiv_map.call(null, this__4061__auto____$1, other__4062__auto__);
    } else {
      return and__3467__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4074__auto__, k__4075__auto__) {
  var self__ = this;
  var this__4074__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  null], null), null), k__4075__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4074__auto____$1), self__.__meta), k__4075__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4075__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4072__auto__, k__4073__auto__, G__18937) {
  var self__ = this;
  var this__4072__auto____$1 = this;
  var pred__18940 = cljs.core.keyword_identical_QMARK_;
  var expr__18941 = k__4073__auto__;
  if (cljs.core.truth_(pred__18940.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__18941))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__18937, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__18940.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__18941))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__18937, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__18940.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__18941))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__18937, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__18940.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__18941))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__18937, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__18940.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__18941))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__18937, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4073__auto__, G__18937), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4077__auto__) {
  var self__ = this;
  var this__4077__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4064__auto__, G__18937) {
  var self__ = this;
  var this__4064__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__18937, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4070__auto__, entry__4071__auto__) {
  var self__ = this;
  var this__4070__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4071__auto__)) {
    return cljs.core._assoc.call(null, this__4070__auto____$1, cljs.core._nth.call(null, entry__4071__auto__, 0), cljs.core._nth.call(null, entry__4071__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4070__auto____$1, entry__4071__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4099__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4099__auto__, writer__4100__auto__) {
  return cljs.core._write.call(null, writer__4100__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__18939) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__18939), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__18939), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__18939), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__18939), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__18939), null, cljs.core.dissoc.call(null, G__18939, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_18944 = state;
  statearr_18944[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_18944;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = exception;
      if (cljs.core.truth_(and__3467__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3467__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3467__auto__ = exception;
        if (cljs.core.truth_(and__3467__auto__)) {
          var and__3467__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3467__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3467__auto____$1;
          }
        } else {
          return and__3467__auto__;
        }
      }())) {
        var statearr_18950 = state;
        statearr_18950[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_18950[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_18950[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_18950[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_18950;
      } else {
        if (cljs.core.truth_(function() {
          var and__3467__auto__ = exception;
          if (cljs.core.truth_(and__3467__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3467__auto__;
          }
        }())) {
          var statearr_18951_18955 = state;
          statearr_18951_18955[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__18956 = state;
          state = G__18956;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3467__auto__ = exception;
            if (cljs.core.truth_(and__3467__auto__)) {
              var and__3467__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3467__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3467__auto____$1;
              }
            } else {
              return and__3467__auto__;
            }
          }())) {
            var statearr_18952 = state;
            statearr_18952[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_18952[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_18952;
          } else {
            if (cljs.core.truth_(function() {
              var and__3467__auto__ = cljs.core.not.call(null, exception);
              if (and__3467__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3467__auto__;
              }
            }())) {
              var statearr_18953 = state;
              statearr_18953[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_18953[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_18953;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_18954 = state;
                statearr_18954[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_18954[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_18954;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__18880 = level + 1;
        level = G__18880;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_18881 = 0;
    while (true) {
      if (i_18881 < arr.length) {
        arr[i_18881] = null;
        var G__18882 = i_18881 + 1;
        i_18881 = G__18882;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__18883 = x_SINGLEQUOTE_;
                x__$1 = G__18883;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__18884 = x__$1;
        var G__18885 = k;
        var G__18886 = level - 1;
        var G__18887 = update;
        x = G__18884;
        k = G__18885;
        level = G__18886;
        update = G__18887;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_18888 = self__.level + 1;
      while (true) {
        if (i_18888 <= new_level + 1) {
          update[i_18888] = self__.header;
          var G__18889 = i_18888 + 1;
          i_18888 = G__18889;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_18890 = 0;
    while (true) {
      if (i_18890 <= self__.level) {
        var links_18891 = update[i_18890].forward;
        if (links_18891[i_18890] === x__$1) {
          links_18891[i_18890] = x__$1.forward[i_18890];
          var G__18892 = i_18890 + 1;
          i_18890 = G__18892;
          continue;
        } else {
          var G__18893 = i_18890 + 1;
          i_18890 = G__18893;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__18894 = x_SINGLEQUOTE_;
              x__$1 = G__18894;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__18895 = nx;
        var G__18896 = level__$1 - 1;
        x = G__18895;
        level__$1 = G__18896;
        continue;
      } else {
        var G__18897 = x;
        var G__18898 = level__$1 - 1;
        x = G__18897;
        level__$1 = G__18898;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__18899 = x_SINGLEQUOTE_;
              x__$1 = G__18899;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__18900 = nx;
        var G__18901 = level__$1 - 1;
        x = G__18900;
        level__$1 = G__18901;
        continue;
      } else {
        var G__18902 = x;
        var G__18903 = level__$1 - 1;
        x = G__18902;
        level__$1 = G__18903;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3479__auto__ = cljs.core.truth_(function() {
    var and__3467__auto__ = me;
    if (cljs.core.truth_(and__3467__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3467__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3479__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3479__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t16329 !== "undefined") {
  } else {
    cljs.core.async.t16329 = function(f, fn_handler, meta16330) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta16330 = meta16330;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16329.cljs$lang$type = true;
    cljs.core.async.t16329.cljs$lang$ctorStr = "cljs.core.async/t16329";
    cljs.core.async.t16329.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16329");
    };
    cljs.core.async.t16329.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16329.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t16329.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t16329.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16331) {
      var self__ = this;
      var _16331__$1 = this;
      return self__.meta16330;
    };
    cljs.core.async.t16329.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16331, meta16330__$1) {
      var self__ = this;
      var _16331__$1 = this;
      return new cljs.core.async.t16329(self__.f, self__.fn_handler, meta16330__$1);
    };
    cljs.core.async.__GT_t16329 = function __GT_t16329(f__$1, fn_handler__$1, meta16330) {
      return new cljs.core.async.t16329(f__$1, fn_handler__$1, meta16330);
    };
  }
  return new cljs.core.async.t16329(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__16333 = buff;
  if (G__16333) {
    var bit__4129__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3479__auto__ = bit__4129__auto__;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return G__16333.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__16333.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__16333);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_16334 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_16334);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_16334, ret) {
          return function() {
            return fn1.call(null, val_16334);
          };
        }(val_16334, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = ret;
      if (cljs.core.truth_(and__3467__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__3467__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4327__auto___16335 = n;
  var x_16336 = 0;
  while (true) {
    if (x_16336 < n__4327__auto___16335) {
      a[x_16336] = 0;
      var G__16337 = x_16336 + 1;
      x_16336 = G__16337;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__16338 = i + 1;
      i = G__16338;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t16342 !== "undefined") {
  } else {
    cljs.core.async.t16342 = function(flag, alt_flag, meta16343) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta16343 = meta16343;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16342.cljs$lang$type = true;
    cljs.core.async.t16342.cljs$lang$ctorStr = "cljs.core.async/t16342";
    cljs.core.async.t16342.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
        return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16342");
      };
    }(flag);
    cljs.core.async.t16342.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16342.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t16342.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t16342.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_16344) {
        var self__ = this;
        var _16344__$1 = this;
        return self__.meta16343;
      };
    }(flag);
    cljs.core.async.t16342.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_16344, meta16343__$1) {
        var self__ = this;
        var _16344__$1 = this;
        return new cljs.core.async.t16342(self__.flag, self__.alt_flag, meta16343__$1);
      };
    }(flag);
    cljs.core.async.__GT_t16342 = function(flag) {
      return function __GT_t16342(flag__$1, alt_flag__$1, meta16343) {
        return new cljs.core.async.t16342(flag__$1, alt_flag__$1, meta16343);
      };
    }(flag);
  }
  return new cljs.core.async.t16342(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t16348 !== "undefined") {
  } else {
    cljs.core.async.t16348 = function(cb, flag, alt_handler, meta16349) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta16349 = meta16349;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16348.cljs$lang$type = true;
    cljs.core.async.t16348.cljs$lang$ctorStr = "cljs.core.async/t16348";
    cljs.core.async.t16348.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16348");
    };
    cljs.core.async.t16348.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t16348.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t16348.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t16348.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16350) {
      var self__ = this;
      var _16350__$1 = this;
      return self__.meta16349;
    };
    cljs.core.async.t16348.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16350, meta16349__$1) {
      var self__ = this;
      var _16350__$1 = this;
      return new cljs.core.async.t16348(self__.cb, self__.flag, self__.alt_handler, meta16349__$1);
    };
    cljs.core.async.__GT_t16348 = function __GT_t16348(cb__$1, flag__$1, alt_handler__$1, meta16349) {
      return new cljs.core.async.t16348(cb__$1, flag__$1, alt_handler__$1, meta16349);
    };
  }
  return new cljs.core.async.t16348(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__16351_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16351_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3479__auto__ = wport;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__16352 = i + 1;
          i = G__16352;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3479__auto__ = ret;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4126__auto__ = function() {
        var and__3467__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3467__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3467__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__16353) {
    var map__16355 = p__16353;
    var map__16355__$1 = cljs.core.seq_QMARK_.call(null, map__16355) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16355) : map__16355;
    var opts = map__16355__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__16353 = null;
    if (arguments.length > 1) {
      p__16353 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__16353);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__16356) {
    var ports = cljs.core.first(arglist__16356);
    var p__16353 = cljs.core.rest(arglist__16356);
    return alts_BANG___delegate(ports, p__16353);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t16364 !== "undefined") {
  } else {
    cljs.core.async.t16364 = function(ch, f, map_LT_, meta16365) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta16365 = meta16365;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16364.cljs$lang$type = true;
    cljs.core.async.t16364.cljs$lang$ctorStr = "cljs.core.async/t16364";
    cljs.core.async.t16364.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16364");
    };
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t16367 !== "undefined") {
        } else {
          cljs.core.async.t16367 = function(fn1, _, meta16365, ch, f, map_LT_, meta16368) {
            this.fn1 = fn1;
            this._ = _;
            this.meta16365 = meta16365;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta16368 = meta16368;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t16367.cljs$lang$type = true;
          cljs.core.async.t16367.cljs$lang$ctorStr = "cljs.core.async/t16367";
          cljs.core.async.t16367.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
              return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16367");
            };
          }(___$1);
          cljs.core.async.t16367.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t16367.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16367.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t16367.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__16357_SHARP_) {
                  return f1.call(null, p1__16357_SHARP_ == null ? null : self__.f.call(null, p1__16357_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t16367.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_16369) {
              var self__ = this;
              var _16369__$1 = this;
              return self__.meta16368;
            };
          }(___$1);
          cljs.core.async.t16367.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_16369, meta16368__$1) {
              var self__ = this;
              var _16369__$1 = this;
              return new cljs.core.async.t16367(self__.fn1, self__._, self__.meta16365, self__.ch, self__.f, self__.map_LT_, meta16368__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t16367 = function(___$1) {
            return function __GT_t16367(fn1__$1, ___$2, meta16365__$1, ch__$2, f__$2, map_LT___$2, meta16368) {
              return new cljs.core.async.t16367(fn1__$1, ___$2, meta16365__$1, ch__$2, f__$2, map_LT___$2, meta16368);
            };
          }(___$1);
        }
        return new cljs.core.async.t16367(fn1, ___$1, self__.meta16365, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3467__auto__ = ret;
        if (cljs.core.truth_(and__3467__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3467__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16364.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16364.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16366) {
      var self__ = this;
      var _16366__$1 = this;
      return self__.meta16365;
    };
    cljs.core.async.t16364.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16366, meta16365__$1) {
      var self__ = this;
      var _16366__$1 = this;
      return new cljs.core.async.t16364(self__.ch, self__.f, self__.map_LT_, meta16365__$1);
    };
    cljs.core.async.__GT_t16364 = function __GT_t16364(ch__$1, f__$1, map_LT___$1, meta16365) {
      return new cljs.core.async.t16364(ch__$1, f__$1, map_LT___$1, meta16365);
    };
  }
  return new cljs.core.async.t16364(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t16373 !== "undefined") {
  } else {
    cljs.core.async.t16373 = function(ch, f, map_GT_, meta16374) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta16374 = meta16374;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16373.cljs$lang$type = true;
    cljs.core.async.t16373.cljs$lang$ctorStr = "cljs.core.async/t16373";
    cljs.core.async.t16373.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16373");
    };
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16373.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16373.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16375) {
      var self__ = this;
      var _16375__$1 = this;
      return self__.meta16374;
    };
    cljs.core.async.t16373.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16375, meta16374__$1) {
      var self__ = this;
      var _16375__$1 = this;
      return new cljs.core.async.t16373(self__.ch, self__.f, self__.map_GT_, meta16374__$1);
    };
    cljs.core.async.__GT_t16373 = function __GT_t16373(ch__$1, f__$1, map_GT___$1, meta16374) {
      return new cljs.core.async.t16373(ch__$1, f__$1, map_GT___$1, meta16374);
    };
  }
  return new cljs.core.async.t16373(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t16379 !== "undefined") {
  } else {
    cljs.core.async.t16379 = function(ch, p, filter_GT_, meta16380) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta16380 = meta16380;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t16379.cljs$lang$type = true;
    cljs.core.async.t16379.cljs$lang$ctorStr = "cljs.core.async/t16379";
    cljs.core.async.t16379.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
      return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t16379");
    };
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t16379.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t16379.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16381) {
      var self__ = this;
      var _16381__$1 = this;
      return self__.meta16380;
    };
    cljs.core.async.t16379.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16381, meta16380__$1) {
      var self__ = this;
      var _16381__$1 = this;
      return new cljs.core.async.t16379(self__.ch, self__.p, self__.filter_GT_, meta16380__$1);
    };
    cljs.core.async.__GT_t16379 = function __GT_t16379(ch__$1, p__$1, filter_GT___$1, meta16380) {
      return new cljs.core.async.t16379(ch__$1, p__$1, filter_GT___$1, meta16380);
    };
  }
  return new cljs.core.async.t16379(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___16464 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___16464, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___16464, out) {
            return function(state_16443) {
              var state_val_16444 = state_16443[1];
              if (state_val_16444 === 7) {
                var inst_16439 = state_16443[2];
                var state_16443__$1 = state_16443;
                var statearr_16445_16465 = state_16443__$1;
                statearr_16445_16465[2] = inst_16439;
                statearr_16445_16465[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16444 === 1) {
                  var state_16443__$1 = state_16443;
                  var statearr_16446_16466 = state_16443__$1;
                  statearr_16446_16466[2] = null;
                  statearr_16446_16466[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16444 === 4) {
                    var inst_16425 = state_16443[7];
                    var inst_16425__$1 = state_16443[2];
                    var inst_16426 = inst_16425__$1 == null;
                    var state_16443__$1 = function() {
                      var statearr_16447 = state_16443;
                      statearr_16447[7] = inst_16425__$1;
                      return statearr_16447;
                    }();
                    if (cljs.core.truth_(inst_16426)) {
                      var statearr_16448_16467 = state_16443__$1;
                      statearr_16448_16467[1] = 5;
                    } else {
                      var statearr_16449_16468 = state_16443__$1;
                      statearr_16449_16468[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16444 === 6) {
                      var inst_16425 = state_16443[7];
                      var inst_16430 = p.call(null, inst_16425);
                      var state_16443__$1 = state_16443;
                      if (cljs.core.truth_(inst_16430)) {
                        var statearr_16450_16469 = state_16443__$1;
                        statearr_16450_16469[1] = 8;
                      } else {
                        var statearr_16451_16470 = state_16443__$1;
                        statearr_16451_16470[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16444 === 3) {
                        var inst_16441 = state_16443[2];
                        var state_16443__$1 = state_16443;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16443__$1, inst_16441);
                      } else {
                        if (state_val_16444 === 2) {
                          var state_16443__$1 = state_16443;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16443__$1, 4, ch);
                        } else {
                          if (state_val_16444 === 11) {
                            var inst_16433 = state_16443[2];
                            var state_16443__$1 = state_16443;
                            var statearr_16452_16471 = state_16443__$1;
                            statearr_16452_16471[2] = inst_16433;
                            statearr_16452_16471[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16444 === 9) {
                              var state_16443__$1 = state_16443;
                              var statearr_16453_16472 = state_16443__$1;
                              statearr_16453_16472[2] = null;
                              statearr_16453_16472[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16444 === 5) {
                                var inst_16428 = cljs.core.async.close_BANG_.call(null, out);
                                var state_16443__$1 = state_16443;
                                var statearr_16454_16473 = state_16443__$1;
                                statearr_16454_16473[2] = inst_16428;
                                statearr_16454_16473[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16444 === 10) {
                                  var inst_16436 = state_16443[2];
                                  var state_16443__$1 = function() {
                                    var statearr_16455 = state_16443;
                                    statearr_16455[8] = inst_16436;
                                    return statearr_16455;
                                  }();
                                  var statearr_16456_16474 = state_16443__$1;
                                  statearr_16456_16474[2] = null;
                                  statearr_16456_16474[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16444 === 8) {
                                    var inst_16425 = state_16443[7];
                                    var state_16443__$1 = state_16443;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16443__$1, 11, out, inst_16425);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___16464, out);
          return function(switch__10182__auto__, c__10197__auto___16464, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_16460 = [null, null, null, null, null, null, null, null, null];
                statearr_16460[0] = state_machine__10183__auto__;
                statearr_16460[1] = 1;
                return statearr_16460;
              };
              var state_machine__10183__auto____1 = function(state_16443) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_16443);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e16461) {
                      if (e16461 instanceof Object) {
                        var ex__10186__auto__ = e16461;
                        var statearr_16462_16475 = state_16443;
                        statearr_16462_16475[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16443);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e16461;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__16476 = state_16443;
                    state_16443 = G__16476;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_16443) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_16443);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___16464, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_16463 = f__10198__auto__.call(null);
          statearr_16463[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___16464;
          return statearr_16463;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___16464, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__10197__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto__) {
    return function() {
      var f__10198__auto__ = function() {
        var switch__10182__auto__ = function(c__10197__auto__) {
          return function(state_16628) {
            var state_val_16629 = state_16628[1];
            if (state_val_16629 === 7) {
              var inst_16624 = state_16628[2];
              var state_16628__$1 = state_16628;
              var statearr_16630_16667 = state_16628__$1;
              statearr_16630_16667[2] = inst_16624;
              statearr_16630_16667[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16629 === 20) {
                var inst_16599 = state_16628[7];
                var inst_16610 = state_16628[2];
                var inst_16611 = cljs.core.next.call(null, inst_16599);
                var inst_16585 = inst_16611;
                var inst_16586 = null;
                var inst_16587 = 0;
                var inst_16588 = 0;
                var state_16628__$1 = function() {
                  var statearr_16631 = state_16628;
                  statearr_16631[8] = inst_16610;
                  statearr_16631[9] = inst_16585;
                  statearr_16631[10] = inst_16587;
                  statearr_16631[11] = inst_16588;
                  statearr_16631[12] = inst_16586;
                  return statearr_16631;
                }();
                var statearr_16632_16668 = state_16628__$1;
                statearr_16632_16668[2] = null;
                statearr_16632_16668[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16629 === 1) {
                  var state_16628__$1 = state_16628;
                  var statearr_16633_16669 = state_16628__$1;
                  statearr_16633_16669[2] = null;
                  statearr_16633_16669[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16629 === 4) {
                    var inst_16574 = state_16628[13];
                    var inst_16574__$1 = state_16628[2];
                    var inst_16575 = inst_16574__$1 == null;
                    var state_16628__$1 = function() {
                      var statearr_16637 = state_16628;
                      statearr_16637[13] = inst_16574__$1;
                      return statearr_16637;
                    }();
                    if (cljs.core.truth_(inst_16575)) {
                      var statearr_16638_16670 = state_16628__$1;
                      statearr_16638_16670[1] = 5;
                    } else {
                      var statearr_16639_16671 = state_16628__$1;
                      statearr_16639_16671[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16629 === 15) {
                      var state_16628__$1 = state_16628;
                      var statearr_16640_16672 = state_16628__$1;
                      statearr_16640_16672[2] = null;
                      statearr_16640_16672[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16629 === 13) {
                        var inst_16585 = state_16628[9];
                        var inst_16587 = state_16628[10];
                        var inst_16588 = state_16628[11];
                        var inst_16586 = state_16628[12];
                        var inst_16595 = state_16628[2];
                        var inst_16596 = inst_16588 + 1;
                        var tmp16634 = inst_16585;
                        var tmp16635 = inst_16587;
                        var tmp16636 = inst_16586;
                        var inst_16585__$1 = tmp16634;
                        var inst_16586__$1 = tmp16636;
                        var inst_16587__$1 = tmp16635;
                        var inst_16588__$1 = inst_16596;
                        var state_16628__$1 = function() {
                          var statearr_16641 = state_16628;
                          statearr_16641[14] = inst_16595;
                          statearr_16641[9] = inst_16585__$1;
                          statearr_16641[10] = inst_16587__$1;
                          statearr_16641[11] = inst_16588__$1;
                          statearr_16641[12] = inst_16586__$1;
                          return statearr_16641;
                        }();
                        var statearr_16642_16673 = state_16628__$1;
                        statearr_16642_16673[2] = null;
                        statearr_16642_16673[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_16629 === 6) {
                          var inst_16574 = state_16628[13];
                          var inst_16579 = f.call(null, inst_16574);
                          var inst_16584 = cljs.core.seq.call(null, inst_16579);
                          var inst_16585 = inst_16584;
                          var inst_16586 = null;
                          var inst_16587 = 0;
                          var inst_16588 = 0;
                          var state_16628__$1 = function() {
                            var statearr_16643 = state_16628;
                            statearr_16643[9] = inst_16585;
                            statearr_16643[10] = inst_16587;
                            statearr_16643[11] = inst_16588;
                            statearr_16643[12] = inst_16586;
                            return statearr_16643;
                          }();
                          var statearr_16644_16674 = state_16628__$1;
                          statearr_16644_16674[2] = null;
                          statearr_16644_16674[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_16629 === 17) {
                            var inst_16599 = state_16628[7];
                            var inst_16603 = cljs.core.chunk_first.call(null, inst_16599);
                            var inst_16604 = cljs.core.chunk_rest.call(null, inst_16599);
                            var inst_16605 = cljs.core.count.call(null, inst_16603);
                            var inst_16585 = inst_16604;
                            var inst_16586 = inst_16603;
                            var inst_16587 = inst_16605;
                            var inst_16588 = 0;
                            var state_16628__$1 = function() {
                              var statearr_16645 = state_16628;
                              statearr_16645[9] = inst_16585;
                              statearr_16645[10] = inst_16587;
                              statearr_16645[11] = inst_16588;
                              statearr_16645[12] = inst_16586;
                              return statearr_16645;
                            }();
                            var statearr_16646_16675 = state_16628__$1;
                            statearr_16646_16675[2] = null;
                            statearr_16646_16675[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16629 === 3) {
                              var inst_16626 = state_16628[2];
                              var state_16628__$1 = state_16628;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16628__$1, inst_16626);
                            } else {
                              if (state_val_16629 === 12) {
                                var inst_16619 = state_16628[2];
                                var state_16628__$1 = state_16628;
                                var statearr_16647_16676 = state_16628__$1;
                                statearr_16647_16676[2] = inst_16619;
                                statearr_16647_16676[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16629 === 2) {
                                  var state_16628__$1 = state_16628;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16628__$1, 4, in$);
                                } else {
                                  if (state_val_16629 === 19) {
                                    var inst_16614 = state_16628[2];
                                    var state_16628__$1 = state_16628;
                                    var statearr_16648_16677 = state_16628__$1;
                                    statearr_16648_16677[2] = inst_16614;
                                    statearr_16648_16677[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_16629 === 11) {
                                      var inst_16585 = state_16628[9];
                                      var inst_16599 = state_16628[7];
                                      var inst_16599__$1 = cljs.core.seq.call(null, inst_16585);
                                      var state_16628__$1 = function() {
                                        var statearr_16649 = state_16628;
                                        statearr_16649[7] = inst_16599__$1;
                                        return statearr_16649;
                                      }();
                                      if (inst_16599__$1) {
                                        var statearr_16650_16678 = state_16628__$1;
                                        statearr_16650_16678[1] = 14;
                                      } else {
                                        var statearr_16651_16679 = state_16628__$1;
                                        statearr_16651_16679[1] = 15;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_16629 === 9) {
                                        var inst_16621 = state_16628[2];
                                        var state_16628__$1 = function() {
                                          var statearr_16652 = state_16628;
                                          statearr_16652[15] = inst_16621;
                                          return statearr_16652;
                                        }();
                                        var statearr_16653_16680 = state_16628__$1;
                                        statearr_16653_16680[2] = null;
                                        statearr_16653_16680[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_16629 === 5) {
                                          var inst_16577 = cljs.core.async.close_BANG_.call(null, out);
                                          var state_16628__$1 = state_16628;
                                          var statearr_16654_16681 = state_16628__$1;
                                          statearr_16654_16681[2] = inst_16577;
                                          statearr_16654_16681[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_16629 === 14) {
                                            var inst_16599 = state_16628[7];
                                            var inst_16601 = cljs.core.chunked_seq_QMARK_.call(null, inst_16599);
                                            var state_16628__$1 = state_16628;
                                            if (inst_16601) {
                                              var statearr_16655_16682 = state_16628__$1;
                                              statearr_16655_16682[1] = 17;
                                            } else {
                                              var statearr_16656_16683 = state_16628__$1;
                                              statearr_16656_16683[1] = 18;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_16629 === 16) {
                                              var inst_16617 = state_16628[2];
                                              var state_16628__$1 = state_16628;
                                              var statearr_16657_16684 = state_16628__$1;
                                              statearr_16657_16684[2] = inst_16617;
                                              statearr_16657_16684[1] = 12;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_16629 === 10) {
                                                var inst_16588 = state_16628[11];
                                                var inst_16586 = state_16628[12];
                                                var inst_16593 = cljs.core._nth.call(null, inst_16586, inst_16588);
                                                var state_16628__$1 = state_16628;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16628__$1, 13, out, inst_16593);
                                              } else {
                                                if (state_val_16629 === 18) {
                                                  var inst_16599 = state_16628[7];
                                                  var inst_16608 = cljs.core.first.call(null, inst_16599);
                                                  var state_16628__$1 = state_16628;
                                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16628__$1, 20, out, inst_16608);
                                                } else {
                                                  if (state_val_16629 === 8) {
                                                    var inst_16587 = state_16628[10];
                                                    var inst_16588 = state_16628[11];
                                                    var inst_16590 = inst_16588 < inst_16587;
                                                    var inst_16591 = inst_16590;
                                                    var state_16628__$1 = state_16628;
                                                    if (cljs.core.truth_(inst_16591)) {
                                                      var statearr_16658_16685 = state_16628__$1;
                                                      statearr_16658_16685[1] = 10;
                                                    } else {
                                                      var statearr_16659_16686 = state_16628__$1;
                                                      statearr_16659_16686[1] = 11;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10197__auto__);
        return function(switch__10182__auto__, c__10197__auto__) {
          return function() {
            var state_machine__10183__auto__ = null;
            var state_machine__10183__auto____0 = function() {
              var statearr_16663 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16663[0] = state_machine__10183__auto__;
              statearr_16663[1] = 1;
              return statearr_16663;
            };
            var state_machine__10183__auto____1 = function(state_16628) {
              while (true) {
                var ret_value__10184__auto__ = function() {
                  try {
                    while (true) {
                      var result__10185__auto__ = switch__10182__auto__.call(null, state_16628);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10185__auto__;
                      }
                      break;
                    }
                  } catch (e16664) {
                    if (e16664 instanceof Object) {
                      var ex__10186__auto__ = e16664;
                      var statearr_16665_16687 = state_16628;
                      statearr_16665_16687[5] = ex__10186__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16628);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e16664;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__16688 = state_16628;
                  state_16628 = G__16688;
                  continue;
                } else {
                  return ret_value__10184__auto__;
                }
                break;
              }
            };
            state_machine__10183__auto__ = function(state_16628) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10183__auto____0.call(this);
                case 1:
                  return state_machine__10183__auto____1.call(this, state_16628);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
            return state_machine__10183__auto__;
          }();
        }(switch__10182__auto__, c__10197__auto__);
      }();
      var state__10199__auto__ = function() {
        var statearr_16666 = f__10198__auto__.call(null);
        statearr_16666[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto__;
        return statearr_16666;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
    };
  }(c__10197__auto__));
  return c__10197__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__10197__auto___16769 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___16769) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___16769) {
            return function(state_16748) {
              var state_val_16749 = state_16748[1];
              if (state_val_16749 === 7) {
                var inst_16744 = state_16748[2];
                var state_16748__$1 = state_16748;
                var statearr_16750_16770 = state_16748__$1;
                statearr_16750_16770[2] = inst_16744;
                statearr_16750_16770[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16749 === 1) {
                  var state_16748__$1 = state_16748;
                  var statearr_16751_16771 = state_16748__$1;
                  statearr_16751_16771[2] = null;
                  statearr_16751_16771[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16749 === 4) {
                    var inst_16731 = state_16748[7];
                    var inst_16731__$1 = state_16748[2];
                    var inst_16732 = inst_16731__$1 == null;
                    var state_16748__$1 = function() {
                      var statearr_16752 = state_16748;
                      statearr_16752[7] = inst_16731__$1;
                      return statearr_16752;
                    }();
                    if (cljs.core.truth_(inst_16732)) {
                      var statearr_16753_16772 = state_16748__$1;
                      statearr_16753_16772[1] = 5;
                    } else {
                      var statearr_16754_16773 = state_16748__$1;
                      statearr_16754_16773[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16749 === 6) {
                      var inst_16731 = state_16748[7];
                      var state_16748__$1 = state_16748;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16748__$1, 11, to, inst_16731);
                    } else {
                      if (state_val_16749 === 3) {
                        var inst_16746 = state_16748[2];
                        var state_16748__$1 = state_16748;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16748__$1, inst_16746);
                      } else {
                        if (state_val_16749 === 2) {
                          var state_16748__$1 = state_16748;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16748__$1, 4, from);
                        } else {
                          if (state_val_16749 === 11) {
                            var inst_16741 = state_16748[2];
                            var state_16748__$1 = function() {
                              var statearr_16755 = state_16748;
                              statearr_16755[8] = inst_16741;
                              return statearr_16755;
                            }();
                            var statearr_16756_16774 = state_16748__$1;
                            statearr_16756_16774[2] = null;
                            statearr_16756_16774[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_16749 === 9) {
                              var state_16748__$1 = state_16748;
                              var statearr_16757_16775 = state_16748__$1;
                              statearr_16757_16775[2] = null;
                              statearr_16757_16775[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16749 === 5) {
                                var state_16748__$1 = state_16748;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_16758_16776 = state_16748__$1;
                                  statearr_16758_16776[1] = 8;
                                } else {
                                  var statearr_16759_16777 = state_16748__$1;
                                  statearr_16759_16777[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16749 === 10) {
                                  var inst_16738 = state_16748[2];
                                  var state_16748__$1 = state_16748;
                                  var statearr_16760_16778 = state_16748__$1;
                                  statearr_16760_16778[2] = inst_16738;
                                  statearr_16760_16778[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16749 === 8) {
                                    var inst_16735 = cljs.core.async.close_BANG_.call(null, to);
                                    var state_16748__$1 = state_16748;
                                    var statearr_16761_16779 = state_16748__$1;
                                    statearr_16761_16779[2] = inst_16735;
                                    statearr_16761_16779[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___16769);
          return function(switch__10182__auto__, c__10197__auto___16769) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_16765 = [null, null, null, null, null, null, null, null, null];
                statearr_16765[0] = state_machine__10183__auto__;
                statearr_16765[1] = 1;
                return statearr_16765;
              };
              var state_machine__10183__auto____1 = function(state_16748) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_16748);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e16766) {
                      if (e16766 instanceof Object) {
                        var ex__10186__auto__ = e16766;
                        var statearr_16767_16780 = state_16748;
                        statearr_16767_16780[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16748);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e16766;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__16781 = state_16748;
                    state_16748 = G__16781;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_16748) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_16748);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___16769);
        }();
        var state__10199__auto__ = function() {
          var statearr_16768 = f__10198__auto__.call(null);
          statearr_16768[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___16769;
          return statearr_16768;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___16769));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__10197__auto___16868 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___16868, tc, fc) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___16868, tc, fc) {
            return function(state_16846) {
              var state_val_16847 = state_16846[1];
              if (state_val_16847 === 7) {
                var inst_16842 = state_16846[2];
                var state_16846__$1 = state_16846;
                var statearr_16848_16869 = state_16846__$1;
                statearr_16848_16869[2] = inst_16842;
                statearr_16848_16869[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16847 === 1) {
                  var state_16846__$1 = state_16846;
                  var statearr_16849_16870 = state_16846__$1;
                  statearr_16849_16870[2] = null;
                  statearr_16849_16870[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16847 === 4) {
                    var inst_16827 = state_16846[7];
                    var inst_16827__$1 = state_16846[2];
                    var inst_16828 = inst_16827__$1 == null;
                    var state_16846__$1 = function() {
                      var statearr_16850 = state_16846;
                      statearr_16850[7] = inst_16827__$1;
                      return statearr_16850;
                    }();
                    if (cljs.core.truth_(inst_16828)) {
                      var statearr_16851_16871 = state_16846__$1;
                      statearr_16851_16871[1] = 5;
                    } else {
                      var statearr_16852_16872 = state_16846__$1;
                      statearr_16852_16872[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16847 === 6) {
                      var inst_16827 = state_16846[7];
                      var inst_16833 = p.call(null, inst_16827);
                      var state_16846__$1 = state_16846;
                      if (cljs.core.truth_(inst_16833)) {
                        var statearr_16853_16873 = state_16846__$1;
                        statearr_16853_16873[1] = 9;
                      } else {
                        var statearr_16854_16874 = state_16846__$1;
                        statearr_16854_16874[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16847 === 3) {
                        var inst_16844 = state_16846[2];
                        var state_16846__$1 = state_16846;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16846__$1, inst_16844);
                      } else {
                        if (state_val_16847 === 2) {
                          var state_16846__$1 = state_16846;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16846__$1, 4, ch);
                        } else {
                          if (state_val_16847 === 11) {
                            var inst_16827 = state_16846[7];
                            var inst_16837 = state_16846[2];
                            var state_16846__$1 = state_16846;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16846__$1, 8, inst_16837, inst_16827);
                          } else {
                            if (state_val_16847 === 9) {
                              var state_16846__$1 = state_16846;
                              var statearr_16855_16875 = state_16846__$1;
                              statearr_16855_16875[2] = tc;
                              statearr_16855_16875[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_16847 === 5) {
                                var inst_16830 = cljs.core.async.close_BANG_.call(null, tc);
                                var inst_16831 = cljs.core.async.close_BANG_.call(null, fc);
                                var state_16846__$1 = function() {
                                  var statearr_16856 = state_16846;
                                  statearr_16856[8] = inst_16830;
                                  return statearr_16856;
                                }();
                                var statearr_16857_16876 = state_16846__$1;
                                statearr_16857_16876[2] = inst_16831;
                                statearr_16857_16876[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_16847 === 10) {
                                  var state_16846__$1 = state_16846;
                                  var statearr_16858_16877 = state_16846__$1;
                                  statearr_16858_16877[2] = fc;
                                  statearr_16858_16877[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_16847 === 8) {
                                    var inst_16839 = state_16846[2];
                                    var state_16846__$1 = function() {
                                      var statearr_16859 = state_16846;
                                      statearr_16859[9] = inst_16839;
                                      return statearr_16859;
                                    }();
                                    var statearr_16860_16878 = state_16846__$1;
                                    statearr_16860_16878[2] = null;
                                    statearr_16860_16878[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___16868, tc, fc);
          return function(switch__10182__auto__, c__10197__auto___16868, tc, fc) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_16864 = [null, null, null, null, null, null, null, null, null, null];
                statearr_16864[0] = state_machine__10183__auto__;
                statearr_16864[1] = 1;
                return statearr_16864;
              };
              var state_machine__10183__auto____1 = function(state_16846) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_16846);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e16865) {
                      if (e16865 instanceof Object) {
                        var ex__10186__auto__ = e16865;
                        var statearr_16866_16879 = state_16846;
                        statearr_16866_16879[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16846);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e16865;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__16880 = state_16846;
                    state_16846 = G__16880;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_16846) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_16846);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___16868, tc, fc);
        }();
        var state__10199__auto__ = function() {
          var statearr_16867 = f__10198__auto__.call(null);
          statearr_16867[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___16868;
          return statearr_16867;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___16868, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__10197__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto__) {
    return function() {
      var f__10198__auto__ = function() {
        var switch__10182__auto__ = function(c__10197__auto__) {
          return function(state_16927) {
            var state_val_16928 = state_16927[1];
            if (state_val_16928 === 7) {
              var inst_16923 = state_16927[2];
              var state_16927__$1 = state_16927;
              var statearr_16929_16945 = state_16927__$1;
              statearr_16929_16945[2] = inst_16923;
              statearr_16929_16945[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16928 === 6) {
                var inst_16913 = state_16927[7];
                var inst_16916 = state_16927[8];
                var inst_16920 = f.call(null, inst_16913, inst_16916);
                var inst_16913__$1 = inst_16920;
                var state_16927__$1 = function() {
                  var statearr_16930 = state_16927;
                  statearr_16930[7] = inst_16913__$1;
                  return statearr_16930;
                }();
                var statearr_16931_16946 = state_16927__$1;
                statearr_16931_16946[2] = null;
                statearr_16931_16946[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16928 === 5) {
                  var inst_16913 = state_16927[7];
                  var state_16927__$1 = state_16927;
                  var statearr_16932_16947 = state_16927__$1;
                  statearr_16932_16947[2] = inst_16913;
                  statearr_16932_16947[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_16928 === 4) {
                    var inst_16916 = state_16927[8];
                    var inst_16916__$1 = state_16927[2];
                    var inst_16917 = inst_16916__$1 == null;
                    var state_16927__$1 = function() {
                      var statearr_16933 = state_16927;
                      statearr_16933[8] = inst_16916__$1;
                      return statearr_16933;
                    }();
                    if (cljs.core.truth_(inst_16917)) {
                      var statearr_16934_16948 = state_16927__$1;
                      statearr_16934_16948[1] = 5;
                    } else {
                      var statearr_16935_16949 = state_16927__$1;
                      statearr_16935_16949[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16928 === 3) {
                      var inst_16925 = state_16927[2];
                      var state_16927__$1 = state_16927;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16927__$1, inst_16925);
                    } else {
                      if (state_val_16928 === 2) {
                        var state_16927__$1 = state_16927;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16927__$1, 4, ch);
                      } else {
                        if (state_val_16928 === 1) {
                          var inst_16913 = init;
                          var state_16927__$1 = function() {
                            var statearr_16936 = state_16927;
                            statearr_16936[7] = inst_16913;
                            return statearr_16936;
                          }();
                          var statearr_16937_16950 = state_16927__$1;
                          statearr_16937_16950[2] = null;
                          statearr_16937_16950[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10197__auto__);
        return function(switch__10182__auto__, c__10197__auto__) {
          return function() {
            var state_machine__10183__auto__ = null;
            var state_machine__10183__auto____0 = function() {
              var statearr_16941 = [null, null, null, null, null, null, null, null, null];
              statearr_16941[0] = state_machine__10183__auto__;
              statearr_16941[1] = 1;
              return statearr_16941;
            };
            var state_machine__10183__auto____1 = function(state_16927) {
              while (true) {
                var ret_value__10184__auto__ = function() {
                  try {
                    while (true) {
                      var result__10185__auto__ = switch__10182__auto__.call(null, state_16927);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10185__auto__;
                      }
                      break;
                    }
                  } catch (e16942) {
                    if (e16942 instanceof Object) {
                      var ex__10186__auto__ = e16942;
                      var statearr_16943_16951 = state_16927;
                      statearr_16943_16951[5] = ex__10186__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16927);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e16942;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__16952 = state_16927;
                  state_16927 = G__16952;
                  continue;
                } else {
                  return ret_value__10184__auto__;
                }
                break;
              }
            };
            state_machine__10183__auto__ = function(state_16927) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10183__auto____0.call(this);
                case 1:
                  return state_machine__10183__auto____1.call(this, state_16927);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
            return state_machine__10183__auto__;
          }();
        }(switch__10182__auto__, c__10197__auto__);
      }();
      var state__10199__auto__ = function() {
        var statearr_16944 = f__10198__auto__.call(null);
        statearr_16944[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto__;
        return statearr_16944;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
    };
  }(c__10197__auto__));
  return c__10197__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__10197__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto__) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto__) {
            return function(state_17014) {
              var state_val_17015 = state_17014[1];
              if (state_val_17015 === 7) {
                var inst_16995 = state_17014[7];
                var inst_17000 = state_17014[2];
                var inst_17001 = cljs.core.next.call(null, inst_16995);
                var inst_16995__$1 = inst_17001;
                var state_17014__$1 = function() {
                  var statearr_17016 = state_17014;
                  statearr_17016[7] = inst_16995__$1;
                  statearr_17016[8] = inst_17000;
                  return statearr_17016;
                }();
                var statearr_17017_17035 = state_17014__$1;
                statearr_17017_17035[2] = null;
                statearr_17017_17035[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17015 === 1) {
                  var inst_16994 = cljs.core.seq.call(null, coll);
                  var inst_16995 = inst_16994;
                  var state_17014__$1 = function() {
                    var statearr_17018 = state_17014;
                    statearr_17018[7] = inst_16995;
                    return statearr_17018;
                  }();
                  var statearr_17019_17036 = state_17014__$1;
                  statearr_17019_17036[2] = null;
                  statearr_17019_17036[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17015 === 4) {
                    var inst_16995 = state_17014[7];
                    var inst_16998 = cljs.core.first.call(null, inst_16995);
                    var state_17014__$1 = state_17014;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17014__$1, 7, ch, inst_16998);
                  } else {
                    if (state_val_17015 === 6) {
                      var inst_17010 = state_17014[2];
                      var state_17014__$1 = state_17014;
                      var statearr_17020_17037 = state_17014__$1;
                      statearr_17020_17037[2] = inst_17010;
                      statearr_17020_17037[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17015 === 3) {
                        var inst_17012 = state_17014[2];
                        var state_17014__$1 = state_17014;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17014__$1, inst_17012);
                      } else {
                        if (state_val_17015 === 2) {
                          var inst_16995 = state_17014[7];
                          var state_17014__$1 = state_17014;
                          if (cljs.core.truth_(inst_16995)) {
                            var statearr_17021_17038 = state_17014__$1;
                            statearr_17021_17038[1] = 4;
                          } else {
                            var statearr_17022_17039 = state_17014__$1;
                            statearr_17022_17039[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17015 === 9) {
                            var state_17014__$1 = state_17014;
                            var statearr_17023_17040 = state_17014__$1;
                            statearr_17023_17040[2] = null;
                            statearr_17023_17040[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17015 === 5) {
                              var state_17014__$1 = state_17014;
                              if (cljs.core.truth_(close_QMARK_)) {
                                var statearr_17024_17041 = state_17014__$1;
                                statearr_17024_17041[1] = 8;
                              } else {
                                var statearr_17025_17042 = state_17014__$1;
                                statearr_17025_17042[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17015 === 10) {
                                var inst_17008 = state_17014[2];
                                var state_17014__$1 = state_17014;
                                var statearr_17026_17043 = state_17014__$1;
                                statearr_17026_17043[2] = inst_17008;
                                statearr_17026_17043[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17015 === 8) {
                                  var inst_17005 = cljs.core.async.close_BANG_.call(null, ch);
                                  var state_17014__$1 = state_17014;
                                  var statearr_17027_17044 = state_17014__$1;
                                  statearr_17027_17044[2] = inst_17005;
                                  statearr_17027_17044[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto__);
          return function(switch__10182__auto__, c__10197__auto__) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_17031 = [null, null, null, null, null, null, null, null, null];
                statearr_17031[0] = state_machine__10183__auto__;
                statearr_17031[1] = 1;
                return statearr_17031;
              };
              var state_machine__10183__auto____1 = function(state_17014) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_17014);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e17032) {
                      if (e17032 instanceof Object) {
                        var ex__10186__auto__ = e17032;
                        var statearr_17033_17045 = state_17014;
                        statearr_17033_17045[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17014);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e17032;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__17046 = state_17014;
                    state_17014 = G__17046;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_17014) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_17014);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto__);
        }();
        var state__10199__auto__ = function() {
          var statearr_17034 = f__10198__auto__.call(null);
          statearr_17034[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto__;
          return statearr_17034;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto__));
    return c__10197__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj17048 = {};
  return obj17048;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3467__auto__ = _;
    if (and__3467__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4106__auto__ = _ == null ? null : _;
    return function() {
      var or__3479__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj17050 = {};
  return obj17050;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t17274 !== "undefined") {
    } else {
      cljs.core.async.t17274 = function(cs, ch, mult, meta17275) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta17275 = meta17275;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17274.cljs$lang$type = true;
      cljs.core.async.t17274.cljs$lang$ctorStr = "cljs.core.async/t17274";
      cljs.core.async.t17274.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t17274");
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t17274.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17274.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_17276) {
          var self__ = this;
          var _17276__$1 = this;
          return self__.meta17275;
        };
      }(cs);
      cljs.core.async.t17274.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_17276, meta17275__$1) {
          var self__ = this;
          var _17276__$1 = this;
          return new cljs.core.async.t17274(self__.cs, self__.ch, self__.mult, meta17275__$1);
        };
      }(cs);
      cljs.core.async.__GT_t17274 = function(cs) {
        return function __GT_t17274(cs__$1, ch__$1, mult__$1, meta17275) {
          return new cljs.core.async.t17274(cs__$1, ch__$1, mult__$1, meta17275);
        };
      }(cs);
    }
    return new cljs.core.async.t17274(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__10197__auto___17497 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___17497, cs, m, dchan, dctr, done) {
    return function() {
      var f__10198__auto__ = function() {
        var switch__10182__auto__ = function(c__10197__auto___17497, cs, m, dchan, dctr, done) {
          return function(state_17411) {
            var state_val_17412 = state_17411[1];
            if (state_val_17412 === 7) {
              var inst_17407 = state_17411[2];
              var state_17411__$1 = state_17411;
              var statearr_17413_17498 = state_17411__$1;
              statearr_17413_17498[2] = inst_17407;
              statearr_17413_17498[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17412 === 20) {
                var inst_17308 = state_17411[7];
                var inst_17318 = cljs.core.first.call(null, inst_17308);
                var inst_17319 = cljs.core.nth.call(null, inst_17318, 0, null);
                var inst_17320 = cljs.core.nth.call(null, inst_17318, 1, null);
                var state_17411__$1 = function() {
                  var statearr_17414 = state_17411;
                  statearr_17414[8] = inst_17319;
                  return statearr_17414;
                }();
                if (cljs.core.truth_(inst_17320)) {
                  var statearr_17415_17499 = state_17411__$1;
                  statearr_17415_17499[1] = 22;
                } else {
                  var statearr_17416_17500 = state_17411__$1;
                  statearr_17416_17500[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_17412 === 27) {
                  var inst_17348 = state_17411[9];
                  var inst_17350 = state_17411[10];
                  var inst_17355 = cljs.core._nth.call(null, inst_17348, inst_17350);
                  var state_17411__$1 = function() {
                    var statearr_17417 = state_17411;
                    statearr_17417[11] = inst_17355;
                    return statearr_17417;
                  }();
                  var statearr_17418_17501 = state_17411__$1;
                  statearr_17418_17501[2] = null;
                  statearr_17418_17501[1] = 32;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17412 === 1) {
                    var state_17411__$1 = state_17411;
                    var statearr_17419_17502 = state_17411__$1;
                    statearr_17419_17502[2] = null;
                    statearr_17419_17502[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17412 === 24) {
                      var inst_17308 = state_17411[7];
                      var inst_17325 = state_17411[2];
                      var inst_17326 = cljs.core.next.call(null, inst_17308);
                      var inst_17288 = inst_17326;
                      var inst_17289 = null;
                      var inst_17290 = 0;
                      var inst_17291 = 0;
                      var state_17411__$1 = function() {
                        var statearr_17420 = state_17411;
                        statearr_17420[12] = inst_17289;
                        statearr_17420[13] = inst_17290;
                        statearr_17420[14] = inst_17325;
                        statearr_17420[15] = inst_17288;
                        statearr_17420[16] = inst_17291;
                        return statearr_17420;
                      }();
                      var statearr_17421_17503 = state_17411__$1;
                      statearr_17421_17503[2] = null;
                      statearr_17421_17503[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17412 === 39) {
                        var inst_17368 = state_17411[17];
                        var inst_17386 = state_17411[2];
                        var inst_17387 = cljs.core.next.call(null, inst_17368);
                        var inst_17347 = inst_17387;
                        var inst_17348 = null;
                        var inst_17349 = 0;
                        var inst_17350 = 0;
                        var state_17411__$1 = function() {
                          var statearr_17425 = state_17411;
                          statearr_17425[9] = inst_17348;
                          statearr_17425[18] = inst_17349;
                          statearr_17425[19] = inst_17386;
                          statearr_17425[20] = inst_17347;
                          statearr_17425[10] = inst_17350;
                          return statearr_17425;
                        }();
                        var statearr_17426_17504 = state_17411__$1;
                        statearr_17426_17504[2] = null;
                        statearr_17426_17504[1] = 25;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17412 === 4) {
                          var inst_17279 = state_17411[21];
                          var inst_17279__$1 = state_17411[2];
                          var inst_17280 = inst_17279__$1 == null;
                          var state_17411__$1 = function() {
                            var statearr_17427 = state_17411;
                            statearr_17427[21] = inst_17279__$1;
                            return statearr_17427;
                          }();
                          if (cljs.core.truth_(inst_17280)) {
                            var statearr_17428_17505 = state_17411__$1;
                            statearr_17428_17505[1] = 5;
                          } else {
                            var statearr_17429_17506 = state_17411__$1;
                            statearr_17429_17506[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17412 === 15) {
                            var inst_17289 = state_17411[12];
                            var inst_17290 = state_17411[13];
                            var inst_17288 = state_17411[15];
                            var inst_17291 = state_17411[16];
                            var inst_17304 = state_17411[2];
                            var inst_17305 = inst_17291 + 1;
                            var tmp17422 = inst_17289;
                            var tmp17423 = inst_17290;
                            var tmp17424 = inst_17288;
                            var inst_17288__$1 = tmp17424;
                            var inst_17289__$1 = tmp17422;
                            var inst_17290__$1 = tmp17423;
                            var inst_17291__$1 = inst_17305;
                            var state_17411__$1 = function() {
                              var statearr_17430 = state_17411;
                              statearr_17430[12] = inst_17289__$1;
                              statearr_17430[22] = inst_17304;
                              statearr_17430[13] = inst_17290__$1;
                              statearr_17430[15] = inst_17288__$1;
                              statearr_17430[16] = inst_17291__$1;
                              return statearr_17430;
                            }();
                            var statearr_17431_17507 = state_17411__$1;
                            statearr_17431_17507[2] = null;
                            statearr_17431_17507[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17412 === 21) {
                              var inst_17329 = state_17411[2];
                              var state_17411__$1 = state_17411;
                              var statearr_17432_17508 = state_17411__$1;
                              statearr_17432_17508[2] = inst_17329;
                              statearr_17432_17508[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_17412 === 31) {
                                var inst_17355 = state_17411[11];
                                var inst_17356 = state_17411[2];
                                var inst_17357 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_17358 = cljs.core.async.untap_STAR_.call(null, m, inst_17355);
                                var state_17411__$1 = function() {
                                  var statearr_17433 = state_17411;
                                  statearr_17433[23] = inst_17357;
                                  statearr_17433[24] = inst_17356;
                                  return statearr_17433;
                                }();
                                var statearr_17434_17509 = state_17411__$1;
                                statearr_17434_17509[2] = inst_17358;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17411__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17412 === 32) {
                                  var inst_17355 = state_17411[11];
                                  var inst_17279 = state_17411[21];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_17411, 31, Object, null, 30);
                                  var inst_17362 = cljs.core.async.put_BANG_.call(null, inst_17355, inst_17279, done);
                                  var state_17411__$1 = state_17411;
                                  var statearr_17435_17510 = state_17411__$1;
                                  statearr_17435_17510[2] = inst_17362;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17411__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17412 === 40) {
                                    var inst_17377 = state_17411[25];
                                    var inst_17378 = state_17411[2];
                                    var inst_17379 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_17380 = cljs.core.async.untap_STAR_.call(null, m, inst_17377);
                                    var state_17411__$1 = function() {
                                      var statearr_17436 = state_17411;
                                      statearr_17436[26] = inst_17379;
                                      statearr_17436[27] = inst_17378;
                                      return statearr_17436;
                                    }();
                                    var statearr_17437_17511 = state_17411__$1;
                                    statearr_17437_17511[2] = inst_17380;
                                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17411__$1);
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17412 === 33) {
                                      var inst_17368 = state_17411[17];
                                      var inst_17370 = cljs.core.chunked_seq_QMARK_.call(null, inst_17368);
                                      var state_17411__$1 = state_17411;
                                      if (inst_17370) {
                                        var statearr_17438_17512 = state_17411__$1;
                                        statearr_17438_17512[1] = 36;
                                      } else {
                                        var statearr_17439_17513 = state_17411__$1;
                                        statearr_17439_17513[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17412 === 13) {
                                        var inst_17298 = state_17411[28];
                                        var inst_17301 = cljs.core.async.close_BANG_.call(null, inst_17298);
                                        var state_17411__$1 = state_17411;
                                        var statearr_17440_17514 = state_17411__$1;
                                        statearr_17440_17514[2] = inst_17301;
                                        statearr_17440_17514[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17412 === 22) {
                                          var inst_17319 = state_17411[8];
                                          var inst_17322 = cljs.core.async.close_BANG_.call(null, inst_17319);
                                          var state_17411__$1 = state_17411;
                                          var statearr_17441_17515 = state_17411__$1;
                                          statearr_17441_17515[2] = inst_17322;
                                          statearr_17441_17515[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17412 === 36) {
                                            var inst_17368 = state_17411[17];
                                            var inst_17372 = cljs.core.chunk_first.call(null, inst_17368);
                                            var inst_17373 = cljs.core.chunk_rest.call(null, inst_17368);
                                            var inst_17374 = cljs.core.count.call(null, inst_17372);
                                            var inst_17347 = inst_17373;
                                            var inst_17348 = inst_17372;
                                            var inst_17349 = inst_17374;
                                            var inst_17350 = 0;
                                            var state_17411__$1 = function() {
                                              var statearr_17442 = state_17411;
                                              statearr_17442[9] = inst_17348;
                                              statearr_17442[18] = inst_17349;
                                              statearr_17442[20] = inst_17347;
                                              statearr_17442[10] = inst_17350;
                                              return statearr_17442;
                                            }();
                                            var statearr_17443_17516 = state_17411__$1;
                                            statearr_17443_17516[2] = null;
                                            statearr_17443_17516[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17412 === 41) {
                                              var inst_17377 = state_17411[25];
                                              var inst_17279 = state_17411[21];
                                              var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_17411, 40, Object, null, 39);
                                              var inst_17384 = cljs.core.async.put_BANG_.call(null, inst_17377, inst_17279, done);
                                              var state_17411__$1 = state_17411;
                                              var statearr_17444_17517 = state_17411__$1;
                                              statearr_17444_17517[2] = inst_17384;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17411__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_17412 === 43) {
                                                var state_17411__$1 = state_17411;
                                                var statearr_17445_17518 = state_17411__$1;
                                                statearr_17445_17518[2] = null;
                                                statearr_17445_17518[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_17412 === 29) {
                                                  var inst_17395 = state_17411[2];
                                                  var state_17411__$1 = state_17411;
                                                  var statearr_17446_17519 = state_17411__$1;
                                                  statearr_17446_17519[2] = inst_17395;
                                                  statearr_17446_17519[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17412 === 44) {
                                                    var inst_17404 = state_17411[2];
                                                    var state_17411__$1 = function() {
                                                      var statearr_17447 = state_17411;
                                                      statearr_17447[29] = inst_17404;
                                                      return statearr_17447;
                                                    }();
                                                    var statearr_17448_17520 = state_17411__$1;
                                                    statearr_17448_17520[2] = null;
                                                    statearr_17448_17520[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17412 === 6) {
                                                      var inst_17339 = state_17411[30];
                                                      var inst_17338 = cljs.core.deref.call(null, cs);
                                                      var inst_17339__$1 = cljs.core.keys.call(null, inst_17338);
                                                      var inst_17340 = cljs.core.count.call(null, inst_17339__$1);
                                                      var inst_17341 = cljs.core.reset_BANG_.call(null, dctr, inst_17340);
                                                      var inst_17346 = cljs.core.seq.call(null, inst_17339__$1);
                                                      var inst_17347 = inst_17346;
                                                      var inst_17348 = null;
                                                      var inst_17349 = 0;
                                                      var inst_17350 = 0;
                                                      var state_17411__$1 = function() {
                                                        var statearr_17449 = state_17411;
                                                        statearr_17449[9] = inst_17348;
                                                        statearr_17449[18] = inst_17349;
                                                        statearr_17449[31] = inst_17341;
                                                        statearr_17449[30] = inst_17339__$1;
                                                        statearr_17449[20] = inst_17347;
                                                        statearr_17449[10] = inst_17350;
                                                        return statearr_17449;
                                                      }();
                                                      var statearr_17450_17521 = state_17411__$1;
                                                      statearr_17450_17521[2] = null;
                                                      statearr_17450_17521[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_17412 === 28) {
                                                        var inst_17368 = state_17411[17];
                                                        var inst_17347 = state_17411[20];
                                                        var inst_17368__$1 = cljs.core.seq.call(null, inst_17347);
                                                        var state_17411__$1 = function() {
                                                          var statearr_17451 = state_17411;
                                                          statearr_17451[17] = inst_17368__$1;
                                                          return statearr_17451;
                                                        }();
                                                        if (inst_17368__$1) {
                                                          var statearr_17452_17522 = state_17411__$1;
                                                          statearr_17452_17522[1] = 33;
                                                        } else {
                                                          var statearr_17453_17523 = state_17411__$1;
                                                          statearr_17453_17523[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_17412 === 25) {
                                                          var inst_17349 = state_17411[18];
                                                          var inst_17350 = state_17411[10];
                                                          var inst_17352 = inst_17350 < inst_17349;
                                                          var inst_17353 = inst_17352;
                                                          var state_17411__$1 = state_17411;
                                                          if (cljs.core.truth_(inst_17353)) {
                                                            var statearr_17454_17524 = state_17411__$1;
                                                            statearr_17454_17524[1] = 27;
                                                          } else {
                                                            var statearr_17455_17525 = state_17411__$1;
                                                            statearr_17455_17525[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_17412 === 34) {
                                                            var state_17411__$1 = state_17411;
                                                            var statearr_17456_17526 = state_17411__$1;
                                                            statearr_17456_17526[2] = null;
                                                            statearr_17456_17526[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_17412 === 17) {
                                                              var state_17411__$1 = state_17411;
                                                              var statearr_17457_17527 = state_17411__$1;
                                                              statearr_17457_17527[2] = null;
                                                              statearr_17457_17527[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_17412 === 3) {
                                                                var inst_17409 = state_17411[2];
                                                                var state_17411__$1 = state_17411;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17411__$1, inst_17409);
                                                              } else {
                                                                if (state_val_17412 === 12) {
                                                                  var inst_17334 = state_17411[2];
                                                                  var state_17411__$1 = state_17411;
                                                                  var statearr_17458_17528 = state_17411__$1;
                                                                  statearr_17458_17528[2] = inst_17334;
                                                                  statearr_17458_17528[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_17412 === 2) {
                                                                    var state_17411__$1 = state_17411;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17411__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_17412 === 23) {
                                                                      var state_17411__$1 = state_17411;
                                                                      var statearr_17459_17529 = state_17411__$1;
                                                                      statearr_17459_17529[2] = null;
                                                                      statearr_17459_17529[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_17412 === 35) {
                                                                        var inst_17393 = state_17411[2];
                                                                        var state_17411__$1 = state_17411;
                                                                        var statearr_17460_17530 = state_17411__$1;
                                                                        statearr_17460_17530[2] = inst_17393;
                                                                        statearr_17460_17530[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_17412 === 19) {
                                                                          var inst_17308 = state_17411[7];
                                                                          var inst_17312 = cljs.core.chunk_first.call(null, inst_17308);
                                                                          var inst_17313 = cljs.core.chunk_rest.call(null, inst_17308);
                                                                          var inst_17314 = cljs.core.count.call(null, inst_17312);
                                                                          var inst_17288 = inst_17313;
                                                                          var inst_17289 = inst_17312;
                                                                          var inst_17290 = inst_17314;
                                                                          var inst_17291 = 0;
                                                                          var state_17411__$1 = function() {
                                                                            var statearr_17461 = state_17411;
                                                                            statearr_17461[12] = inst_17289;
                                                                            statearr_17461[13] = inst_17290;
                                                                            statearr_17461[15] = inst_17288;
                                                                            statearr_17461[16] = inst_17291;
                                                                            return statearr_17461;
                                                                          }();
                                                                          var statearr_17462_17531 = state_17411__$1;
                                                                          statearr_17462_17531[2] = null;
                                                                          statearr_17462_17531[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_17412 === 11) {
                                                                            var inst_17308 = state_17411[7];
                                                                            var inst_17288 = state_17411[15];
                                                                            var inst_17308__$1 = cljs.core.seq.call(null, inst_17288);
                                                                            var state_17411__$1 = function() {
                                                                              var statearr_17463 = state_17411;
                                                                              statearr_17463[7] = inst_17308__$1;
                                                                              return statearr_17463;
                                                                            }();
                                                                            if (inst_17308__$1) {
                                                                              var statearr_17464_17532 = state_17411__$1;
                                                                              statearr_17464_17532[1] = 16;
                                                                            } else {
                                                                              var statearr_17465_17533 = state_17411__$1;
                                                                              statearr_17465_17533[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_17412 === 9) {
                                                                              var inst_17336 = state_17411[2];
                                                                              var state_17411__$1 = state_17411;
                                                                              var statearr_17466_17534 = state_17411__$1;
                                                                              statearr_17466_17534[2] = inst_17336;
                                                                              statearr_17466_17534[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_17412 === 5) {
                                                                                var inst_17286 = cljs.core.deref.call(null, cs);
                                                                                var inst_17287 = cljs.core.seq.call(null, inst_17286);
                                                                                var inst_17288 = inst_17287;
                                                                                var inst_17289 = null;
                                                                                var inst_17290 = 0;
                                                                                var inst_17291 = 0;
                                                                                var state_17411__$1 = function() {
                                                                                  var statearr_17467 = state_17411;
                                                                                  statearr_17467[12] = inst_17289;
                                                                                  statearr_17467[13] = inst_17290;
                                                                                  statearr_17467[15] = inst_17288;
                                                                                  statearr_17467[16] = inst_17291;
                                                                                  return statearr_17467;
                                                                                }();
                                                                                var statearr_17468_17535 = state_17411__$1;
                                                                                statearr_17468_17535[2] = null;
                                                                                statearr_17468_17535[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_17412 === 14) {
                                                                                  var state_17411__$1 = state_17411;
                                                                                  var statearr_17469_17536 = state_17411__$1;
                                                                                  statearr_17469_17536[2] = null;
                                                                                  statearr_17469_17536[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_17412 === 45) {
                                                                                    var inst_17401 = state_17411[2];
                                                                                    var state_17411__$1 = state_17411;
                                                                                    var statearr_17470_17537 = state_17411__$1;
                                                                                    statearr_17470_17537[2] = inst_17401;
                                                                                    statearr_17470_17537[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_17412 === 26) {
                                                                                      var inst_17339 = state_17411[30];
                                                                                      var inst_17397 = state_17411[2];
                                                                                      var inst_17398 = cljs.core.seq.call(null, inst_17339);
                                                                                      var state_17411__$1 = function() {
                                                                                        var statearr_17471 = state_17411;
                                                                                        statearr_17471[32] = inst_17397;
                                                                                        return statearr_17471;
                                                                                      }();
                                                                                      if (inst_17398) {
                                                                                        var statearr_17472_17538 = state_17411__$1;
                                                                                        statearr_17472_17538[1] = 42;
                                                                                      } else {
                                                                                        var statearr_17473_17539 = state_17411__$1;
                                                                                        statearr_17473_17539[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_17412 === 16) {
                                                                                        var inst_17308 = state_17411[7];
                                                                                        var inst_17310 = cljs.core.chunked_seq_QMARK_.call(null, inst_17308);
                                                                                        var state_17411__$1 = state_17411;
                                                                                        if (inst_17310) {
                                                                                          var statearr_17477_17540 = state_17411__$1;
                                                                                          statearr_17477_17540[1] = 19;
                                                                                        } else {
                                                                                          var statearr_17478_17541 = state_17411__$1;
                                                                                          statearr_17478_17541[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_17412 === 38) {
                                                                                          var inst_17390 = state_17411[2];
                                                                                          var state_17411__$1 = state_17411;
                                                                                          var statearr_17479_17542 = state_17411__$1;
                                                                                          statearr_17479_17542[2] = inst_17390;
                                                                                          statearr_17479_17542[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_17412 === 30) {
                                                                                            var inst_17348 = state_17411[9];
                                                                                            var inst_17349 = state_17411[18];
                                                                                            var inst_17347 = state_17411[20];
                                                                                            var inst_17350 = state_17411[10];
                                                                                            var inst_17364 = state_17411[2];
                                                                                            var inst_17365 = inst_17350 + 1;
                                                                                            var tmp17474 = inst_17348;
                                                                                            var tmp17475 = inst_17349;
                                                                                            var tmp17476 = inst_17347;
                                                                                            var inst_17347__$1 = tmp17476;
                                                                                            var inst_17348__$1 = tmp17474;
                                                                                            var inst_17349__$1 = tmp17475;
                                                                                            var inst_17350__$1 = inst_17365;
                                                                                            var state_17411__$1 = function() {
                                                                                              var statearr_17480 = state_17411;
                                                                                              statearr_17480[9] = inst_17348__$1;
                                                                                              statearr_17480[18] = inst_17349__$1;
                                                                                              statearr_17480[33] = inst_17364;
                                                                                              statearr_17480[20] = inst_17347__$1;
                                                                                              statearr_17480[10] = inst_17350__$1;
                                                                                              return statearr_17480;
                                                                                            }();
                                                                                            var statearr_17481_17543 = state_17411__$1;
                                                                                            statearr_17481_17543[2] = null;
                                                                                            statearr_17481_17543[1] = 25;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_17412 === 10) {
                                                                                              var inst_17289 = state_17411[12];
                                                                                              var inst_17291 = state_17411[16];
                                                                                              var inst_17297 = cljs.core._nth.call(null, inst_17289, inst_17291);
                                                                                              var inst_17298 = cljs.core.nth.call(null, inst_17297, 0, null);
                                                                                              var inst_17299 = cljs.core.nth.call(null, inst_17297, 1, null);
                                                                                              var state_17411__$1 = function() {
                                                                                                var statearr_17482 = state_17411;
                                                                                                statearr_17482[28] = inst_17298;
                                                                                                return statearr_17482;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_17299)) {
                                                                                                var statearr_17483_17544 = state_17411__$1;
                                                                                                statearr_17483_17544[1] = 13;
                                                                                              } else {
                                                                                                var statearr_17484_17545 = state_17411__$1;
                                                                                                statearr_17484_17545[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_17412 === 18) {
                                                                                                var inst_17332 = state_17411[2];
                                                                                                var state_17411__$1 = state_17411;
                                                                                                var statearr_17485_17546 = state_17411__$1;
                                                                                                statearr_17485_17546[2] = inst_17332;
                                                                                                statearr_17485_17546[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_17412 === 42) {
                                                                                                  var state_17411__$1 = state_17411;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17411__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_17412 === 37) {
                                                                                                    var inst_17368 = state_17411[17];
                                                                                                    var inst_17377 = cljs.core.first.call(null, inst_17368);
                                                                                                    var state_17411__$1 = function() {
                                                                                                      var statearr_17486 = state_17411;
                                                                                                      statearr_17486[25] = inst_17377;
                                                                                                      return statearr_17486;
                                                                                                    }();
                                                                                                    var statearr_17487_17547 = state_17411__$1;
                                                                                                    statearr_17487_17547[2] = null;
                                                                                                    statearr_17487_17547[1] = 41;
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                  } else {
                                                                                                    if (state_val_17412 === 8) {
                                                                                                      var inst_17290 = state_17411[13];
                                                                                                      var inst_17291 = state_17411[16];
                                                                                                      var inst_17293 = inst_17291 < inst_17290;
                                                                                                      var inst_17294 = inst_17293;
                                                                                                      var state_17411__$1 = state_17411;
                                                                                                      if (cljs.core.truth_(inst_17294)) {
                                                                                                        var statearr_17488_17548 = state_17411__$1;
                                                                                                        statearr_17488_17548[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_17489_17549 = state_17411__$1;
                                                                                                        statearr_17489_17549[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10197__auto___17497, cs, m, dchan, dctr, done);
        return function(switch__10182__auto__, c__10197__auto___17497, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__10183__auto__ = null;
            var state_machine__10183__auto____0 = function() {
              var statearr_17493 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17493[0] = state_machine__10183__auto__;
              statearr_17493[1] = 1;
              return statearr_17493;
            };
            var state_machine__10183__auto____1 = function(state_17411) {
              while (true) {
                var ret_value__10184__auto__ = function() {
                  try {
                    while (true) {
                      var result__10185__auto__ = switch__10182__auto__.call(null, state_17411);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10185__auto__;
                      }
                      break;
                    }
                  } catch (e17494) {
                    if (e17494 instanceof Object) {
                      var ex__10186__auto__ = e17494;
                      var statearr_17495_17550 = state_17411;
                      statearr_17495_17550[5] = ex__10186__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17411);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e17494;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__17551 = state_17411;
                  state_17411 = G__17551;
                  continue;
                } else {
                  return ret_value__10184__auto__;
                }
                break;
              }
            };
            state_machine__10183__auto__ = function(state_17411) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10183__auto____0.call(this);
                case 1:
                  return state_machine__10183__auto____1.call(this, state_17411);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
            return state_machine__10183__auto__;
          }();
        }(switch__10182__auto__, c__10197__auto___17497, cs, m, dchan, dctr, done);
      }();
      var state__10199__auto__ = function() {
        var statearr_17496 = f__10198__auto__.call(null);
        statearr_17496[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___17497;
        return statearr_17496;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
    };
  }(c__10197__auto___17497, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj17553 = {};
  return obj17553;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3467__auto__ = m;
    if (and__3467__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4106__auto__ = m == null ? null : m;
    return function() {
      var or__3479__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t17663 !== "undefined") {
    } else {
      cljs.core.async.t17663 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta17664) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta17664 = meta17664;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t17663.cljs$lang$type = true;
      cljs.core.async.t17663.cljs$lang$ctorStr = "cljs.core.async/t17663";
      cljs.core.async.t17663.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
          return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t17663");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t17663.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17665) {
          var self__ = this;
          var _17665__$1 = this;
          return self__.meta17664;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t17663.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_17665, meta17664__$1) {
          var self__ = this;
          var _17665__$1 = this;
          return new cljs.core.async.t17663(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta17664__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t17663 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t17663(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta17664) {
          return new cljs.core.async.t17663(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta17664);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t17663(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__10197__auto___17772 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__10198__auto__ = function() {
        var switch__10182__auto__ = function(c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_17730) {
            var state_val_17731 = state_17730[1];
            if (state_val_17731 === 7) {
              var inst_17679 = state_17730[7];
              var inst_17684 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17679);
              var state_17730__$1 = state_17730;
              var statearr_17732_17773 = state_17730__$1;
              statearr_17732_17773[2] = inst_17684;
              statearr_17732_17773[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_17731 === 20) {
                var inst_17694 = state_17730[8];
                var state_17730__$1 = state_17730;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17730__$1, 23, out, inst_17694);
              } else {
                if (state_val_17731 === 1) {
                  var inst_17669 = state_17730[9];
                  var inst_17669__$1 = calc_state.call(null);
                  var inst_17670 = cljs.core.seq_QMARK_.call(null, inst_17669__$1);
                  var state_17730__$1 = function() {
                    var statearr_17733 = state_17730;
                    statearr_17733[9] = inst_17669__$1;
                    return statearr_17733;
                  }();
                  if (inst_17670) {
                    var statearr_17734_17774 = state_17730__$1;
                    statearr_17734_17774[1] = 2;
                  } else {
                    var statearr_17735_17775 = state_17730__$1;
                    statearr_17735_17775[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_17731 === 4) {
                    var inst_17669 = state_17730[9];
                    var inst_17675 = state_17730[2];
                    var inst_17676 = cljs.core.get.call(null, inst_17675, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                    var inst_17677 = cljs.core.get.call(null, inst_17675, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                    var inst_17678 = cljs.core.get.call(null, inst_17675, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                    var inst_17679 = inst_17669;
                    var state_17730__$1 = function() {
                      var statearr_17736 = state_17730;
                      statearr_17736[10] = inst_17678;
                      statearr_17736[11] = inst_17676;
                      statearr_17736[12] = inst_17677;
                      statearr_17736[7] = inst_17679;
                      return statearr_17736;
                    }();
                    var statearr_17737_17776 = state_17730__$1;
                    statearr_17737_17776[2] = null;
                    statearr_17737_17776[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_17731 === 15) {
                      var state_17730__$1 = state_17730;
                      var statearr_17738_17777 = state_17730__$1;
                      statearr_17738_17777[2] = null;
                      statearr_17738_17777[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_17731 === 21) {
                        var state_17730__$1 = state_17730;
                        var statearr_17739_17778 = state_17730__$1;
                        statearr_17739_17778[2] = null;
                        statearr_17739_17778[1] = 22;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_17731 === 13) {
                          var inst_17726 = state_17730[2];
                          var state_17730__$1 = state_17730;
                          var statearr_17740_17779 = state_17730__$1;
                          statearr_17740_17779[2] = inst_17726;
                          statearr_17740_17779[1] = 6;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_17731 === 22) {
                            var inst_17687 = state_17730[13];
                            var inst_17723 = state_17730[2];
                            var inst_17679 = inst_17687;
                            var state_17730__$1 = function() {
                              var statearr_17741 = state_17730;
                              statearr_17741[7] = inst_17679;
                              statearr_17741[14] = inst_17723;
                              return statearr_17741;
                            }();
                            var statearr_17742_17780 = state_17730__$1;
                            statearr_17742_17780[2] = null;
                            statearr_17742_17780[1] = 5;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_17731 === 6) {
                              var inst_17728 = state_17730[2];
                              var state_17730__$1 = state_17730;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17730__$1, inst_17728);
                            } else {
                              if (state_val_17731 === 17) {
                                var inst_17709 = state_17730[15];
                                var state_17730__$1 = state_17730;
                                var statearr_17743_17781 = state_17730__$1;
                                statearr_17743_17781[2] = inst_17709;
                                statearr_17743_17781[1] = 19;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_17731 === 3) {
                                  var inst_17669 = state_17730[9];
                                  var state_17730__$1 = state_17730;
                                  var statearr_17744_17782 = state_17730__$1;
                                  statearr_17744_17782[2] = inst_17669;
                                  statearr_17744_17782[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_17731 === 12) {
                                    var inst_17690 = state_17730[16];
                                    var inst_17695 = state_17730[17];
                                    var inst_17709 = state_17730[15];
                                    var inst_17709__$1 = inst_17690.call(null, inst_17695);
                                    var state_17730__$1 = function() {
                                      var statearr_17745 = state_17730;
                                      statearr_17745[15] = inst_17709__$1;
                                      return statearr_17745;
                                    }();
                                    if (cljs.core.truth_(inst_17709__$1)) {
                                      var statearr_17746_17783 = state_17730__$1;
                                      statearr_17746_17783[1] = 17;
                                    } else {
                                      var statearr_17747_17784 = state_17730__$1;
                                      statearr_17747_17784[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_17731 === 2) {
                                      var inst_17669 = state_17730[9];
                                      var inst_17672 = cljs.core.apply.call(null, cljs.core.hash_map, inst_17669);
                                      var state_17730__$1 = state_17730;
                                      var statearr_17748_17785 = state_17730__$1;
                                      statearr_17748_17785[2] = inst_17672;
                                      statearr_17748_17785[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_17731 === 23) {
                                        var inst_17720 = state_17730[2];
                                        var state_17730__$1 = state_17730;
                                        var statearr_17749_17786 = state_17730__$1;
                                        statearr_17749_17786[2] = inst_17720;
                                        statearr_17749_17786[1] = 22;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_17731 === 19) {
                                          var inst_17717 = state_17730[2];
                                          var state_17730__$1 = state_17730;
                                          if (cljs.core.truth_(inst_17717)) {
                                            var statearr_17750_17787 = state_17730__$1;
                                            statearr_17750_17787[1] = 20;
                                          } else {
                                            var statearr_17751_17788 = state_17730__$1;
                                            statearr_17751_17788[1] = 21;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_17731 === 11) {
                                            var inst_17694 = state_17730[8];
                                            var inst_17700 = inst_17694 == null;
                                            var state_17730__$1 = state_17730;
                                            if (cljs.core.truth_(inst_17700)) {
                                              var statearr_17752_17789 = state_17730__$1;
                                              statearr_17752_17789[1] = 14;
                                            } else {
                                              var statearr_17753_17790 = state_17730__$1;
                                              statearr_17753_17790[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_17731 === 9) {
                                              var inst_17687 = state_17730[13];
                                              var inst_17687__$1 = state_17730[2];
                                              var inst_17688 = cljs.core.get.call(null, inst_17687__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                                              var inst_17689 = cljs.core.get.call(null, inst_17687__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                                              var inst_17690 = cljs.core.get.call(null, inst_17687__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                                              var state_17730__$1 = function() {
                                                var statearr_17754 = state_17730;
                                                statearr_17754[16] = inst_17690;
                                                statearr_17754[18] = inst_17689;
                                                statearr_17754[13] = inst_17687__$1;
                                                return statearr_17754;
                                              }();
                                              return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_17730__$1, 10, inst_17688);
                                            } else {
                                              if (state_val_17731 === 5) {
                                                var inst_17679 = state_17730[7];
                                                var inst_17682 = cljs.core.seq_QMARK_.call(null, inst_17679);
                                                var state_17730__$1 = state_17730;
                                                if (inst_17682) {
                                                  var statearr_17755_17791 = state_17730__$1;
                                                  statearr_17755_17791[1] = 7;
                                                } else {
                                                  var statearr_17756_17792 = state_17730__$1;
                                                  statearr_17756_17792[1] = 8;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_17731 === 14) {
                                                  var inst_17695 = state_17730[17];
                                                  var inst_17702 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_17695);
                                                  var state_17730__$1 = state_17730;
                                                  var statearr_17757_17793 = state_17730__$1;
                                                  statearr_17757_17793[2] = inst_17702;
                                                  statearr_17757_17793[1] = 16;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_17731 === 16) {
                                                    var inst_17705 = state_17730[2];
                                                    var inst_17706 = calc_state.call(null);
                                                    var inst_17679 = inst_17706;
                                                    var state_17730__$1 = function() {
                                                      var statearr_17758 = state_17730;
                                                      statearr_17758[19] = inst_17705;
                                                      statearr_17758[7] = inst_17679;
                                                      return statearr_17758;
                                                    }();
                                                    var statearr_17759_17794 = state_17730__$1;
                                                    statearr_17759_17794[2] = null;
                                                    statearr_17759_17794[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_17731 === 10) {
                                                      var inst_17695 = state_17730[17];
                                                      var inst_17694 = state_17730[8];
                                                      var inst_17693 = state_17730[2];
                                                      var inst_17694__$1 = cljs.core.nth.call(null, inst_17693, 0, null);
                                                      var inst_17695__$1 = cljs.core.nth.call(null, inst_17693, 1, null);
                                                      var inst_17696 = inst_17694__$1 == null;
                                                      var inst_17697 = cljs.core._EQ_.call(null, inst_17695__$1, change);
                                                      var inst_17698 = inst_17696 || inst_17697;
                                                      var state_17730__$1 = function() {
                                                        var statearr_17760 = state_17730;
                                                        statearr_17760[17] = inst_17695__$1;
                                                        statearr_17760[8] = inst_17694__$1;
                                                        return statearr_17760;
                                                      }();
                                                      if (cljs.core.truth_(inst_17698)) {
                                                        var statearr_17761_17795 = state_17730__$1;
                                                        statearr_17761_17795[1] = 11;
                                                      } else {
                                                        var statearr_17762_17796 = state_17730__$1;
                                                        statearr_17762_17796[1] = 12;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_17731 === 18) {
                                                        var inst_17690 = state_17730[16];
                                                        var inst_17689 = state_17730[18];
                                                        var inst_17695 = state_17730[17];
                                                        var inst_17712 = cljs.core.empty_QMARK_.call(null, inst_17690);
                                                        var inst_17713 = inst_17689.call(null, inst_17695);
                                                        var inst_17714 = cljs.core.not.call(null, inst_17713);
                                                        var inst_17715 = inst_17712 && inst_17714;
                                                        var state_17730__$1 = state_17730;
                                                        var statearr_17763_17797 = state_17730__$1;
                                                        statearr_17763_17797[2] = inst_17715;
                                                        statearr_17763_17797[1] = 19;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_17731 === 8) {
                                                          var inst_17679 = state_17730[7];
                                                          var state_17730__$1 = state_17730;
                                                          var statearr_17764_17798 = state_17730__$1;
                                                          statearr_17764_17798[2] = inst_17679;
                                                          statearr_17764_17798[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__10182__auto__, c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__10183__auto__ = null;
            var state_machine__10183__auto____0 = function() {
              var statearr_17768 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17768[0] = state_machine__10183__auto__;
              statearr_17768[1] = 1;
              return statearr_17768;
            };
            var state_machine__10183__auto____1 = function(state_17730) {
              while (true) {
                var ret_value__10184__auto__ = function() {
                  try {
                    while (true) {
                      var result__10185__auto__ = switch__10182__auto__.call(null, state_17730);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10185__auto__;
                      }
                      break;
                    }
                  } catch (e17769) {
                    if (e17769 instanceof Object) {
                      var ex__10186__auto__ = e17769;
                      var statearr_17770_17799 = state_17730;
                      statearr_17770_17799[5] = ex__10186__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17730);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e17769;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__17800 = state_17730;
                  state_17730 = G__17800;
                  continue;
                } else {
                  return ret_value__10184__auto__;
                }
                break;
              }
            };
            state_machine__10183__auto__ = function(state_17730) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10183__auto____0.call(this);
                case 1:
                  return state_machine__10183__auto____1.call(this, state_17730);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
            return state_machine__10183__auto__;
          }();
        }(switch__10182__auto__, c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__10199__auto__ = function() {
        var statearr_17771 = f__10198__auto__.call(null);
        statearr_17771[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___17772;
        return statearr_17771;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
    };
  }(c__10197__auto___17772, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj17802 = {};
  return obj17802;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3467__auto__ = p;
    if (and__3467__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4106__auto__ = p == null ? null : p;
    return function() {
      var or__3479__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3467__auto__ = p;
    if (and__3467__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4106__auto__ = p == null ? null : p;
    return function() {
      var or__3479__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3467__auto__ = p;
      if (and__3467__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4106__auto__ = p == null ? null : p;
      return function() {
        var or__3479__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3467__auto__ = p;
      if (and__3467__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3467__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4106__auto__ = p == null ? null : p;
      return function() {
        var or__3479__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4106__auto__)];
        if (or__3479__auto__) {
          return or__3479__auto__;
        } else {
          var or__3479__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3479__auto____$1) {
            return or__3479__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3479__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3479__auto__, mults) {
            return function(p1__17803_SHARP_) {
              if (cljs.core.truth_(p1__17803_SHARP_.call(null, topic))) {
                return p1__17803_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__17803_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3479__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t17928 !== "undefined") {
      } else {
        cljs.core.async.t17928 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta17929) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta17929 = meta17929;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t17928.cljs$lang$type = true;
        cljs.core.async.t17928.cljs$lang$ctorStr = "cljs.core.async/t17928";
        cljs.core.async.t17928.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
            return cljs.core._write.call(null, writer__4047__auto__, "cljs.core.async/t17928");
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t17928.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t17928.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_17930) {
            var self__ = this;
            var _17930__$1 = this;
            return self__.meta17929;
          };
        }(mults, ensure_mult);
        cljs.core.async.t17928.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_17930, meta17929__$1) {
            var self__ = this;
            var _17930__$1 = this;
            return new cljs.core.async.t17928(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta17929__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t17928 = function(mults, ensure_mult) {
          return function __GT_t17928(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17929) {
            return new cljs.core.async.t17928(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta17929);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t17928(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__10197__auto___18052 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18052, mults, ensure_mult, p) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18052, mults, ensure_mult, p) {
            return function(state_18004) {
              var state_val_18005 = state_18004[1];
              if (state_val_18005 === 7) {
                var inst_18000 = state_18004[2];
                var state_18004__$1 = state_18004;
                var statearr_18006_18053 = state_18004__$1;
                statearr_18006_18053[2] = inst_18000;
                statearr_18006_18053[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18005 === 20) {
                  var state_18004__$1 = state_18004;
                  var statearr_18007_18054 = state_18004__$1;
                  statearr_18007_18054[2] = null;
                  statearr_18007_18054[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18005 === 1) {
                    var state_18004__$1 = state_18004;
                    var statearr_18008_18055 = state_18004__$1;
                    statearr_18008_18055[2] = null;
                    statearr_18008_18055[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18005 === 24) {
                      var inst_17933 = state_18004[7];
                      var inst_17983 = state_18004[8];
                      var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_18004, 23, Object, null, 22);
                      var inst_17990 = cljs.core.async.muxch_STAR_.call(null, inst_17983);
                      var state_18004__$1 = state_18004;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18004__$1, 25, inst_17990, inst_17933);
                    } else {
                      if (state_val_18005 === 4) {
                        var inst_17933 = state_18004[7];
                        var inst_17933__$1 = state_18004[2];
                        var inst_17934 = inst_17933__$1 == null;
                        var state_18004__$1 = function() {
                          var statearr_18009 = state_18004;
                          statearr_18009[7] = inst_17933__$1;
                          return statearr_18009;
                        }();
                        if (cljs.core.truth_(inst_17934)) {
                          var statearr_18010_18056 = state_18004__$1;
                          statearr_18010_18056[1] = 5;
                        } else {
                          var statearr_18011_18057 = state_18004__$1;
                          statearr_18011_18057[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_18005 === 15) {
                          var inst_17975 = state_18004[2];
                          var state_18004__$1 = state_18004;
                          var statearr_18012_18058 = state_18004__$1;
                          statearr_18012_18058[2] = inst_17975;
                          statearr_18012_18058[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18005 === 21) {
                            var inst_17997 = state_18004[2];
                            var state_18004__$1 = function() {
                              var statearr_18013 = state_18004;
                              statearr_18013[9] = inst_17997;
                              return statearr_18013;
                            }();
                            var statearr_18014_18059 = state_18004__$1;
                            statearr_18014_18059[2] = null;
                            statearr_18014_18059[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18005 === 13) {
                              var inst_17957 = state_18004[10];
                              var inst_17959 = cljs.core.chunked_seq_QMARK_.call(null, inst_17957);
                              var state_18004__$1 = state_18004;
                              if (inst_17959) {
                                var statearr_18015_18060 = state_18004__$1;
                                statearr_18015_18060[1] = 16;
                              } else {
                                var statearr_18016_18061 = state_18004__$1;
                                statearr_18016_18061[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_18005 === 22) {
                                var inst_17994 = state_18004[2];
                                var state_18004__$1 = state_18004;
                                var statearr_18017_18062 = state_18004__$1;
                                statearr_18017_18062[2] = inst_17994;
                                statearr_18017_18062[1] = 21;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18005 === 6) {
                                  var inst_17933 = state_18004[7];
                                  var inst_17981 = state_18004[11];
                                  var inst_17983 = state_18004[8];
                                  var inst_17981__$1 = topic_fn.call(null, inst_17933);
                                  var inst_17982 = cljs.core.deref.call(null, mults);
                                  var inst_17983__$1 = cljs.core.get.call(null, inst_17982, inst_17981__$1);
                                  var state_18004__$1 = function() {
                                    var statearr_18018 = state_18004;
                                    statearr_18018[11] = inst_17981__$1;
                                    statearr_18018[8] = inst_17983__$1;
                                    return statearr_18018;
                                  }();
                                  if (cljs.core.truth_(inst_17983__$1)) {
                                    var statearr_18019_18063 = state_18004__$1;
                                    statearr_18019_18063[1] = 19;
                                  } else {
                                    var statearr_18020_18064 = state_18004__$1;
                                    statearr_18020_18064[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18005 === 25) {
                                    var inst_17992 = state_18004[2];
                                    var state_18004__$1 = state_18004;
                                    var statearr_18021_18065 = state_18004__$1;
                                    statearr_18021_18065[2] = inst_17992;
                                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18004__$1);
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_18005 === 17) {
                                      var inst_17957 = state_18004[10];
                                      var inst_17966 = cljs.core.first.call(null, inst_17957);
                                      var inst_17967 = cljs.core.async.muxch_STAR_.call(null, inst_17966);
                                      var inst_17968 = cljs.core.async.close_BANG_.call(null, inst_17967);
                                      var inst_17969 = cljs.core.next.call(null, inst_17957);
                                      var inst_17943 = inst_17969;
                                      var inst_17944 = null;
                                      var inst_17945 = 0;
                                      var inst_17946 = 0;
                                      var state_18004__$1 = function() {
                                        var statearr_18022 = state_18004;
                                        statearr_18022[12] = inst_17945;
                                        statearr_18022[13] = inst_17946;
                                        statearr_18022[14] = inst_17943;
                                        statearr_18022[15] = inst_17968;
                                        statearr_18022[16] = inst_17944;
                                        return statearr_18022;
                                      }();
                                      var statearr_18023_18066 = state_18004__$1;
                                      statearr_18023_18066[2] = null;
                                      statearr_18023_18066[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18005 === 3) {
                                        var inst_18002 = state_18004[2];
                                        var state_18004__$1 = state_18004;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18004__$1, inst_18002);
                                      } else {
                                        if (state_val_18005 === 12) {
                                          var inst_17977 = state_18004[2];
                                          var state_18004__$1 = state_18004;
                                          var statearr_18024_18067 = state_18004__$1;
                                          statearr_18024_18067[2] = inst_17977;
                                          statearr_18024_18067[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18005 === 2) {
                                            var state_18004__$1 = state_18004;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18004__$1, 4, ch);
                                          } else {
                                            if (state_val_18005 === 23) {
                                              var inst_17981 = state_18004[11];
                                              var inst_17985 = state_18004[2];
                                              var inst_17986 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_17981);
                                              var state_18004__$1 = function() {
                                                var statearr_18025 = state_18004;
                                                statearr_18025[17] = inst_17985;
                                                return statearr_18025;
                                              }();
                                              var statearr_18026_18068 = state_18004__$1;
                                              statearr_18026_18068[2] = inst_17986;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18004__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_18005 === 19) {
                                                var state_18004__$1 = state_18004;
                                                var statearr_18027_18069 = state_18004__$1;
                                                statearr_18027_18069[2] = null;
                                                statearr_18027_18069[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_18005 === 11) {
                                                  var inst_17957 = state_18004[10];
                                                  var inst_17943 = state_18004[14];
                                                  var inst_17957__$1 = cljs.core.seq.call(null, inst_17943);
                                                  var state_18004__$1 = function() {
                                                    var statearr_18028 = state_18004;
                                                    statearr_18028[10] = inst_17957__$1;
                                                    return statearr_18028;
                                                  }();
                                                  if (inst_17957__$1) {
                                                    var statearr_18029_18070 = state_18004__$1;
                                                    statearr_18029_18070[1] = 13;
                                                  } else {
                                                    var statearr_18030_18071 = state_18004__$1;
                                                    statearr_18030_18071[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_18005 === 9) {
                                                    var inst_17979 = state_18004[2];
                                                    var state_18004__$1 = state_18004;
                                                    var statearr_18031_18072 = state_18004__$1;
                                                    statearr_18031_18072[2] = inst_17979;
                                                    statearr_18031_18072[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_18005 === 5) {
                                                      var inst_17940 = cljs.core.deref.call(null, mults);
                                                      var inst_17941 = cljs.core.vals.call(null, inst_17940);
                                                      var inst_17942 = cljs.core.seq.call(null, inst_17941);
                                                      var inst_17943 = inst_17942;
                                                      var inst_17944 = null;
                                                      var inst_17945 = 0;
                                                      var inst_17946 = 0;
                                                      var state_18004__$1 = function() {
                                                        var statearr_18032 = state_18004;
                                                        statearr_18032[12] = inst_17945;
                                                        statearr_18032[13] = inst_17946;
                                                        statearr_18032[14] = inst_17943;
                                                        statearr_18032[16] = inst_17944;
                                                        return statearr_18032;
                                                      }();
                                                      var statearr_18033_18073 = state_18004__$1;
                                                      statearr_18033_18073[2] = null;
                                                      statearr_18033_18073[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_18005 === 14) {
                                                        var state_18004__$1 = state_18004;
                                                        var statearr_18037_18074 = state_18004__$1;
                                                        statearr_18037_18074[2] = null;
                                                        statearr_18037_18074[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_18005 === 16) {
                                                          var inst_17957 = state_18004[10];
                                                          var inst_17961 = cljs.core.chunk_first.call(null, inst_17957);
                                                          var inst_17962 = cljs.core.chunk_rest.call(null, inst_17957);
                                                          var inst_17963 = cljs.core.count.call(null, inst_17961);
                                                          var inst_17943 = inst_17962;
                                                          var inst_17944 = inst_17961;
                                                          var inst_17945 = inst_17963;
                                                          var inst_17946 = 0;
                                                          var state_18004__$1 = function() {
                                                            var statearr_18038 = state_18004;
                                                            statearr_18038[12] = inst_17945;
                                                            statearr_18038[13] = inst_17946;
                                                            statearr_18038[14] = inst_17943;
                                                            statearr_18038[16] = inst_17944;
                                                            return statearr_18038;
                                                          }();
                                                          var statearr_18039_18075 = state_18004__$1;
                                                          statearr_18039_18075[2] = null;
                                                          statearr_18039_18075[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_18005 === 10) {
                                                            var inst_17945 = state_18004[12];
                                                            var inst_17946 = state_18004[13];
                                                            var inst_17943 = state_18004[14];
                                                            var inst_17944 = state_18004[16];
                                                            var inst_17951 = cljs.core._nth.call(null, inst_17944, inst_17946);
                                                            var inst_17952 = cljs.core.async.muxch_STAR_.call(null, inst_17951);
                                                            var inst_17953 = cljs.core.async.close_BANG_.call(null, inst_17952);
                                                            var inst_17954 = inst_17946 + 1;
                                                            var tmp18034 = inst_17945;
                                                            var tmp18035 = inst_17943;
                                                            var tmp18036 = inst_17944;
                                                            var inst_17943__$1 = tmp18035;
                                                            var inst_17944__$1 = tmp18036;
                                                            var inst_17945__$1 = tmp18034;
                                                            var inst_17946__$1 = inst_17954;
                                                            var state_18004__$1 = function() {
                                                              var statearr_18040 = state_18004;
                                                              statearr_18040[12] = inst_17945__$1;
                                                              statearr_18040[13] = inst_17946__$1;
                                                              statearr_18040[14] = inst_17943__$1;
                                                              statearr_18040[18] = inst_17953;
                                                              statearr_18040[16] = inst_17944__$1;
                                                              return statearr_18040;
                                                            }();
                                                            var statearr_18041_18076 = state_18004__$1;
                                                            statearr_18041_18076[2] = null;
                                                            statearr_18041_18076[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_18005 === 18) {
                                                              var inst_17972 = state_18004[2];
                                                              var state_18004__$1 = state_18004;
                                                              var statearr_18042_18077 = state_18004__$1;
                                                              statearr_18042_18077[2] = inst_17972;
                                                              statearr_18042_18077[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_18005 === 8) {
                                                                var inst_17945 = state_18004[12];
                                                                var inst_17946 = state_18004[13];
                                                                var inst_17948 = inst_17946 < inst_17945;
                                                                var inst_17949 = inst_17948;
                                                                var state_18004__$1 = state_18004;
                                                                if (cljs.core.truth_(inst_17949)) {
                                                                  var statearr_18043_18078 = state_18004__$1;
                                                                  statearr_18043_18078[1] = 10;
                                                                } else {
                                                                  var statearr_18044_18079 = state_18004__$1;
                                                                  statearr_18044_18079[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18052, mults, ensure_mult, p);
          return function(switch__10182__auto__, c__10197__auto___18052, mults, ensure_mult, p) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18048 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18048[0] = state_machine__10183__auto__;
                statearr_18048[1] = 1;
                return statearr_18048;
              };
              var state_machine__10183__auto____1 = function(state_18004) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18004);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18049) {
                      if (e18049 instanceof Object) {
                        var ex__10186__auto__ = e18049;
                        var statearr_18050_18080 = state_18004;
                        statearr_18050_18080[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18004);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18049;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18081 = state_18004;
                    state_18004 = G__18081;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18004) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18004);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18052, mults, ensure_mult, p);
        }();
        var state__10199__auto__ = function() {
          var statearr_18051 = f__10198__auto__.call(null);
          statearr_18051[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18052;
          return statearr_18051;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18052, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__10197__auto___18218 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_18188) {
              var state_val_18189 = state_18188[1];
              if (state_val_18189 === 7) {
                var state_18188__$1 = state_18188;
                var statearr_18190_18219 = state_18188__$1;
                statearr_18190_18219[2] = null;
                statearr_18190_18219[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18189 === 1) {
                  var state_18188__$1 = state_18188;
                  var statearr_18191_18220 = state_18188__$1;
                  statearr_18191_18220[2] = null;
                  statearr_18191_18220[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18189 === 4) {
                    var inst_18152 = state_18188[7];
                    var inst_18154 = inst_18152 < cnt;
                    var state_18188__$1 = state_18188;
                    if (cljs.core.truth_(inst_18154)) {
                      var statearr_18192_18221 = state_18188__$1;
                      statearr_18192_18221[1] = 6;
                    } else {
                      var statearr_18193_18222 = state_18188__$1;
                      statearr_18193_18222[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18189 === 15) {
                      var inst_18184 = state_18188[2];
                      var state_18188__$1 = state_18188;
                      var statearr_18194_18223 = state_18188__$1;
                      statearr_18194_18223[2] = inst_18184;
                      statearr_18194_18223[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18189 === 13) {
                        var inst_18177 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18188__$1 = state_18188;
                        var statearr_18195_18224 = state_18188__$1;
                        statearr_18195_18224[2] = inst_18177;
                        statearr_18195_18224[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_18189 === 6) {
                          var state_18188__$1 = state_18188;
                          var statearr_18196_18225 = state_18188__$1;
                          statearr_18196_18225[2] = null;
                          statearr_18196_18225[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18189 === 3) {
                            var inst_18186 = state_18188[2];
                            var state_18188__$1 = state_18188;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18188__$1, inst_18186);
                          } else {
                            if (state_val_18189 === 12) {
                              var inst_18174 = state_18188[8];
                              var inst_18174__$1 = state_18188[2];
                              var inst_18175 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_18174__$1);
                              var state_18188__$1 = function() {
                                var statearr_18197 = state_18188;
                                statearr_18197[8] = inst_18174__$1;
                                return statearr_18197;
                              }();
                              if (cljs.core.truth_(inst_18175)) {
                                var statearr_18198_18226 = state_18188__$1;
                                statearr_18198_18226[1] = 13;
                              } else {
                                var statearr_18199_18227 = state_18188__$1;
                                statearr_18199_18227[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_18189 === 2) {
                                var inst_18151 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_18152 = 0;
                                var state_18188__$1 = function() {
                                  var statearr_18200 = state_18188;
                                  statearr_18200[9] = inst_18151;
                                  statearr_18200[7] = inst_18152;
                                  return statearr_18200;
                                }();
                                var statearr_18201_18228 = state_18188__$1;
                                statearr_18201_18228[2] = null;
                                statearr_18201_18228[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18189 === 11) {
                                  var inst_18152 = state_18188[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_18188, 10, Object, null, 9);
                                  var inst_18161 = chs__$1.call(null, inst_18152);
                                  var inst_18162 = done.call(null, inst_18152);
                                  var inst_18163 = cljs.core.async.take_BANG_.call(null, inst_18161, inst_18162);
                                  var state_18188__$1 = state_18188;
                                  var statearr_18202_18229 = state_18188__$1;
                                  statearr_18202_18229[2] = inst_18163;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18188__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18189 === 9) {
                                    var inst_18152 = state_18188[7];
                                    var inst_18165 = state_18188[2];
                                    var inst_18166 = inst_18152 + 1;
                                    var inst_18152__$1 = inst_18166;
                                    var state_18188__$1 = function() {
                                      var statearr_18203 = state_18188;
                                      statearr_18203[10] = inst_18165;
                                      statearr_18203[7] = inst_18152__$1;
                                      return statearr_18203;
                                    }();
                                    var statearr_18204_18230 = state_18188__$1;
                                    statearr_18204_18230[2] = null;
                                    statearr_18204_18230[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_18189 === 5) {
                                      var inst_18172 = state_18188[2];
                                      var state_18188__$1 = function() {
                                        var statearr_18205 = state_18188;
                                        statearr_18205[11] = inst_18172;
                                        return statearr_18205;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18188__$1, 12, dchan);
                                    } else {
                                      if (state_val_18189 === 14) {
                                        var inst_18174 = state_18188[8];
                                        var inst_18179 = cljs.core.apply.call(null, f, inst_18174);
                                        var state_18188__$1 = state_18188;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18188__$1, 16, out, inst_18179);
                                      } else {
                                        if (state_val_18189 === 16) {
                                          var inst_18181 = state_18188[2];
                                          var state_18188__$1 = function() {
                                            var statearr_18206 = state_18188;
                                            statearr_18206[12] = inst_18181;
                                            return statearr_18206;
                                          }();
                                          var statearr_18207_18231 = state_18188__$1;
                                          statearr_18207_18231[2] = null;
                                          statearr_18207_18231[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18189 === 10) {
                                            var inst_18156 = state_18188[2];
                                            var inst_18157 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_18188__$1 = function() {
                                              var statearr_18208 = state_18188;
                                              statearr_18208[13] = inst_18156;
                                              return statearr_18208;
                                            }();
                                            var statearr_18209_18232 = state_18188__$1;
                                            statearr_18209_18232[2] = inst_18157;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18188__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_18189 === 8) {
                                              var inst_18170 = state_18188[2];
                                              var state_18188__$1 = state_18188;
                                              var statearr_18210_18233 = state_18188__$1;
                                              statearr_18210_18233[2] = inst_18170;
                                              statearr_18210_18233[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__10182__auto__, c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18214 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18214[0] = state_machine__10183__auto__;
                statearr_18214[1] = 1;
                return statearr_18214;
              };
              var state_machine__10183__auto____1 = function(state_18188) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18188);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18215) {
                      if (e18215 instanceof Object) {
                        var ex__10186__auto__ = e18215;
                        var statearr_18216_18234 = state_18188;
                        statearr_18216_18234[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18188);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18215;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18235 = state_18188;
                    state_18188 = G__18235;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18188) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18188);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__10199__auto__ = function() {
          var statearr_18217 = f__10198__auto__.call(null);
          statearr_18217[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18218;
          return statearr_18217;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18218, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___18343 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18343, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18343, out) {
            return function(state_18319) {
              var state_val_18320 = state_18319[1];
              if (state_val_18320 === 7) {
                var inst_18298 = state_18319[7];
                var inst_18299 = state_18319[8];
                var inst_18298__$1 = state_18319[2];
                var inst_18299__$1 = cljs.core.nth.call(null, inst_18298__$1, 0, null);
                var inst_18300 = cljs.core.nth.call(null, inst_18298__$1, 1, null);
                var inst_18301 = inst_18299__$1 == null;
                var state_18319__$1 = function() {
                  var statearr_18321 = state_18319;
                  statearr_18321[7] = inst_18298__$1;
                  statearr_18321[8] = inst_18299__$1;
                  statearr_18321[9] = inst_18300;
                  return statearr_18321;
                }();
                if (cljs.core.truth_(inst_18301)) {
                  var statearr_18322_18344 = state_18319__$1;
                  statearr_18322_18344[1] = 8;
                } else {
                  var statearr_18323_18345 = state_18319__$1;
                  statearr_18323_18345[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18320 === 1) {
                  var inst_18290 = cljs.core.vec.call(null, chs);
                  var inst_18291 = inst_18290;
                  var state_18319__$1 = function() {
                    var statearr_18324 = state_18319;
                    statearr_18324[10] = inst_18291;
                    return statearr_18324;
                  }();
                  var statearr_18325_18346 = state_18319__$1;
                  statearr_18325_18346[2] = null;
                  statearr_18325_18346[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18320 === 4) {
                    var inst_18291 = state_18319[10];
                    var state_18319__$1 = state_18319;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_18319__$1, 7, inst_18291);
                  } else {
                    if (state_val_18320 === 6) {
                      var inst_18315 = state_18319[2];
                      var state_18319__$1 = state_18319;
                      var statearr_18326_18347 = state_18319__$1;
                      statearr_18326_18347[2] = inst_18315;
                      statearr_18326_18347[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18320 === 3) {
                        var inst_18317 = state_18319[2];
                        var state_18319__$1 = state_18319;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18319__$1, inst_18317);
                      } else {
                        if (state_val_18320 === 2) {
                          var inst_18291 = state_18319[10];
                          var inst_18293 = cljs.core.count.call(null, inst_18291);
                          var inst_18294 = inst_18293 > 0;
                          var state_18319__$1 = state_18319;
                          if (cljs.core.truth_(inst_18294)) {
                            var statearr_18328_18348 = state_18319__$1;
                            statearr_18328_18348[1] = 4;
                          } else {
                            var statearr_18329_18349 = state_18319__$1;
                            statearr_18329_18349[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18320 === 11) {
                            var inst_18291 = state_18319[10];
                            var inst_18308 = state_18319[2];
                            var tmp18327 = inst_18291;
                            var inst_18291__$1 = tmp18327;
                            var state_18319__$1 = function() {
                              var statearr_18330 = state_18319;
                              statearr_18330[11] = inst_18308;
                              statearr_18330[10] = inst_18291__$1;
                              return statearr_18330;
                            }();
                            var statearr_18331_18350 = state_18319__$1;
                            statearr_18331_18350[2] = null;
                            statearr_18331_18350[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18320 === 9) {
                              var inst_18299 = state_18319[8];
                              var state_18319__$1 = state_18319;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18319__$1, 11, out, inst_18299);
                            } else {
                              if (state_val_18320 === 5) {
                                var inst_18313 = cljs.core.async.close_BANG_.call(null, out);
                                var state_18319__$1 = state_18319;
                                var statearr_18332_18351 = state_18319__$1;
                                statearr_18332_18351[2] = inst_18313;
                                statearr_18332_18351[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18320 === 10) {
                                  var inst_18311 = state_18319[2];
                                  var state_18319__$1 = state_18319;
                                  var statearr_18333_18352 = state_18319__$1;
                                  statearr_18333_18352[2] = inst_18311;
                                  statearr_18333_18352[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18320 === 8) {
                                    var inst_18298 = state_18319[7];
                                    var inst_18291 = state_18319[10];
                                    var inst_18299 = state_18319[8];
                                    var inst_18300 = state_18319[9];
                                    var inst_18303 = function() {
                                      var c = inst_18300;
                                      var v = inst_18299;
                                      var vec__18296 = inst_18298;
                                      var cs = inst_18291;
                                      return function(c, v, vec__18296, cs, inst_18298, inst_18291, inst_18299, inst_18300, state_val_18320, c__10197__auto___18343, out) {
                                        return function(p1__18236_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__18236_SHARP_);
                                        };
                                      }(c, v, vec__18296, cs, inst_18298, inst_18291, inst_18299, inst_18300, state_val_18320, c__10197__auto___18343, out);
                                    }();
                                    var inst_18304 = cljs.core.filterv.call(null, inst_18303, inst_18291);
                                    var inst_18291__$1 = inst_18304;
                                    var state_18319__$1 = function() {
                                      var statearr_18334 = state_18319;
                                      statearr_18334[10] = inst_18291__$1;
                                      return statearr_18334;
                                    }();
                                    var statearr_18335_18353 = state_18319__$1;
                                    statearr_18335_18353[2] = null;
                                    statearr_18335_18353[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18343, out);
          return function(switch__10182__auto__, c__10197__auto___18343, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18339 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18339[0] = state_machine__10183__auto__;
                statearr_18339[1] = 1;
                return statearr_18339;
              };
              var state_machine__10183__auto____1 = function(state_18319) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18319);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18340) {
                      if (e18340 instanceof Object) {
                        var ex__10186__auto__ = e18340;
                        var statearr_18341_18354 = state_18319;
                        statearr_18341_18354[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18319);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18340;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18355 = state_18319;
                    state_18319 = G__18355;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18319) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18319);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18343, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_18342 = f__10198__auto__.call(null);
          statearr_18342[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18343;
          return statearr_18342;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18343, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___18448 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18448, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18448, out) {
            return function(state_18425) {
              var state_val_18426 = state_18425[1];
              if (state_val_18426 === 7) {
                var inst_18407 = state_18425[7];
                var inst_18407__$1 = state_18425[2];
                var inst_18408 = inst_18407__$1 == null;
                var inst_18409 = cljs.core.not.call(null, inst_18408);
                var state_18425__$1 = function() {
                  var statearr_18427 = state_18425;
                  statearr_18427[7] = inst_18407__$1;
                  return statearr_18427;
                }();
                if (inst_18409) {
                  var statearr_18428_18449 = state_18425__$1;
                  statearr_18428_18449[1] = 8;
                } else {
                  var statearr_18429_18450 = state_18425__$1;
                  statearr_18429_18450[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18426 === 1) {
                  var inst_18402 = 0;
                  var state_18425__$1 = function() {
                    var statearr_18430 = state_18425;
                    statearr_18430[8] = inst_18402;
                    return statearr_18430;
                  }();
                  var statearr_18431_18451 = state_18425__$1;
                  statearr_18431_18451[2] = null;
                  statearr_18431_18451[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18426 === 4) {
                    var state_18425__$1 = state_18425;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18425__$1, 7, ch);
                  } else {
                    if (state_val_18426 === 6) {
                      var inst_18420 = state_18425[2];
                      var state_18425__$1 = state_18425;
                      var statearr_18432_18452 = state_18425__$1;
                      statearr_18432_18452[2] = inst_18420;
                      statearr_18432_18452[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18426 === 3) {
                        var inst_18422 = state_18425[2];
                        var inst_18423 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18425__$1 = function() {
                          var statearr_18433 = state_18425;
                          statearr_18433[9] = inst_18422;
                          return statearr_18433;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18425__$1, inst_18423);
                      } else {
                        if (state_val_18426 === 2) {
                          var inst_18402 = state_18425[8];
                          var inst_18404 = inst_18402 < n;
                          var state_18425__$1 = state_18425;
                          if (cljs.core.truth_(inst_18404)) {
                            var statearr_18434_18453 = state_18425__$1;
                            statearr_18434_18453[1] = 4;
                          } else {
                            var statearr_18435_18454 = state_18425__$1;
                            statearr_18435_18454[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18426 === 11) {
                            var inst_18402 = state_18425[8];
                            var inst_18412 = state_18425[2];
                            var inst_18413 = inst_18402 + 1;
                            var inst_18402__$1 = inst_18413;
                            var state_18425__$1 = function() {
                              var statearr_18436 = state_18425;
                              statearr_18436[8] = inst_18402__$1;
                              statearr_18436[10] = inst_18412;
                              return statearr_18436;
                            }();
                            var statearr_18437_18455 = state_18425__$1;
                            statearr_18437_18455[2] = null;
                            statearr_18437_18455[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18426 === 9) {
                              var state_18425__$1 = state_18425;
                              var statearr_18438_18456 = state_18425__$1;
                              statearr_18438_18456[2] = null;
                              statearr_18438_18456[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_18426 === 5) {
                                var state_18425__$1 = state_18425;
                                var statearr_18439_18457 = state_18425__$1;
                                statearr_18439_18457[2] = null;
                                statearr_18439_18457[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18426 === 10) {
                                  var inst_18417 = state_18425[2];
                                  var state_18425__$1 = state_18425;
                                  var statearr_18440_18458 = state_18425__$1;
                                  statearr_18440_18458[2] = inst_18417;
                                  statearr_18440_18458[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18426 === 8) {
                                    var inst_18407 = state_18425[7];
                                    var state_18425__$1 = state_18425;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18425__$1, 11, out, inst_18407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18448, out);
          return function(switch__10182__auto__, c__10197__auto___18448, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18444 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_18444[0] = state_machine__10183__auto__;
                statearr_18444[1] = 1;
                return statearr_18444;
              };
              var state_machine__10183__auto____1 = function(state_18425) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18425);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18445) {
                      if (e18445 instanceof Object) {
                        var ex__10186__auto__ = e18445;
                        var statearr_18446_18459 = state_18425;
                        statearr_18446_18459[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18425);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18445;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18460 = state_18425;
                    state_18425 = G__18460;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18425) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18425);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18448, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_18447 = f__10198__auto__.call(null);
          statearr_18447[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18448;
          return statearr_18447;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18448, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___18557 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18557, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18557, out) {
            return function(state_18532) {
              var state_val_18533 = state_18532[1];
              if (state_val_18533 === 7) {
                var inst_18527 = state_18532[2];
                var state_18532__$1 = state_18532;
                var statearr_18534_18558 = state_18532__$1;
                statearr_18534_18558[2] = inst_18527;
                statearr_18534_18558[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18533 === 1) {
                  var inst_18509 = null;
                  var state_18532__$1 = function() {
                    var statearr_18535 = state_18532;
                    statearr_18535[7] = inst_18509;
                    return statearr_18535;
                  }();
                  var statearr_18536_18559 = state_18532__$1;
                  statearr_18536_18559[2] = null;
                  statearr_18536_18559[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18533 === 4) {
                    var inst_18512 = state_18532[8];
                    var inst_18512__$1 = state_18532[2];
                    var inst_18513 = inst_18512__$1 == null;
                    var inst_18514 = cljs.core.not.call(null, inst_18513);
                    var state_18532__$1 = function() {
                      var statearr_18537 = state_18532;
                      statearr_18537[8] = inst_18512__$1;
                      return statearr_18537;
                    }();
                    if (inst_18514) {
                      var statearr_18538_18560 = state_18532__$1;
                      statearr_18538_18560[1] = 5;
                    } else {
                      var statearr_18539_18561 = state_18532__$1;
                      statearr_18539_18561[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18533 === 6) {
                      var state_18532__$1 = state_18532;
                      var statearr_18540_18562 = state_18532__$1;
                      statearr_18540_18562[2] = null;
                      statearr_18540_18562[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18533 === 3) {
                        var inst_18529 = state_18532[2];
                        var inst_18530 = cljs.core.async.close_BANG_.call(null, out);
                        var state_18532__$1 = function() {
                          var statearr_18541 = state_18532;
                          statearr_18541[9] = inst_18529;
                          return statearr_18541;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18532__$1, inst_18530);
                      } else {
                        if (state_val_18533 === 2) {
                          var state_18532__$1 = state_18532;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18532__$1, 4, ch);
                        } else {
                          if (state_val_18533 === 11) {
                            var inst_18512 = state_18532[8];
                            var inst_18521 = state_18532[2];
                            var inst_18509 = inst_18512;
                            var state_18532__$1 = function() {
                              var statearr_18542 = state_18532;
                              statearr_18542[10] = inst_18521;
                              statearr_18542[7] = inst_18509;
                              return statearr_18542;
                            }();
                            var statearr_18543_18563 = state_18532__$1;
                            statearr_18543_18563[2] = null;
                            statearr_18543_18563[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_18533 === 9) {
                              var inst_18512 = state_18532[8];
                              var state_18532__$1 = state_18532;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18532__$1, 11, out, inst_18512);
                            } else {
                              if (state_val_18533 === 5) {
                                var inst_18509 = state_18532[7];
                                var inst_18512 = state_18532[8];
                                var inst_18516 = cljs.core._EQ_.call(null, inst_18512, inst_18509);
                                var state_18532__$1 = state_18532;
                                if (inst_18516) {
                                  var statearr_18545_18564 = state_18532__$1;
                                  statearr_18545_18564[1] = 8;
                                } else {
                                  var statearr_18546_18565 = state_18532__$1;
                                  statearr_18546_18565[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_18533 === 10) {
                                  var inst_18524 = state_18532[2];
                                  var state_18532__$1 = state_18532;
                                  var statearr_18547_18566 = state_18532__$1;
                                  statearr_18547_18566[2] = inst_18524;
                                  statearr_18547_18566[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18533 === 8) {
                                    var inst_18509 = state_18532[7];
                                    var tmp18544 = inst_18509;
                                    var inst_18509__$1 = tmp18544;
                                    var state_18532__$1 = function() {
                                      var statearr_18548 = state_18532;
                                      statearr_18548[7] = inst_18509__$1;
                                      return statearr_18548;
                                    }();
                                    var statearr_18549_18567 = state_18532__$1;
                                    statearr_18549_18567[2] = null;
                                    statearr_18549_18567[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18557, out);
          return function(switch__10182__auto__, c__10197__auto___18557, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18553 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_18553[0] = state_machine__10183__auto__;
                statearr_18553[1] = 1;
                return statearr_18553;
              };
              var state_machine__10183__auto____1 = function(state_18532) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18532);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18554) {
                      if (e18554 instanceof Object) {
                        var ex__10186__auto__ = e18554;
                        var statearr_18555_18568 = state_18532;
                        statearr_18555_18568[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18532);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18554;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18569 = state_18532;
                    state_18532 = G__18569;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18532) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18532);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18557, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_18556 = f__10198__auto__.call(null);
          statearr_18556[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18557;
          return statearr_18556;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18557, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___18704 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18704, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18704, out) {
            return function(state_18674) {
              var state_val_18675 = state_18674[1];
              if (state_val_18675 === 7) {
                var inst_18670 = state_18674[2];
                var state_18674__$1 = state_18674;
                var statearr_18676_18705 = state_18674__$1;
                statearr_18676_18705[2] = inst_18670;
                statearr_18676_18705[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18675 === 1) {
                  var inst_18637 = new Array(n);
                  var inst_18638 = inst_18637;
                  var inst_18639 = 0;
                  var state_18674__$1 = function() {
                    var statearr_18677 = state_18674;
                    statearr_18677[7] = inst_18639;
                    statearr_18677[8] = inst_18638;
                    return statearr_18677;
                  }();
                  var statearr_18678_18706 = state_18674__$1;
                  statearr_18678_18706[2] = null;
                  statearr_18678_18706[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18675 === 4) {
                    var inst_18642 = state_18674[9];
                    var inst_18642__$1 = state_18674[2];
                    var inst_18643 = inst_18642__$1 == null;
                    var inst_18644 = cljs.core.not.call(null, inst_18643);
                    var state_18674__$1 = function() {
                      var statearr_18679 = state_18674;
                      statearr_18679[9] = inst_18642__$1;
                      return statearr_18679;
                    }();
                    if (inst_18644) {
                      var statearr_18680_18707 = state_18674__$1;
                      statearr_18680_18707[1] = 5;
                    } else {
                      var statearr_18681_18708 = state_18674__$1;
                      statearr_18681_18708[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18675 === 15) {
                      var inst_18664 = state_18674[2];
                      var state_18674__$1 = state_18674;
                      var statearr_18682_18709 = state_18674__$1;
                      statearr_18682_18709[2] = inst_18664;
                      statearr_18682_18709[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18675 === 13) {
                        var state_18674__$1 = state_18674;
                        var statearr_18683_18710 = state_18674__$1;
                        statearr_18683_18710[2] = null;
                        statearr_18683_18710[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_18675 === 6) {
                          var inst_18639 = state_18674[7];
                          var inst_18660 = inst_18639 > 0;
                          var state_18674__$1 = state_18674;
                          if (cljs.core.truth_(inst_18660)) {
                            var statearr_18684_18711 = state_18674__$1;
                            statearr_18684_18711[1] = 12;
                          } else {
                            var statearr_18685_18712 = state_18674__$1;
                            statearr_18685_18712[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18675 === 3) {
                            var inst_18672 = state_18674[2];
                            var state_18674__$1 = state_18674;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18674__$1, inst_18672);
                          } else {
                            if (state_val_18675 === 12) {
                              var inst_18638 = state_18674[8];
                              var inst_18662 = cljs.core.vec.call(null, inst_18638);
                              var state_18674__$1 = state_18674;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18674__$1, 15, out, inst_18662);
                            } else {
                              if (state_val_18675 === 2) {
                                var state_18674__$1 = state_18674;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18674__$1, 4, ch);
                              } else {
                                if (state_val_18675 === 11) {
                                  var inst_18654 = state_18674[2];
                                  var inst_18655 = new Array(n);
                                  var inst_18638 = inst_18655;
                                  var inst_18639 = 0;
                                  var state_18674__$1 = function() {
                                    var statearr_18686 = state_18674;
                                    statearr_18686[7] = inst_18639;
                                    statearr_18686[10] = inst_18654;
                                    statearr_18686[8] = inst_18638;
                                    return statearr_18686;
                                  }();
                                  var statearr_18687_18713 = state_18674__$1;
                                  statearr_18687_18713[2] = null;
                                  statearr_18687_18713[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18675 === 9) {
                                    var inst_18638 = state_18674[8];
                                    var inst_18652 = cljs.core.vec.call(null, inst_18638);
                                    var state_18674__$1 = state_18674;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18674__$1, 11, out, inst_18652);
                                  } else {
                                    if (state_val_18675 === 5) {
                                      var inst_18639 = state_18674[7];
                                      var inst_18638 = state_18674[8];
                                      var inst_18647 = state_18674[11];
                                      var inst_18642 = state_18674[9];
                                      var inst_18646 = inst_18638[inst_18639] = inst_18642;
                                      var inst_18647__$1 = inst_18639 + 1;
                                      var inst_18648 = inst_18647__$1 < n;
                                      var state_18674__$1 = function() {
                                        var statearr_18688 = state_18674;
                                        statearr_18688[12] = inst_18646;
                                        statearr_18688[11] = inst_18647__$1;
                                        return statearr_18688;
                                      }();
                                      if (cljs.core.truth_(inst_18648)) {
                                        var statearr_18689_18714 = state_18674__$1;
                                        statearr_18689_18714[1] = 8;
                                      } else {
                                        var statearr_18690_18715 = state_18674__$1;
                                        statearr_18690_18715[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18675 === 14) {
                                        var inst_18667 = state_18674[2];
                                        var inst_18668 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_18674__$1 = function() {
                                          var statearr_18692 = state_18674;
                                          statearr_18692[13] = inst_18667;
                                          return statearr_18692;
                                        }();
                                        var statearr_18693_18716 = state_18674__$1;
                                        statearr_18693_18716[2] = inst_18668;
                                        statearr_18693_18716[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_18675 === 10) {
                                          var inst_18658 = state_18674[2];
                                          var state_18674__$1 = state_18674;
                                          var statearr_18694_18717 = state_18674__$1;
                                          statearr_18694_18717[2] = inst_18658;
                                          statearr_18694_18717[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18675 === 8) {
                                            var inst_18638 = state_18674[8];
                                            var inst_18647 = state_18674[11];
                                            var tmp18691 = inst_18638;
                                            var inst_18638__$1 = tmp18691;
                                            var inst_18639 = inst_18647;
                                            var state_18674__$1 = function() {
                                              var statearr_18695 = state_18674;
                                              statearr_18695[7] = inst_18639;
                                              statearr_18695[8] = inst_18638__$1;
                                              return statearr_18695;
                                            }();
                                            var statearr_18696_18718 = state_18674__$1;
                                            statearr_18696_18718[2] = null;
                                            statearr_18696_18718[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18704, out);
          return function(switch__10182__auto__, c__10197__auto___18704, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18700 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18700[0] = state_machine__10183__auto__;
                statearr_18700[1] = 1;
                return statearr_18700;
              };
              var state_machine__10183__auto____1 = function(state_18674) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18674);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18701) {
                      if (e18701 instanceof Object) {
                        var ex__10186__auto__ = e18701;
                        var statearr_18702_18719 = state_18674;
                        statearr_18702_18719[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18674);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18701;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18720 = state_18674;
                    state_18674 = G__18720;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18674) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18674);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18704, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_18703 = f__10198__auto__.call(null);
          statearr_18703[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18704;
          return statearr_18703;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18704, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__10197__auto___18863 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto___18863, out) {
      return function() {
        var f__10198__auto__ = function() {
          var switch__10182__auto__ = function(c__10197__auto___18863, out) {
            return function(state_18833) {
              var state_val_18834 = state_18833[1];
              if (state_val_18834 === 7) {
                var inst_18829 = state_18833[2];
                var state_18833__$1 = state_18833;
                var statearr_18835_18864 = state_18833__$1;
                statearr_18835_18864[2] = inst_18829;
                statearr_18835_18864[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_18834 === 1) {
                  var inst_18792 = [];
                  var inst_18793 = inst_18792;
                  var inst_18794 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
                  var state_18833__$1 = function() {
                    var statearr_18836 = state_18833;
                    statearr_18836[7] = inst_18794;
                    statearr_18836[8] = inst_18793;
                    return statearr_18836;
                  }();
                  var statearr_18837_18865 = state_18833__$1;
                  statearr_18837_18865[2] = null;
                  statearr_18837_18865[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_18834 === 4) {
                    var inst_18797 = state_18833[9];
                    var inst_18797__$1 = state_18833[2];
                    var inst_18798 = inst_18797__$1 == null;
                    var inst_18799 = cljs.core.not.call(null, inst_18798);
                    var state_18833__$1 = function() {
                      var statearr_18838 = state_18833;
                      statearr_18838[9] = inst_18797__$1;
                      return statearr_18838;
                    }();
                    if (inst_18799) {
                      var statearr_18839_18866 = state_18833__$1;
                      statearr_18839_18866[1] = 5;
                    } else {
                      var statearr_18840_18867 = state_18833__$1;
                      statearr_18840_18867[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_18834 === 15) {
                      var inst_18823 = state_18833[2];
                      var state_18833__$1 = state_18833;
                      var statearr_18841_18868 = state_18833__$1;
                      statearr_18841_18868[2] = inst_18823;
                      statearr_18841_18868[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_18834 === 13) {
                        var state_18833__$1 = state_18833;
                        var statearr_18842_18869 = state_18833__$1;
                        statearr_18842_18869[2] = null;
                        statearr_18842_18869[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_18834 === 6) {
                          var inst_18793 = state_18833[8];
                          var inst_18818 = inst_18793.length;
                          var inst_18819 = inst_18818 > 0;
                          var state_18833__$1 = state_18833;
                          if (cljs.core.truth_(inst_18819)) {
                            var statearr_18843_18870 = state_18833__$1;
                            statearr_18843_18870[1] = 12;
                          } else {
                            var statearr_18844_18871 = state_18833__$1;
                            statearr_18844_18871[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_18834 === 3) {
                            var inst_18831 = state_18833[2];
                            var state_18833__$1 = state_18833;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18833__$1, inst_18831);
                          } else {
                            if (state_val_18834 === 12) {
                              var inst_18793 = state_18833[8];
                              var inst_18821 = cljs.core.vec.call(null, inst_18793);
                              var state_18833__$1 = state_18833;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18833__$1, 15, out, inst_18821);
                            } else {
                              if (state_val_18834 === 2) {
                                var state_18833__$1 = state_18833;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18833__$1, 4, ch);
                              } else {
                                if (state_val_18834 === 11) {
                                  var inst_18801 = state_18833[10];
                                  var inst_18797 = state_18833[9];
                                  var inst_18811 = state_18833[2];
                                  var inst_18812 = [];
                                  var inst_18813 = inst_18812.push(inst_18797);
                                  var inst_18793 = inst_18812;
                                  var inst_18794 = inst_18801;
                                  var state_18833__$1 = function() {
                                    var statearr_18845 = state_18833;
                                    statearr_18845[7] = inst_18794;
                                    statearr_18845[8] = inst_18793;
                                    statearr_18845[11] = inst_18813;
                                    statearr_18845[12] = inst_18811;
                                    return statearr_18845;
                                  }();
                                  var statearr_18846_18872 = state_18833__$1;
                                  statearr_18846_18872[2] = null;
                                  statearr_18846_18872[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_18834 === 9) {
                                    var inst_18793 = state_18833[8];
                                    var inst_18809 = cljs.core.vec.call(null, inst_18793);
                                    var state_18833__$1 = state_18833;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18833__$1, 11, out, inst_18809);
                                  } else {
                                    if (state_val_18834 === 5) {
                                      var inst_18794 = state_18833[7];
                                      var inst_18801 = state_18833[10];
                                      var inst_18797 = state_18833[9];
                                      var inst_18801__$1 = f.call(null, inst_18797);
                                      var inst_18802 = cljs.core._EQ_.call(null, inst_18801__$1, inst_18794);
                                      var inst_18803 = cljs.core.keyword_identical_QMARK_.call(null, inst_18794, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                                      var inst_18804 = inst_18802 || inst_18803;
                                      var state_18833__$1 = function() {
                                        var statearr_18847 = state_18833;
                                        statearr_18847[10] = inst_18801__$1;
                                        return statearr_18847;
                                      }();
                                      if (cljs.core.truth_(inst_18804)) {
                                        var statearr_18848_18873 = state_18833__$1;
                                        statearr_18848_18873[1] = 8;
                                      } else {
                                        var statearr_18849_18874 = state_18833__$1;
                                        statearr_18849_18874[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_18834 === 14) {
                                        var inst_18826 = state_18833[2];
                                        var inst_18827 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_18833__$1 = function() {
                                          var statearr_18851 = state_18833;
                                          statearr_18851[13] = inst_18826;
                                          return statearr_18851;
                                        }();
                                        var statearr_18852_18875 = state_18833__$1;
                                        statearr_18852_18875[2] = inst_18827;
                                        statearr_18852_18875[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_18834 === 10) {
                                          var inst_18816 = state_18833[2];
                                          var state_18833__$1 = state_18833;
                                          var statearr_18853_18876 = state_18833__$1;
                                          statearr_18853_18876[2] = inst_18816;
                                          statearr_18853_18876[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_18834 === 8) {
                                            var inst_18793 = state_18833[8];
                                            var inst_18801 = state_18833[10];
                                            var inst_18797 = state_18833[9];
                                            var inst_18806 = inst_18793.push(inst_18797);
                                            var tmp18850 = inst_18793;
                                            var inst_18793__$1 = tmp18850;
                                            var inst_18794 = inst_18801;
                                            var state_18833__$1 = function() {
                                              var statearr_18854 = state_18833;
                                              statearr_18854[7] = inst_18794;
                                              statearr_18854[8] = inst_18793__$1;
                                              statearr_18854[14] = inst_18806;
                                              return statearr_18854;
                                            }();
                                            var statearr_18855_18877 = state_18833__$1;
                                            statearr_18855_18877[2] = null;
                                            statearr_18855_18877[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__10197__auto___18863, out);
          return function(switch__10182__auto__, c__10197__auto___18863, out) {
            return function() {
              var state_machine__10183__auto__ = null;
              var state_machine__10183__auto____0 = function() {
                var statearr_18859 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_18859[0] = state_machine__10183__auto__;
                statearr_18859[1] = 1;
                return statearr_18859;
              };
              var state_machine__10183__auto____1 = function(state_18833) {
                while (true) {
                  var ret_value__10184__auto__ = function() {
                    try {
                      while (true) {
                        var result__10185__auto__ = switch__10182__auto__.call(null, state_18833);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__10185__auto__;
                        }
                        break;
                      }
                    } catch (e18860) {
                      if (e18860 instanceof Object) {
                        var ex__10186__auto__ = e18860;
                        var statearr_18861_18878 = state_18833;
                        statearr_18861_18878[5] = ex__10186__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18833);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e18860;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__18879 = state_18833;
                    state_18833 = G__18879;
                    continue;
                  } else {
                    return ret_value__10184__auto__;
                  }
                  break;
                }
              };
              state_machine__10183__auto__ = function(state_18833) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__10183__auto____0.call(this);
                  case 1:
                    return state_machine__10183__auto____1.call(this, state_18833);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
              state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
              return state_machine__10183__auto__;
            }();
          }(switch__10182__auto__, c__10197__auto___18863, out);
        }();
        var state__10199__auto__ = function() {
          var statearr_18862 = f__10198__auto__.call(null);
          statearr_18862[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto___18863;
          return statearr_18862;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
      };
    }(c__10197__auto___18863, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3467__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3467__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3467__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__19610 = i + class$.length;
        start_from = G__19610;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___19635 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___19635)) {
        var class_list_19636 = temp__4124__auto___19635;
        var seq__19623_19637 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__19624_19638 = null;
        var count__19625_19639 = 0;
        var i__19626_19640 = 0;
        while (true) {
          if (i__19626_19640 < count__19625_19639) {
            var class_19641 = cljs.core._nth.call(null, chunk__19624_19638, i__19626_19640);
            class_list_19636.add(class_19641);
            var G__19642 = seq__19623_19637;
            var G__19643 = chunk__19624_19638;
            var G__19644 = count__19625_19639;
            var G__19645 = i__19626_19640 + 1;
            seq__19623_19637 = G__19642;
            chunk__19624_19638 = G__19643;
            count__19625_19639 = G__19644;
            i__19626_19640 = G__19645;
            continue;
          } else {
            var temp__4126__auto___19646 = cljs.core.seq.call(null, seq__19623_19637);
            if (temp__4126__auto___19646) {
              var seq__19623_19647__$1 = temp__4126__auto___19646;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19623_19647__$1)) {
                var c__4227__auto___19648 = cljs.core.chunk_first.call(null, seq__19623_19647__$1);
                var G__19649 = cljs.core.chunk_rest.call(null, seq__19623_19647__$1);
                var G__19650 = c__4227__auto___19648;
                var G__19651 = cljs.core.count.call(null, c__4227__auto___19648);
                var G__19652 = 0;
                seq__19623_19637 = G__19649;
                chunk__19624_19638 = G__19650;
                count__19625_19639 = G__19651;
                i__19626_19640 = G__19652;
                continue;
              } else {
                var class_19653 = cljs.core.first.call(null, seq__19623_19647__$1);
                class_list_19636.add(class_19653);
                var G__19654 = cljs.core.next.call(null, seq__19623_19647__$1);
                var G__19655 = null;
                var G__19656 = 0;
                var G__19657 = 0;
                seq__19623_19637 = G__19654;
                chunk__19624_19638 = G__19655;
                count__19625_19639 = G__19656;
                i__19626_19640 = G__19657;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_19658 = elem__$1.className;
        var seq__19627_19659 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__19628_19660 = null;
        var count__19629_19661 = 0;
        var i__19630_19662 = 0;
        while (true) {
          if (i__19630_19662 < count__19629_19661) {
            var class_19663 = cljs.core._nth.call(null, chunk__19628_19660, i__19630_19662);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_19658, class_19663))) {
            } else {
              elem__$1.className = class_name_19658 === "" ? class_19663 : [cljs.core.str(class_name_19658), cljs.core.str(" "), cljs.core.str(class_19663)].join("");
            }
            var G__19664 = seq__19627_19659;
            var G__19665 = chunk__19628_19660;
            var G__19666 = count__19629_19661;
            var G__19667 = i__19630_19662 + 1;
            seq__19627_19659 = G__19664;
            chunk__19628_19660 = G__19665;
            count__19629_19661 = G__19666;
            i__19630_19662 = G__19667;
            continue;
          } else {
            var temp__4126__auto___19668 = cljs.core.seq.call(null, seq__19627_19659);
            if (temp__4126__auto___19668) {
              var seq__19627_19669__$1 = temp__4126__auto___19668;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19627_19669__$1)) {
                var c__4227__auto___19670 = cljs.core.chunk_first.call(null, seq__19627_19669__$1);
                var G__19671 = cljs.core.chunk_rest.call(null, seq__19627_19669__$1);
                var G__19672 = c__4227__auto___19670;
                var G__19673 = cljs.core.count.call(null, c__4227__auto___19670);
                var G__19674 = 0;
                seq__19627_19659 = G__19671;
                chunk__19628_19660 = G__19672;
                count__19629_19661 = G__19673;
                i__19630_19662 = G__19674;
                continue;
              } else {
                var class_19675 = cljs.core.first.call(null, seq__19627_19669__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_19658, class_19675))) {
                } else {
                  elem__$1.className = class_name_19658 === "" ? class_19675 : [cljs.core.str(class_name_19658), cljs.core.str(" "), cljs.core.str(class_19675)].join("");
                }
                var G__19676 = cljs.core.next.call(null, seq__19627_19669__$1);
                var G__19677 = null;
                var G__19678 = 0;
                var G__19679 = 0;
                seq__19627_19659 = G__19676;
                chunk__19628_19660 = G__19677;
                count__19629_19661 = G__19678;
                i__19630_19662 = G__19679;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__19680__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__19631_19681 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__19632_19682 = null;
      var count__19633_19683 = 0;
      var i__19634_19684 = 0;
      while (true) {
        if (i__19634_19684 < count__19633_19683) {
          var c_19685 = cljs.core._nth.call(null, chunk__19632_19682, i__19634_19684);
          add_class_BANG_.call(null, elem__$1, c_19685);
          var G__19686 = seq__19631_19681;
          var G__19687 = chunk__19632_19682;
          var G__19688 = count__19633_19683;
          var G__19689 = i__19634_19684 + 1;
          seq__19631_19681 = G__19686;
          chunk__19632_19682 = G__19687;
          count__19633_19683 = G__19688;
          i__19634_19684 = G__19689;
          continue;
        } else {
          var temp__4126__auto___19690 = cljs.core.seq.call(null, seq__19631_19681);
          if (temp__4126__auto___19690) {
            var seq__19631_19691__$1 = temp__4126__auto___19690;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19631_19691__$1)) {
              var c__4227__auto___19692 = cljs.core.chunk_first.call(null, seq__19631_19691__$1);
              var G__19693 = cljs.core.chunk_rest.call(null, seq__19631_19691__$1);
              var G__19694 = c__4227__auto___19692;
              var G__19695 = cljs.core.count.call(null, c__4227__auto___19692);
              var G__19696 = 0;
              seq__19631_19681 = G__19693;
              chunk__19632_19682 = G__19694;
              count__19633_19683 = G__19695;
              i__19634_19684 = G__19696;
              continue;
            } else {
              var c_19697 = cljs.core.first.call(null, seq__19631_19691__$1);
              add_class_BANG_.call(null, elem__$1, c_19697);
              var G__19698 = cljs.core.next.call(null, seq__19631_19691__$1);
              var G__19699 = null;
              var G__19700 = 0;
              var G__19701 = 0;
              seq__19631_19681 = G__19698;
              chunk__19632_19682 = G__19699;
              count__19633_19683 = G__19700;
              i__19634_19684 = G__19701;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__19680 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19680__delegate.call(this, elem, classes, more_classes);
    };
    G__19680.cljs$lang$maxFixedArity = 2;
    G__19680.cljs$lang$applyTo = function(arglist__19702) {
      var elem = cljs.core.first(arglist__19702);
      arglist__19702 = cljs.core.next(arglist__19702);
      var classes = cljs.core.first(arglist__19702);
      var more_classes = cljs.core.rest(arglist__19702);
      return G__19680__delegate(elem, classes, more_classes);
    };
    G__19680.cljs$core$IFn$_invoke$arity$variadic = G__19680__delegate;
    return G__19680;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__19703 = function() {
        var end = i + class$.length;
        return[cljs.core.str(end < class_len ? [cljs.core.str(class_name.substring(0, i)), cljs.core.str(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1))].join("");
      }();
      class_name = G__19703;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___19712 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___19712)) {
      var class_list_19713 = temp__4124__auto___19712;
      class_list_19713.remove(class$__$1);
    } else {
      var class_name_19714 = elem__$1.className;
      var new_class_name_19715 = dommy.attrs.remove_class_str.call(null, class_name_19714, class$__$1);
      if (class_name_19714 === new_class_name_19715) {
      } else {
        elem__$1.className = new_class_name_19715;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__19716__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__19708 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__19709 = null;
      var count__19710 = 0;
      var i__19711 = 0;
      while (true) {
        if (i__19711 < count__19710) {
          var c = cljs.core._nth.call(null, chunk__19709, i__19711);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__19717 = seq__19708;
          var G__19718 = chunk__19709;
          var G__19719 = count__19710;
          var G__19720 = i__19711 + 1;
          seq__19708 = G__19717;
          chunk__19709 = G__19718;
          count__19710 = G__19719;
          i__19711 = G__19720;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__19708);
          if (temp__4126__auto__) {
            var seq__19708__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19708__$1)) {
              var c__4227__auto__ = cljs.core.chunk_first.call(null, seq__19708__$1);
              var G__19721 = cljs.core.chunk_rest.call(null, seq__19708__$1);
              var G__19722 = c__4227__auto__;
              var G__19723 = cljs.core.count.call(null, c__4227__auto__);
              var G__19724 = 0;
              seq__19708 = G__19721;
              chunk__19709 = G__19722;
              count__19710 = G__19723;
              i__19711 = G__19724;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__19708__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__19725 = cljs.core.next.call(null, seq__19708__$1);
              var G__19726 = null;
              var G__19727 = 0;
              var G__19728 = 0;
              seq__19708 = G__19725;
              chunk__19709 = G__19726;
              count__19710 = G__19727;
              i__19711 = G__19728;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__19716 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19716__delegate.call(this, elem, class$, classes);
    };
    G__19716.cljs$lang$maxFixedArity = 2;
    G__19716.cljs$lang$applyTo = function(arglist__19729) {
      var elem = cljs.core.first(arglist__19729);
      arglist__19729 = cljs.core.next(arglist__19729);
      var class$ = cljs.core.first(arglist__19729);
      var classes = cljs.core.rest(arglist__19729);
      return G__19716__delegate(elem, class$, classes);
    };
    G__19716.cljs$core$IFn$_invoke$arity$variadic = G__19716__delegate;
    return G__19716;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___19730 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___19730)) {
      var class_list_19731 = temp__4124__auto___19730;
      class_list_19731.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__19734) {
      var vec__19735 = p__19734;
      var k = cljs.core.nth.call(null, vec__19735, 0, null);
      var v = cljs.core.nth.call(null, vec__19735, 1, null);
      return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str(":"), cljs.core.str(cljs.core.name.call(null, v)), cljs.core.str(";")].join("");
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__19742_19748 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__19743_19749 = null;
    var count__19744_19750 = 0;
    var i__19745_19751 = 0;
    while (true) {
      if (i__19745_19751 < count__19744_19750) {
        var vec__19746_19752 = cljs.core._nth.call(null, chunk__19743_19749, i__19745_19751);
        var k_19753 = cljs.core.nth.call(null, vec__19746_19752, 0, null);
        var v_19754 = cljs.core.nth.call(null, vec__19746_19752, 1, null);
        style[cljs.core.name.call(null, k_19753)] = v_19754;
        var G__19755 = seq__19742_19748;
        var G__19756 = chunk__19743_19749;
        var G__19757 = count__19744_19750;
        var G__19758 = i__19745_19751 + 1;
        seq__19742_19748 = G__19755;
        chunk__19743_19749 = G__19756;
        count__19744_19750 = G__19757;
        i__19745_19751 = G__19758;
        continue;
      } else {
        var temp__4126__auto___19759 = cljs.core.seq.call(null, seq__19742_19748);
        if (temp__4126__auto___19759) {
          var seq__19742_19760__$1 = temp__4126__auto___19759;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19742_19760__$1)) {
            var c__4227__auto___19761 = cljs.core.chunk_first.call(null, seq__19742_19760__$1);
            var G__19762 = cljs.core.chunk_rest.call(null, seq__19742_19760__$1);
            var G__19763 = c__4227__auto___19761;
            var G__19764 = cljs.core.count.call(null, c__4227__auto___19761);
            var G__19765 = 0;
            seq__19742_19748 = G__19762;
            chunk__19743_19749 = G__19763;
            count__19744_19750 = G__19764;
            i__19745_19751 = G__19765;
            continue;
          } else {
            var vec__19747_19766 = cljs.core.first.call(null, seq__19742_19760__$1);
            var k_19767 = cljs.core.nth.call(null, vec__19747_19766, 0, null);
            var v_19768 = cljs.core.nth.call(null, vec__19747_19766, 1, null);
            style[cljs.core.name.call(null, k_19767)] = v_19768;
            var G__19769 = cljs.core.next.call(null, seq__19742_19760__$1);
            var G__19770 = null;
            var G__19771 = 0;
            var G__19772 = 0;
            seq__19742_19748 = G__19769;
            chunk__19743_19749 = G__19770;
            count__19744_19750 = G__19771;
            i__19745_19751 = G__19772;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__19773) {
    var elem = cljs.core.first(arglist__19773);
    var kvs = cljs.core.rest(arglist__19773);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -1640531420, null)))].join(""));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__19780_19786 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__19781_19787 = null;
    var count__19782_19788 = 0;
    var i__19783_19789 = 0;
    while (true) {
      if (i__19783_19789 < count__19782_19788) {
        var vec__19784_19790 = cljs.core._nth.call(null, chunk__19781_19787, i__19783_19789);
        var k_19791 = cljs.core.nth.call(null, vec__19784_19790, 0, null);
        var v_19792 = cljs.core.nth.call(null, vec__19784_19790, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_19791, [cljs.core.str(v_19792), cljs.core.str("px")].join(""));
        var G__19793 = seq__19780_19786;
        var G__19794 = chunk__19781_19787;
        var G__19795 = count__19782_19788;
        var G__19796 = i__19783_19789 + 1;
        seq__19780_19786 = G__19793;
        chunk__19781_19787 = G__19794;
        count__19782_19788 = G__19795;
        i__19783_19789 = G__19796;
        continue;
      } else {
        var temp__4126__auto___19797 = cljs.core.seq.call(null, seq__19780_19786);
        if (temp__4126__auto___19797) {
          var seq__19780_19798__$1 = temp__4126__auto___19797;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19780_19798__$1)) {
            var c__4227__auto___19799 = cljs.core.chunk_first.call(null, seq__19780_19798__$1);
            var G__19800 = cljs.core.chunk_rest.call(null, seq__19780_19798__$1);
            var G__19801 = c__4227__auto___19799;
            var G__19802 = cljs.core.count.call(null, c__4227__auto___19799);
            var G__19803 = 0;
            seq__19780_19786 = G__19800;
            chunk__19781_19787 = G__19801;
            count__19782_19788 = G__19802;
            i__19783_19789 = G__19803;
            continue;
          } else {
            var vec__19785_19804 = cljs.core.first.call(null, seq__19780_19798__$1);
            var k_19805 = cljs.core.nth.call(null, vec__19785_19804, 0, null);
            var v_19806 = cljs.core.nth.call(null, vec__19785_19804, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_19805, [cljs.core.str(v_19806), cljs.core.str("px")].join(""));
            var G__19807 = cljs.core.next.call(null, seq__19780_19798__$1);
            var G__19808 = null;
            var G__19809 = 0;
            var G__19810 = 0;
            seq__19780_19786 = G__19807;
            chunk__19781_19787 = G__19808;
            count__19782_19788 = G__19809;
            i__19783_19789 = G__19810;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__19811) {
    var elem = cljs.core.first(arglist__19811);
    var kvs = cljs.core.rest(arglist__19811);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__19820 = dommy.template.__GT_node_like.call(null, elem);
        G__19820[cljs.core.name.call(null, k)] = v;
        return G__19820;
      } else {
        var G__19821 = dommy.template.__GT_node_like.call(null, elem);
        G__19821.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", 1123684643) ? dommy.attrs.style_str.call(null, v) : v);
        return G__19821;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__19828__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__19822_19829 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__19823_19830 = null;
      var count__19824_19831 = 0;
      var i__19825_19832 = 0;
      while (true) {
        if (i__19825_19832 < count__19824_19831) {
          var vec__19826_19833 = cljs.core._nth.call(null, chunk__19823_19830, i__19825_19832);
          var k_19834__$1 = cljs.core.nth.call(null, vec__19826_19833, 0, null);
          var v_19835__$1 = cljs.core.nth.call(null, vec__19826_19833, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_19834__$1, v_19835__$1);
          var G__19836 = seq__19822_19829;
          var G__19837 = chunk__19823_19830;
          var G__19838 = count__19824_19831;
          var G__19839 = i__19825_19832 + 1;
          seq__19822_19829 = G__19836;
          chunk__19823_19830 = G__19837;
          count__19824_19831 = G__19838;
          i__19825_19832 = G__19839;
          continue;
        } else {
          var temp__4126__auto___19840 = cljs.core.seq.call(null, seq__19822_19829);
          if (temp__4126__auto___19840) {
            var seq__19822_19841__$1 = temp__4126__auto___19840;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19822_19841__$1)) {
              var c__4227__auto___19842 = cljs.core.chunk_first.call(null, seq__19822_19841__$1);
              var G__19843 = cljs.core.chunk_rest.call(null, seq__19822_19841__$1);
              var G__19844 = c__4227__auto___19842;
              var G__19845 = cljs.core.count.call(null, c__4227__auto___19842);
              var G__19846 = 0;
              seq__19822_19829 = G__19843;
              chunk__19823_19830 = G__19844;
              count__19824_19831 = G__19845;
              i__19825_19832 = G__19846;
              continue;
            } else {
              var vec__19827_19847 = cljs.core.first.call(null, seq__19822_19841__$1);
              var k_19848__$1 = cljs.core.nth.call(null, vec__19827_19847, 0, null);
              var v_19849__$1 = cljs.core.nth.call(null, vec__19827_19847, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_19848__$1, v_19849__$1);
              var G__19850 = cljs.core.next.call(null, seq__19822_19841__$1);
              var G__19851 = null;
              var G__19852 = 0;
              var G__19853 = 0;
              seq__19822_19829 = G__19850;
              chunk__19823_19830 = G__19851;
              count__19824_19831 = G__19852;
              i__19825_19832 = G__19853;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__19828 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__19828__delegate.call(this, elem, k, v, kvs);
    };
    G__19828.cljs$lang$maxFixedArity = 3;
    G__19828.cljs$lang$applyTo = function(arglist__19854) {
      var elem = cljs.core.first(arglist__19854);
      arglist__19854 = cljs.core.next(arglist__19854);
      var k = cljs.core.first(arglist__19854);
      arglist__19854 = cljs.core.next(arglist__19854);
      var v = cljs.core.first(arglist__19854);
      var kvs = cljs.core.rest(arglist__19854);
      return G__19828__delegate(elem, k, v, kvs);
    };
    G__19828.cljs$core$IFn$_invoke$arity$variadic = G__19828__delegate;
    return G__19828;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__19863__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__19859_19864 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__19860_19865 = null;
      var count__19861_19866 = 0;
      var i__19862_19867 = 0;
      while (true) {
        if (i__19862_19867 < count__19861_19866) {
          var k_19868__$1 = cljs.core._nth.call(null, chunk__19860_19865, i__19862_19867);
          remove_attr_BANG_.call(null, elem__$1, k_19868__$1);
          var G__19869 = seq__19859_19864;
          var G__19870 = chunk__19860_19865;
          var G__19871 = count__19861_19866;
          var G__19872 = i__19862_19867 + 1;
          seq__19859_19864 = G__19869;
          chunk__19860_19865 = G__19870;
          count__19861_19866 = G__19871;
          i__19862_19867 = G__19872;
          continue;
        } else {
          var temp__4126__auto___19873 = cljs.core.seq.call(null, seq__19859_19864);
          if (temp__4126__auto___19873) {
            var seq__19859_19874__$1 = temp__4126__auto___19873;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19859_19874__$1)) {
              var c__4227__auto___19875 = cljs.core.chunk_first.call(null, seq__19859_19874__$1);
              var G__19876 = cljs.core.chunk_rest.call(null, seq__19859_19874__$1);
              var G__19877 = c__4227__auto___19875;
              var G__19878 = cljs.core.count.call(null, c__4227__auto___19875);
              var G__19879 = 0;
              seq__19859_19864 = G__19876;
              chunk__19860_19865 = G__19877;
              count__19861_19866 = G__19878;
              i__19862_19867 = G__19879;
              continue;
            } else {
              var k_19880__$1 = cljs.core.first.call(null, seq__19859_19874__$1);
              remove_attr_BANG_.call(null, elem__$1, k_19880__$1);
              var G__19881 = cljs.core.next.call(null, seq__19859_19874__$1);
              var G__19882 = null;
              var G__19883 = 0;
              var G__19884 = 0;
              seq__19859_19864 = G__19881;
              chunk__19860_19865 = G__19882;
              count__19861_19866 = G__19883;
              i__19862_19867 = G__19884;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__19863 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19863__delegate.call(this, elem, k, ks);
    };
    G__19863.cljs$lang$maxFixedArity = 2;
    G__19863.cljs$lang$applyTo = function(arglist__19885) {
      var elem = cljs.core.first(arglist__19885);
      arglist__19885 = cljs.core.next(arglist__19885);
      var k = cljs.core.first(arglist__19885);
      var ks = cljs.core.rest(arglist__19885);
      return G__19863__delegate(elem, k, ks);
    };
    G__19863.cljs$core$IFn$_invoke$arity$variadic = G__19863__delegate;
    return G__19863;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__19887 = dommy.template.__GT_node_like.call(null, elem);
    G__19887.style.display = show_QMARK_ ? "" : "none";
    return G__19887;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__19889 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__19889, false);
  return G__19889;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__19891 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__19891, true);
  return G__19891;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__19893 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__19893["constructor"] = Object;
    return G__19893;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", 1014019271)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj19895 = {};
  return obj19895;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = dommy.template._elem[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = dommy.template._elem["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", 1017020587) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_19898 = node_str.substring(base_idx);
    while (true) {
      var next_idx_19899 = dommy.template.next_css_index.call(null, str_19898, 1);
      var frag_19900 = next_idx_19899 >= 0 ? str_19898.substring(0, next_idx_19899) : str_19898;
      var G__19897_19901 = frag_19900.charAt(0);
      if (cljs.core._EQ_.call(null, "#", G__19897_19901)) {
        node.setAttribute("id", frag_19900.substring(1));
      } else {
        if (cljs.core._EQ_.call(null, ".", G__19897_19901)) {
          dommy.attrs.add_class_BANG_.call(null, node, frag_19900.substring(1));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(frag_19900.charAt(0))].join(""));
          } else {
          }
        }
      }
      if (next_idx_19899 >= 0) {
        var G__19902 = str_19898.substring(next_idx_19899);
        str_19898 = G__19902;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw[cljs.core.str("Don't know how to make node from: "), cljs.core.str(cljs.core.pr_str.call(null, node_data))].join("");
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__19908 = data;
      if (G__19908) {
        var bit__4129__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3479__auto__ = bit__4129__auto__;
          if (cljs.core.truth_(or__3479__auto__)) {
            return or__3479__auto__;
          } else {
            return G__19908.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__19908.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19908);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19908);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__19909_19913 = cljs.core.seq.call(null, data);
        var chunk__19910_19914 = null;
        var count__19911_19915 = 0;
        var i__19912_19916 = 0;
        while (true) {
          if (i__19912_19916 < count__19911_19915) {
            var child_19917 = cljs.core._nth.call(null, chunk__19910_19914, i__19912_19916);
            __GT_document_fragment.call(null, result_frag, child_19917);
            var G__19918 = seq__19909_19913;
            var G__19919 = chunk__19910_19914;
            var G__19920 = count__19911_19915;
            var G__19921 = i__19912_19916 + 1;
            seq__19909_19913 = G__19918;
            chunk__19910_19914 = G__19919;
            count__19911_19915 = G__19920;
            i__19912_19916 = G__19921;
            continue;
          } else {
            var temp__4126__auto___19922 = cljs.core.seq.call(null, seq__19909_19913);
            if (temp__4126__auto___19922) {
              var seq__19909_19923__$1 = temp__4126__auto___19922;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19909_19923__$1)) {
                var c__4227__auto___19924 = cljs.core.chunk_first.call(null, seq__19909_19923__$1);
                var G__19925 = cljs.core.chunk_rest.call(null, seq__19909_19923__$1);
                var G__19926 = c__4227__auto___19924;
                var G__19927 = cljs.core.count.call(null, c__4227__auto___19924);
                var G__19928 = 0;
                seq__19909_19913 = G__19925;
                chunk__19910_19914 = G__19926;
                count__19911_19915 = G__19927;
                i__19912_19916 = G__19928;
                continue;
              } else {
                var child_19929 = cljs.core.first.call(null, seq__19909_19923__$1);
                __GT_document_fragment.call(null, result_frag, child_19929);
                var G__19930 = cljs.core.next.call(null, seq__19909_19923__$1);
                var G__19931 = null;
                var G__19932 = 0;
                var G__19933 = 0;
                seq__19909_19913 = G__19930;
                chunk__19910_19914 = G__19931;
                count__19911_19915 = G__19932;
                i__19912_19916 = G__19933;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__19935 = data;
    if (G__19935) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19935.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__19935.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19935);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19935);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__19936) {
  var vec__19956 = p__19936;
  var tag_name = cljs.core.nth.call(null, vec__19956, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__19956, 1, null);
  var children = cljs.core.nthnext.call(null, vec__19956, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__19958 = maybe_attrs;
    if (G__19958) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__19958.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__19958.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19958);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__19958);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__19959_19975 = cljs.core.seq.call(null, attrs);
  var chunk__19960_19976 = null;
  var count__19961_19977 = 0;
  var i__19962_19978 = 0;
  while (true) {
    if (i__19962_19978 < count__19961_19977) {
      var vec__19963_19979 = cljs.core._nth.call(null, chunk__19960_19976, i__19962_19978);
      var k_19980 = cljs.core.nth.call(null, vec__19963_19979, 0, null);
      var v_19981 = cljs.core.nth.call(null, vec__19963_19979, 1, null);
      var G__19964_19982 = k_19980;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__19964_19982)) {
        var seq__19965_19983 = cljs.core.seq.call(null, v_19981);
        var chunk__19966_19984 = null;
        var count__19967_19985 = 0;
        var i__19968_19986 = 0;
        while (true) {
          if (i__19968_19986 < count__19967_19985) {
            var c_19987 = cljs.core._nth.call(null, chunk__19966_19984, i__19968_19986);
            dommy.attrs.add_class_BANG_.call(null, n, c_19987);
            var G__19988 = seq__19965_19983;
            var G__19989 = chunk__19966_19984;
            var G__19990 = count__19967_19985;
            var G__19991 = i__19968_19986 + 1;
            seq__19965_19983 = G__19988;
            chunk__19966_19984 = G__19989;
            count__19967_19985 = G__19990;
            i__19968_19986 = G__19991;
            continue;
          } else {
            var temp__4126__auto___19992 = cljs.core.seq.call(null, seq__19965_19983);
            if (temp__4126__auto___19992) {
              var seq__19965_19993__$1 = temp__4126__auto___19992;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19965_19993__$1)) {
                var c__4227__auto___19994 = cljs.core.chunk_first.call(null, seq__19965_19993__$1);
                var G__19995 = cljs.core.chunk_rest.call(null, seq__19965_19993__$1);
                var G__19996 = c__4227__auto___19994;
                var G__19997 = cljs.core.count.call(null, c__4227__auto___19994);
                var G__19998 = 0;
                seq__19965_19983 = G__19995;
                chunk__19966_19984 = G__19996;
                count__19967_19985 = G__19997;
                i__19968_19986 = G__19998;
                continue;
              } else {
                var c_19999 = cljs.core.first.call(null, seq__19965_19993__$1);
                dommy.attrs.add_class_BANG_.call(null, n, c_19999);
                var G__20000 = cljs.core.next.call(null, seq__19965_19993__$1);
                var G__20001 = null;
                var G__20002 = 0;
                var G__20003 = 0;
                seq__19965_19983 = G__20000;
                chunk__19966_19984 = G__20001;
                count__19967_19985 = G__20002;
                i__19968_19986 = G__20003;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__19964_19982)) {
          dommy.attrs.add_class_BANG_.call(null, n, v_19981);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            dommy.attrs.set_attr_BANG_.call(null, n, k_19980, v_19981);
          } else {
          }
        }
      }
      var G__20004 = seq__19959_19975;
      var G__20005 = chunk__19960_19976;
      var G__20006 = count__19961_19977;
      var G__20007 = i__19962_19978 + 1;
      seq__19959_19975 = G__20004;
      chunk__19960_19976 = G__20005;
      count__19961_19977 = G__20006;
      i__19962_19978 = G__20007;
      continue;
    } else {
      var temp__4126__auto___20008 = cljs.core.seq.call(null, seq__19959_19975);
      if (temp__4126__auto___20008) {
        var seq__19959_20009__$1 = temp__4126__auto___20008;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19959_20009__$1)) {
          var c__4227__auto___20010 = cljs.core.chunk_first.call(null, seq__19959_20009__$1);
          var G__20011 = cljs.core.chunk_rest.call(null, seq__19959_20009__$1);
          var G__20012 = c__4227__auto___20010;
          var G__20013 = cljs.core.count.call(null, c__4227__auto___20010);
          var G__20014 = 0;
          seq__19959_19975 = G__20011;
          chunk__19960_19976 = G__20012;
          count__19961_19977 = G__20013;
          i__19962_19978 = G__20014;
          continue;
        } else {
          var vec__19969_20015 = cljs.core.first.call(null, seq__19959_20009__$1);
          var k_20016 = cljs.core.nth.call(null, vec__19969_20015, 0, null);
          var v_20017 = cljs.core.nth.call(null, vec__19969_20015, 1, null);
          var G__19970_20018 = k_20016;
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), G__19970_20018)) {
            var seq__19971_20019 = cljs.core.seq.call(null, v_20017);
            var chunk__19972_20020 = null;
            var count__19973_20021 = 0;
            var i__19974_20022 = 0;
            while (true) {
              if (i__19974_20022 < count__19973_20021) {
                var c_20023 = cljs.core._nth.call(null, chunk__19972_20020, i__19974_20022);
                dommy.attrs.add_class_BANG_.call(null, n, c_20023);
                var G__20024 = seq__19971_20019;
                var G__20025 = chunk__19972_20020;
                var G__20026 = count__19973_20021;
                var G__20027 = i__19974_20022 + 1;
                seq__19971_20019 = G__20024;
                chunk__19972_20020 = G__20025;
                count__19973_20021 = G__20026;
                i__19974_20022 = G__20027;
                continue;
              } else {
                var temp__4126__auto___20028__$1 = cljs.core.seq.call(null, seq__19971_20019);
                if (temp__4126__auto___20028__$1) {
                  var seq__19971_20029__$1 = temp__4126__auto___20028__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19971_20029__$1)) {
                    var c__4227__auto___20030 = cljs.core.chunk_first.call(null, seq__19971_20029__$1);
                    var G__20031 = cljs.core.chunk_rest.call(null, seq__19971_20029__$1);
                    var G__20032 = c__4227__auto___20030;
                    var G__20033 = cljs.core.count.call(null, c__4227__auto___20030);
                    var G__20034 = 0;
                    seq__19971_20019 = G__20031;
                    chunk__19972_20020 = G__20032;
                    count__19973_20021 = G__20033;
                    i__19974_20022 = G__20034;
                    continue;
                  } else {
                    var c_20035 = cljs.core.first.call(null, seq__19971_20029__$1);
                    dommy.attrs.add_class_BANG_.call(null, n, c_20035);
                    var G__20036 = cljs.core.next.call(null, seq__19971_20029__$1);
                    var G__20037 = null;
                    var G__20038 = 0;
                    var G__20039 = 0;
                    seq__19971_20019 = G__20036;
                    chunk__19972_20020 = G__20037;
                    count__19973_20021 = G__20038;
                    i__19974_20022 = G__20039;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), G__19970_20018)) {
              dommy.attrs.add_class_BANG_.call(null, n, v_20017);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                dommy.attrs.set_attr_BANG_.call(null, n, k_20016, v_20017);
              } else {
              }
            }
          }
          var G__20040 = cljs.core.next.call(null, seq__19959_20009__$1);
          var G__20041 = null;
          var G__20042 = 0;
          var G__20043 = 0;
          seq__19959_19975 = G__20040;
          chunk__19960_19976 = G__20041;
          count__19961_19977 = G__20042;
          i__19962_19978 = G__20043;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode([cljs.core.str(this$)].join(""));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode([cljs.core.str(this$)].join(""));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e20044) {
  if (e20044 instanceof ReferenceError) {
    var __20045 = e20044;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      throw e20044;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__20047 = data;
    if (G__20047) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__20047.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__20047.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20047);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__20047);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__19607) {
  var vec__19609 = p__19607;
  var k = cljs.core.nth.call(null, vec__19609, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__19609, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3467__auto__ = ks;
      if (and__3467__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3467__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3479__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__19217 = dommy.template.__GT_node_like.call(null, parent);
    G__19217.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__19217;
  };
  var append_BANG___3 = function() {
    var G__19222__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19218_19223 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19219_19224 = null;
      var count__19220_19225 = 0;
      var i__19221_19226 = 0;
      while (true) {
        if (i__19221_19226 < count__19220_19225) {
          var c_19227 = cljs.core._nth.call(null, chunk__19219_19224, i__19221_19226);
          append_BANG_.call(null, parent__$1, c_19227);
          var G__19228 = seq__19218_19223;
          var G__19229 = chunk__19219_19224;
          var G__19230 = count__19220_19225;
          var G__19231 = i__19221_19226 + 1;
          seq__19218_19223 = G__19228;
          chunk__19219_19224 = G__19229;
          count__19220_19225 = G__19230;
          i__19221_19226 = G__19231;
          continue;
        } else {
          var temp__4126__auto___19232 = cljs.core.seq.call(null, seq__19218_19223);
          if (temp__4126__auto___19232) {
            var seq__19218_19233__$1 = temp__4126__auto___19232;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19218_19233__$1)) {
              var c__4227__auto___19234 = cljs.core.chunk_first.call(null, seq__19218_19233__$1);
              var G__19235 = cljs.core.chunk_rest.call(null, seq__19218_19233__$1);
              var G__19236 = c__4227__auto___19234;
              var G__19237 = cljs.core.count.call(null, c__4227__auto___19234);
              var G__19238 = 0;
              seq__19218_19223 = G__19235;
              chunk__19219_19224 = G__19236;
              count__19220_19225 = G__19237;
              i__19221_19226 = G__19238;
              continue;
            } else {
              var c_19239 = cljs.core.first.call(null, seq__19218_19233__$1);
              append_BANG_.call(null, parent__$1, c_19239);
              var G__19240 = cljs.core.next.call(null, seq__19218_19233__$1);
              var G__19241 = null;
              var G__19242 = 0;
              var G__19243 = 0;
              seq__19218_19223 = G__19240;
              chunk__19219_19224 = G__19241;
              count__19220_19225 = G__19242;
              i__19221_19226 = G__19243;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19222 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19222__delegate.call(this, parent, child, more_children);
    };
    G__19222.cljs$lang$maxFixedArity = 2;
    G__19222.cljs$lang$applyTo = function(arglist__19244) {
      var parent = cljs.core.first(arglist__19244);
      arglist__19244 = cljs.core.next(arglist__19244);
      var child = cljs.core.first(arglist__19244);
      var more_children = cljs.core.rest(arglist__19244);
      return G__19222__delegate(parent, child, more_children);
    };
    G__19222.cljs$core$IFn$_invoke$arity$variadic = G__19222__delegate;
    return G__19222;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__19253__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__19249_19254 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__19250_19255 = null;
      var count__19251_19256 = 0;
      var i__19252_19257 = 0;
      while (true) {
        if (i__19252_19257 < count__19251_19256) {
          var c_19258 = cljs.core._nth.call(null, chunk__19250_19255, i__19252_19257);
          prepend_BANG_.call(null, parent__$1, c_19258);
          var G__19259 = seq__19249_19254;
          var G__19260 = chunk__19250_19255;
          var G__19261 = count__19251_19256;
          var G__19262 = i__19252_19257 + 1;
          seq__19249_19254 = G__19259;
          chunk__19250_19255 = G__19260;
          count__19251_19256 = G__19261;
          i__19252_19257 = G__19262;
          continue;
        } else {
          var temp__4126__auto___19263 = cljs.core.seq.call(null, seq__19249_19254);
          if (temp__4126__auto___19263) {
            var seq__19249_19264__$1 = temp__4126__auto___19263;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__19249_19264__$1)) {
              var c__4227__auto___19265 = cljs.core.chunk_first.call(null, seq__19249_19264__$1);
              var G__19266 = cljs.core.chunk_rest.call(null, seq__19249_19264__$1);
              var G__19267 = c__4227__auto___19265;
              var G__19268 = cljs.core.count.call(null, c__4227__auto___19265);
              var G__19269 = 0;
              seq__19249_19254 = G__19266;
              chunk__19250_19255 = G__19267;
              count__19251_19256 = G__19268;
              i__19252_19257 = G__19269;
              continue;
            } else {
              var c_19270 = cljs.core.first.call(null, seq__19249_19264__$1);
              prepend_BANG_.call(null, parent__$1, c_19270);
              var G__19271 = cljs.core.next.call(null, seq__19249_19264__$1);
              var G__19272 = null;
              var G__19273 = 0;
              var G__19274 = 0;
              seq__19249_19254 = G__19271;
              chunk__19250_19255 = G__19272;
              count__19251_19256 = G__19273;
              i__19252_19257 = G__19274;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__19253 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__19253__delegate.call(this, parent, child, more_children);
    };
    G__19253.cljs$lang$maxFixedArity = 2;
    G__19253.cljs$lang$applyTo = function(arglist__19275) {
      var parent = cljs.core.first(arglist__19275);
      arglist__19275 = cljs.core.next(arglist__19275);
      var child = cljs.core.first(arglist__19275);
      var more_children = cljs.core.rest(arglist__19275);
      return G__19253__delegate(parent, child, more_children);
    };
    G__19253.cljs$core$IFn$_invoke$arity$variadic = G__19253__delegate;
    return G__19253;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "other", "other", -1534461751, null))))].join(""));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___19276 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___19276)) {
    var next_19277 = temp__4124__auto___19276;
    parent.insertBefore(actual_node, next_19277);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "elem", "elem", -1637415608, null))))].join(""));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__19279 = dommy.template.__GT_node_like.call(null, parent);
  G__19279.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__19279, node_like);
  return G__19279;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__19281 = elem__$1.parentNode;
  G__19281.removeChild(elem__$1);
  return G__19281;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", 602947571))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -2051487815, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 19054414, null), new cljs.core.Keyword(null, "container", "container", 602947571)))))].join(""));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", 602947571), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__19287) {
      var vec__19288 = p__19287;
      var k = cljs.core.nth.call(null, vec__19288, 0, null);
      var v = cljs.core.nth.call(null, vec__19288, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", 1017226334)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t19289 !== "undefined") {
        } else {
          dommy.core.t19289 = function(v, k, vec__19288, p__19287, container, key_selectors_map, template, selector_map, meta19290) {
            this.v = v;
            this.k = k;
            this.vec__19288 = vec__19288;
            this.p__19287 = p__19287;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta19290 = meta19290;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t19289.cljs$lang$type = true;
          dommy.core.t19289.cljs$lang$ctorStr = "dommy.core/t19289";
          dommy.core.t19289.cljs$lang$ctorPrWriter = function(vec__19288, k, v, container) {
            return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
              return cljs.core._write.call(null, writer__4047__auto__, "dommy.core/t19289");
            };
          }(vec__19288, k, v, container);
          dommy.core.t19289.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__19288, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__19288, k, v, container);
          dommy.core.t19289.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__19288, k, v, container) {
            return function(_19291) {
              var self__ = this;
              var _19291__$1 = this;
              return self__.meta19290;
            };
          }(vec__19288, k, v, container);
          dommy.core.t19289.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__19288, k, v, container) {
            return function(_19291, meta19290__$1) {
              var self__ = this;
              var _19291__$1 = this;
              return new dommy.core.t19289(self__.v, self__.k, self__.vec__19288, self__.p__19287, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta19290__$1);
            };
          }(vec__19288, k, v, container);
          dommy.core.__GT_t19289 = function(vec__19288, k, v, container) {
            return function __GT_t19289(v__$1, k__$1, vec__19288__$1, p__19287__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19290) {
              return new dommy.core.t19289(v__$1, k__$1, vec__19288__$1, p__19287__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta19290);
            };
          }(vec__19288, k, v, container);
        }
        return new dommy.core.t19289(v, k, vec__19288, p__19287, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__19292_SHARP_) {
    return p1__19292_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__19293_SHARP_) {
        return!(p1__19293_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19294) {
  var vec__19295 = p__19294;
  var special_mouse_event = cljs.core.nth.call(null, vec__19295, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__19295, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__19295, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__19295, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3479__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3479__auto__)) {
              return or__3479__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3467__auto__ = related_target;
            if (cljs.core.truth_(and__3467__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3467__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__19295, special_mouse_event, real_mouse_event);
    };
  }(vec__19295, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", 2027084997), new cljs.core.Keyword(null, "mouseover", "mouseover", 1601081963), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 2033263780), new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3467__auto__ = selected_target;
      if (cljs.core.truth_(and__3467__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", 1284845038)));
      } else {
        return and__3467__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3479__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3479__auto__)) {
    return or__3479__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__19296) {
    var elem = cljs.core.first(arglist__19296);
    arglist__19296 = cljs.core.next(arglist__19296);
    var f = cljs.core.first(arglist__19296);
    var args = cljs.core.rest(arglist__19296);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__19297_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__19297_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__19321_19344 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19345 = cljs.core.nth.call(null, vec__19321_19344, 0, null);
    var selector_19346 = cljs.core.nth.call(null, vec__19321_19344, 1, null);
    var seq__19322_19347 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19329_19348 = null;
    var count__19330_19349 = 0;
    var i__19331_19350 = 0;
    while (true) {
      if (i__19331_19350 < count__19330_19349) {
        var vec__19338_19351 = cljs.core._nth.call(null, chunk__19329_19348, i__19331_19350);
        var orig_type_19352 = cljs.core.nth.call(null, vec__19338_19351, 0, null);
        var f_19353 = cljs.core.nth.call(null, vec__19338_19351, 1, null);
        var seq__19332_19354 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19352, new cljs.core.PersistentArrayMap.fromArray([orig_type_19352, cljs.core.identity], true, false)));
        var chunk__19334_19355 = null;
        var count__19335_19356 = 0;
        var i__19336_19357 = 0;
        while (true) {
          if (i__19336_19357 < count__19335_19356) {
            var vec__19339_19358 = cljs.core._nth.call(null, chunk__19334_19355, i__19336_19357);
            var actual_type_19359 = cljs.core.nth.call(null, vec__19339_19358, 0, null);
            var factory_19360 = cljs.core.nth.call(null, vec__19339_19358, 1, null);
            var canonical_f_19361 = (cljs.core.truth_(selector_19346) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19345, selector_19346) : cljs.core.identity).call(null, factory_19360.call(null, f_19353));
            dommy.core.update_event_listeners_BANG_.call(null, elem_19345, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19346, actual_type_19359, f_19353], null), canonical_f_19361);
            if (cljs.core.truth_(elem_19345.addEventListener)) {
              elem_19345.addEventListener(cljs.core.name.call(null, actual_type_19359), canonical_f_19361);
            } else {
              elem_19345.attachEvent(cljs.core.name.call(null, actual_type_19359), canonical_f_19361);
            }
            var G__19362 = seq__19332_19354;
            var G__19363 = chunk__19334_19355;
            var G__19364 = count__19335_19356;
            var G__19365 = i__19336_19357 + 1;
            seq__19332_19354 = G__19362;
            chunk__19334_19355 = G__19363;
            count__19335_19356 = G__19364;
            i__19336_19357 = G__19365;
            continue;
          } else {
            var temp__4126__auto___19366 = cljs.core.seq.call(null, seq__19332_19354);
            if (temp__4126__auto___19366) {
              var seq__19332_19367__$1 = temp__4126__auto___19366;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19332_19367__$1)) {
                var c__4227__auto___19368 = cljs.core.chunk_first.call(null, seq__19332_19367__$1);
                var G__19369 = cljs.core.chunk_rest.call(null, seq__19332_19367__$1);
                var G__19370 = c__4227__auto___19368;
                var G__19371 = cljs.core.count.call(null, c__4227__auto___19368);
                var G__19372 = 0;
                seq__19332_19354 = G__19369;
                chunk__19334_19355 = G__19370;
                count__19335_19356 = G__19371;
                i__19336_19357 = G__19372;
                continue;
              } else {
                var vec__19340_19373 = cljs.core.first.call(null, seq__19332_19367__$1);
                var actual_type_19374 = cljs.core.nth.call(null, vec__19340_19373, 0, null);
                var factory_19375 = cljs.core.nth.call(null, vec__19340_19373, 1, null);
                var canonical_f_19376 = (cljs.core.truth_(selector_19346) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19345, selector_19346) : cljs.core.identity).call(null, factory_19375.call(null, f_19353));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19345, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19346, actual_type_19374, f_19353], null), canonical_f_19376);
                if (cljs.core.truth_(elem_19345.addEventListener)) {
                  elem_19345.addEventListener(cljs.core.name.call(null, actual_type_19374), canonical_f_19376);
                } else {
                  elem_19345.attachEvent(cljs.core.name.call(null, actual_type_19374), canonical_f_19376);
                }
                var G__19377 = cljs.core.next.call(null, seq__19332_19367__$1);
                var G__19378 = null;
                var G__19379 = 0;
                var G__19380 = 0;
                seq__19332_19354 = G__19377;
                chunk__19334_19355 = G__19378;
                count__19335_19356 = G__19379;
                i__19336_19357 = G__19380;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19381 = seq__19322_19347;
        var G__19382 = chunk__19329_19348;
        var G__19383 = count__19330_19349;
        var G__19384 = i__19331_19350 + 1;
        seq__19322_19347 = G__19381;
        chunk__19329_19348 = G__19382;
        count__19330_19349 = G__19383;
        i__19331_19350 = G__19384;
        continue;
      } else {
        var temp__4126__auto___19385 = cljs.core.seq.call(null, seq__19322_19347);
        if (temp__4126__auto___19385) {
          var seq__19322_19386__$1 = temp__4126__auto___19385;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19322_19386__$1)) {
            var c__4227__auto___19387 = cljs.core.chunk_first.call(null, seq__19322_19386__$1);
            var G__19388 = cljs.core.chunk_rest.call(null, seq__19322_19386__$1);
            var G__19389 = c__4227__auto___19387;
            var G__19390 = cljs.core.count.call(null, c__4227__auto___19387);
            var G__19391 = 0;
            seq__19322_19347 = G__19388;
            chunk__19329_19348 = G__19389;
            count__19330_19349 = G__19390;
            i__19331_19350 = G__19391;
            continue;
          } else {
            var vec__19341_19392 = cljs.core.first.call(null, seq__19322_19386__$1);
            var orig_type_19393 = cljs.core.nth.call(null, vec__19341_19392, 0, null);
            var f_19394 = cljs.core.nth.call(null, vec__19341_19392, 1, null);
            var seq__19323_19395 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19393, new cljs.core.PersistentArrayMap.fromArray([orig_type_19393, cljs.core.identity], true, false)));
            var chunk__19325_19396 = null;
            var count__19326_19397 = 0;
            var i__19327_19398 = 0;
            while (true) {
              if (i__19327_19398 < count__19326_19397) {
                var vec__19342_19399 = cljs.core._nth.call(null, chunk__19325_19396, i__19327_19398);
                var actual_type_19400 = cljs.core.nth.call(null, vec__19342_19399, 0, null);
                var factory_19401 = cljs.core.nth.call(null, vec__19342_19399, 1, null);
                var canonical_f_19402 = (cljs.core.truth_(selector_19346) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19345, selector_19346) : cljs.core.identity).call(null, factory_19401.call(null, f_19394));
                dommy.core.update_event_listeners_BANG_.call(null, elem_19345, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19346, actual_type_19400, f_19394], null), canonical_f_19402);
                if (cljs.core.truth_(elem_19345.addEventListener)) {
                  elem_19345.addEventListener(cljs.core.name.call(null, actual_type_19400), canonical_f_19402);
                } else {
                  elem_19345.attachEvent(cljs.core.name.call(null, actual_type_19400), canonical_f_19402);
                }
                var G__19403 = seq__19323_19395;
                var G__19404 = chunk__19325_19396;
                var G__19405 = count__19326_19397;
                var G__19406 = i__19327_19398 + 1;
                seq__19323_19395 = G__19403;
                chunk__19325_19396 = G__19404;
                count__19326_19397 = G__19405;
                i__19327_19398 = G__19406;
                continue;
              } else {
                var temp__4126__auto___19407__$1 = cljs.core.seq.call(null, seq__19323_19395);
                if (temp__4126__auto___19407__$1) {
                  var seq__19323_19408__$1 = temp__4126__auto___19407__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19323_19408__$1)) {
                    var c__4227__auto___19409 = cljs.core.chunk_first.call(null, seq__19323_19408__$1);
                    var G__19410 = cljs.core.chunk_rest.call(null, seq__19323_19408__$1);
                    var G__19411 = c__4227__auto___19409;
                    var G__19412 = cljs.core.count.call(null, c__4227__auto___19409);
                    var G__19413 = 0;
                    seq__19323_19395 = G__19410;
                    chunk__19325_19396 = G__19411;
                    count__19326_19397 = G__19412;
                    i__19327_19398 = G__19413;
                    continue;
                  } else {
                    var vec__19343_19414 = cljs.core.first.call(null, seq__19323_19408__$1);
                    var actual_type_19415 = cljs.core.nth.call(null, vec__19343_19414, 0, null);
                    var factory_19416 = cljs.core.nth.call(null, vec__19343_19414, 1, null);
                    var canonical_f_19417 = (cljs.core.truth_(selector_19346) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_19345, selector_19346) : cljs.core.identity).call(null, factory_19416.call(null, f_19394));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19345, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19346, actual_type_19415, f_19394], null), canonical_f_19417);
                    if (cljs.core.truth_(elem_19345.addEventListener)) {
                      elem_19345.addEventListener(cljs.core.name.call(null, actual_type_19415), canonical_f_19417);
                    } else {
                      elem_19345.attachEvent(cljs.core.name.call(null, actual_type_19415), canonical_f_19417);
                    }
                    var G__19418 = cljs.core.next.call(null, seq__19323_19408__$1);
                    var G__19419 = null;
                    var G__19420 = 0;
                    var G__19421 = 0;
                    seq__19323_19395 = G__19418;
                    chunk__19325_19396 = G__19419;
                    count__19326_19397 = G__19420;
                    i__19327_19398 = G__19421;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__19422 = cljs.core.next.call(null, seq__19322_19386__$1);
            var G__19423 = null;
            var G__19424 = 0;
            var G__19425 = 0;
            seq__19322_19347 = G__19422;
            chunk__19329_19348 = G__19423;
            count__19330_19349 = G__19424;
            i__19331_19350 = G__19425;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__19426) {
    var elem_sel = cljs.core.first(arglist__19426);
    var type_fs = cljs.core.rest(arglist__19426);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__19450_19473 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19474 = cljs.core.nth.call(null, vec__19450_19473, 0, null);
    var selector_19475 = cljs.core.nth.call(null, vec__19450_19473, 1, null);
    var seq__19451_19476 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19458_19477 = null;
    var count__19459_19478 = 0;
    var i__19460_19479 = 0;
    while (true) {
      if (i__19460_19479 < count__19459_19478) {
        var vec__19467_19480 = cljs.core._nth.call(null, chunk__19458_19477, i__19460_19479);
        var orig_type_19481 = cljs.core.nth.call(null, vec__19467_19480, 0, null);
        var f_19482 = cljs.core.nth.call(null, vec__19467_19480, 1, null);
        var seq__19461_19483 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19481, new cljs.core.PersistentArrayMap.fromArray([orig_type_19481, cljs.core.identity], true, false)));
        var chunk__19463_19484 = null;
        var count__19464_19485 = 0;
        var i__19465_19486 = 0;
        while (true) {
          if (i__19465_19486 < count__19464_19485) {
            var vec__19468_19487 = cljs.core._nth.call(null, chunk__19463_19484, i__19465_19486);
            var actual_type_19488 = cljs.core.nth.call(null, vec__19468_19487, 0, null);
            var __19489 = cljs.core.nth.call(null, vec__19468_19487, 1, null);
            var keys_19490 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19475, actual_type_19488, f_19482], null);
            var canonical_f_19491 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19474), keys_19490);
            dommy.core.update_event_listeners_BANG_.call(null, elem_19474, dommy.utils.dissoc_in, keys_19490);
            if (cljs.core.truth_(elem_19474.removeEventListener)) {
              elem_19474.removeEventListener(cljs.core.name.call(null, actual_type_19488), canonical_f_19491);
            } else {
              elem_19474.detachEvent(cljs.core.name.call(null, actual_type_19488), canonical_f_19491);
            }
            var G__19492 = seq__19461_19483;
            var G__19493 = chunk__19463_19484;
            var G__19494 = count__19464_19485;
            var G__19495 = i__19465_19486 + 1;
            seq__19461_19483 = G__19492;
            chunk__19463_19484 = G__19493;
            count__19464_19485 = G__19494;
            i__19465_19486 = G__19495;
            continue;
          } else {
            var temp__4126__auto___19496 = cljs.core.seq.call(null, seq__19461_19483);
            if (temp__4126__auto___19496) {
              var seq__19461_19497__$1 = temp__4126__auto___19496;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__19461_19497__$1)) {
                var c__4227__auto___19498 = cljs.core.chunk_first.call(null, seq__19461_19497__$1);
                var G__19499 = cljs.core.chunk_rest.call(null, seq__19461_19497__$1);
                var G__19500 = c__4227__auto___19498;
                var G__19501 = cljs.core.count.call(null, c__4227__auto___19498);
                var G__19502 = 0;
                seq__19461_19483 = G__19499;
                chunk__19463_19484 = G__19500;
                count__19464_19485 = G__19501;
                i__19465_19486 = G__19502;
                continue;
              } else {
                var vec__19469_19503 = cljs.core.first.call(null, seq__19461_19497__$1);
                var actual_type_19504 = cljs.core.nth.call(null, vec__19469_19503, 0, null);
                var __19505 = cljs.core.nth.call(null, vec__19469_19503, 1, null);
                var keys_19506 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19475, actual_type_19504, f_19482], null);
                var canonical_f_19507 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19474), keys_19506);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19474, dommy.utils.dissoc_in, keys_19506);
                if (cljs.core.truth_(elem_19474.removeEventListener)) {
                  elem_19474.removeEventListener(cljs.core.name.call(null, actual_type_19504), canonical_f_19507);
                } else {
                  elem_19474.detachEvent(cljs.core.name.call(null, actual_type_19504), canonical_f_19507);
                }
                var G__19508 = cljs.core.next.call(null, seq__19461_19497__$1);
                var G__19509 = null;
                var G__19510 = 0;
                var G__19511 = 0;
                seq__19461_19483 = G__19508;
                chunk__19463_19484 = G__19509;
                count__19464_19485 = G__19510;
                i__19465_19486 = G__19511;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__19512 = seq__19451_19476;
        var G__19513 = chunk__19458_19477;
        var G__19514 = count__19459_19478;
        var G__19515 = i__19460_19479 + 1;
        seq__19451_19476 = G__19512;
        chunk__19458_19477 = G__19513;
        count__19459_19478 = G__19514;
        i__19460_19479 = G__19515;
        continue;
      } else {
        var temp__4126__auto___19516 = cljs.core.seq.call(null, seq__19451_19476);
        if (temp__4126__auto___19516) {
          var seq__19451_19517__$1 = temp__4126__auto___19516;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19451_19517__$1)) {
            var c__4227__auto___19518 = cljs.core.chunk_first.call(null, seq__19451_19517__$1);
            var G__19519 = cljs.core.chunk_rest.call(null, seq__19451_19517__$1);
            var G__19520 = c__4227__auto___19518;
            var G__19521 = cljs.core.count.call(null, c__4227__auto___19518);
            var G__19522 = 0;
            seq__19451_19476 = G__19519;
            chunk__19458_19477 = G__19520;
            count__19459_19478 = G__19521;
            i__19460_19479 = G__19522;
            continue;
          } else {
            var vec__19470_19523 = cljs.core.first.call(null, seq__19451_19517__$1);
            var orig_type_19524 = cljs.core.nth.call(null, vec__19470_19523, 0, null);
            var f_19525 = cljs.core.nth.call(null, vec__19470_19523, 1, null);
            var seq__19452_19526 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_19524, new cljs.core.PersistentArrayMap.fromArray([orig_type_19524, cljs.core.identity], true, false)));
            var chunk__19454_19527 = null;
            var count__19455_19528 = 0;
            var i__19456_19529 = 0;
            while (true) {
              if (i__19456_19529 < count__19455_19528) {
                var vec__19471_19530 = cljs.core._nth.call(null, chunk__19454_19527, i__19456_19529);
                var actual_type_19531 = cljs.core.nth.call(null, vec__19471_19530, 0, null);
                var __19532 = cljs.core.nth.call(null, vec__19471_19530, 1, null);
                var keys_19533 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19475, actual_type_19531, f_19525], null);
                var canonical_f_19534 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19474), keys_19533);
                dommy.core.update_event_listeners_BANG_.call(null, elem_19474, dommy.utils.dissoc_in, keys_19533);
                if (cljs.core.truth_(elem_19474.removeEventListener)) {
                  elem_19474.removeEventListener(cljs.core.name.call(null, actual_type_19531), canonical_f_19534);
                } else {
                  elem_19474.detachEvent(cljs.core.name.call(null, actual_type_19531), canonical_f_19534);
                }
                var G__19535 = seq__19452_19526;
                var G__19536 = chunk__19454_19527;
                var G__19537 = count__19455_19528;
                var G__19538 = i__19456_19529 + 1;
                seq__19452_19526 = G__19535;
                chunk__19454_19527 = G__19536;
                count__19455_19528 = G__19537;
                i__19456_19529 = G__19538;
                continue;
              } else {
                var temp__4126__auto___19539__$1 = cljs.core.seq.call(null, seq__19452_19526);
                if (temp__4126__auto___19539__$1) {
                  var seq__19452_19540__$1 = temp__4126__auto___19539__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19452_19540__$1)) {
                    var c__4227__auto___19541 = cljs.core.chunk_first.call(null, seq__19452_19540__$1);
                    var G__19542 = cljs.core.chunk_rest.call(null, seq__19452_19540__$1);
                    var G__19543 = c__4227__auto___19541;
                    var G__19544 = cljs.core.count.call(null, c__4227__auto___19541);
                    var G__19545 = 0;
                    seq__19452_19526 = G__19542;
                    chunk__19454_19527 = G__19543;
                    count__19455_19528 = G__19544;
                    i__19456_19529 = G__19545;
                    continue;
                  } else {
                    var vec__19472_19546 = cljs.core.first.call(null, seq__19452_19540__$1);
                    var actual_type_19547 = cljs.core.nth.call(null, vec__19472_19546, 0, null);
                    var __19548 = cljs.core.nth.call(null, vec__19472_19546, 1, null);
                    var keys_19549 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_19475, actual_type_19547, f_19525], null);
                    var canonical_f_19550 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_19474), keys_19549);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_19474, dommy.utils.dissoc_in, keys_19549);
                    if (cljs.core.truth_(elem_19474.removeEventListener)) {
                      elem_19474.removeEventListener(cljs.core.name.call(null, actual_type_19547), canonical_f_19550);
                    } else {
                      elem_19474.detachEvent(cljs.core.name.call(null, actual_type_19547), canonical_f_19550);
                    }
                    var G__19551 = cljs.core.next.call(null, seq__19452_19540__$1);
                    var G__19552 = null;
                    var G__19553 = 0;
                    var G__19554 = 0;
                    seq__19452_19526 = G__19551;
                    chunk__19454_19527 = G__19552;
                    count__19455_19528 = G__19553;
                    i__19456_19529 = G__19554;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__19555 = cljs.core.next.call(null, seq__19451_19517__$1);
            var G__19556 = null;
            var G__19557 = 0;
            var G__19558 = 0;
            seq__19451_19476 = G__19555;
            chunk__19458_19477 = G__19556;
            count__19459_19478 = G__19557;
            i__19460_19479 = G__19558;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__19559) {
    var elem_sel = cljs.core.first(arglist__19559);
    var type_fs = cljs.core.rest(arglist__19559);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null)))))].join(""));
    }
    var vec__19567_19574 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_19575 = cljs.core.nth.call(null, vec__19567_19574, 0, null);
    var selector_19576 = cljs.core.nth.call(null, vec__19567_19574, 1, null);
    var seq__19568_19577 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__19569_19578 = null;
    var count__19570_19579 = 0;
    var i__19571_19580 = 0;
    while (true) {
      if (i__19571_19580 < count__19570_19579) {
        var vec__19572_19581 = cljs.core._nth.call(null, chunk__19569_19578, i__19571_19580);
        var type_19582 = cljs.core.nth.call(null, vec__19572_19581, 0, null);
        var f_19583 = cljs.core.nth.call(null, vec__19572_19581, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_19582, function(seq__19568_19577, chunk__19569_19578, count__19570_19579, i__19571_19580, vec__19572_19581, type_19582, f_19583, vec__19567_19574, elem_19575, selector_19576) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_19582, this_fn);
            return f_19583.call(null, e);
          };
        }(seq__19568_19577, chunk__19569_19578, count__19570_19579, i__19571_19580, vec__19572_19581, type_19582, f_19583, vec__19567_19574, elem_19575, selector_19576));
        var G__19584 = seq__19568_19577;
        var G__19585 = chunk__19569_19578;
        var G__19586 = count__19570_19579;
        var G__19587 = i__19571_19580 + 1;
        seq__19568_19577 = G__19584;
        chunk__19569_19578 = G__19585;
        count__19570_19579 = G__19586;
        i__19571_19580 = G__19587;
        continue;
      } else {
        var temp__4126__auto___19588 = cljs.core.seq.call(null, seq__19568_19577);
        if (temp__4126__auto___19588) {
          var seq__19568_19589__$1 = temp__4126__auto___19588;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19568_19589__$1)) {
            var c__4227__auto___19590 = cljs.core.chunk_first.call(null, seq__19568_19589__$1);
            var G__19591 = cljs.core.chunk_rest.call(null, seq__19568_19589__$1);
            var G__19592 = c__4227__auto___19590;
            var G__19593 = cljs.core.count.call(null, c__4227__auto___19590);
            var G__19594 = 0;
            seq__19568_19577 = G__19591;
            chunk__19569_19578 = G__19592;
            count__19570_19579 = G__19593;
            i__19571_19580 = G__19594;
            continue;
          } else {
            var vec__19573_19595 = cljs.core.first.call(null, seq__19568_19589__$1);
            var type_19596 = cljs.core.nth.call(null, vec__19573_19595, 0, null);
            var f_19597 = cljs.core.nth.call(null, vec__19573_19595, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_19596, function(seq__19568_19577, chunk__19569_19578, count__19570_19579, i__19571_19580, vec__19573_19595, type_19596, f_19597, seq__19568_19589__$1, temp__4126__auto___19588, vec__19567_19574, elem_19575, selector_19576) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_19596, this_fn);
                return f_19597.call(null, e);
              };
            }(seq__19568_19577, chunk__19569_19578, count__19570_19579, i__19571_19580, vec__19573_19595, type_19596, f_19597, seq__19568_19589__$1, temp__4126__auto___19588, vec__19567_19574, elem_19575, selector_19576));
            var G__19598 = cljs.core.next.call(null, seq__19568_19589__$1);
            var G__19599 = null;
            var G__19600 = 0;
            var G__19601 = 0;
            seq__19568_19577 = G__19598;
            chunk__19569_19578 = G__19599;
            count__19570_19579 = G__19600;
            i__19571_19580 = G__19601;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__19602) {
    var elem_sel = cljs.core.first(arglist__19602);
    var type_fs = cljs.core.rest(arglist__19602);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__19603) {
    var vec__19605 = p__19603;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__19605, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1886221157, null), new cljs.core.Symbol(null, "node", "node", -1637144645, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", -1449696112, null))))].join(""));
    }
    var update_event_BANG___$1 = function() {
      var or__3479__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3479__auto__)) {
        return or__3479__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent([cljs.core.str("on"), cljs.core.str(cljs.core.name.call(null, event_type))].join(""), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__19603 = null;
    if (arguments.length > 2) {
      p__19603 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__19603);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__19606) {
    var node = cljs.core.first(arglist__19606);
    arglist__19606 = cljs.core.next(arglist__19606);
    var event_type = cljs.core.first(arglist__19606);
    var p__19603 = cljs.core.rest(arglist__19606);
    return fire_BANG___delegate(node, event_type, p__19603);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("om_2048.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("om_tools.dom");
goog.require("om_tools.dom");
goog.require("cljs.core.async");
goog.require("om_tools.core");
goog.require("dommy.core");
goog.require("cljs.core.async");
goog.require("om.core");
goog.require("dommy.core");
goog.require("om.core");
goog.require("clojure.string");
goog.require("clojure.string");
cljs.core.enable_console_print_BANG_.call(null);
om_2048.core.pad = function pad(n, v, coll) {
  return cljs.core.take.call(null, n, cljs.core.concat.call(null, coll, cljs.core.repeat.call(null, v)));
};
om_2048.core.transposev = function transposev(vs) {
  return cljs.core.apply.call(null, cljs.core.mapv, cljs.core.vector, vs);
};
om_2048.core.IBoardTile = function() {
  var obj14144 = {};
  return obj14144;
}();
om_2048.core.tile_value = function tile_value(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om_2048$core$IBoardTile$tile_value$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om_2048$core$IBoardTile$tile_value$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om_2048.core.tile_value[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om_2048.core.tile_value["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IBoardTile.tile-value", this$);
        }
      }
    }().call(null, this$);
  }
};
om_2048.core.tile_id = function tile_id(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om_2048$core$IBoardTile$tile_id$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om_2048$core$IBoardTile$tile_id$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om_2048.core.tile_id[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om_2048.core.tile_id["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IBoardTile.tile-id", this$);
        }
      }
    }().call(null, this$);
  }
};
om_2048.core.tile_parents = function tile_parents(this$) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om_2048$core$IBoardTile$tile_parents$arity$1;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om_2048$core$IBoardTile$tile_parents$arity$1(this$);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om_2048.core.tile_parents[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om_2048.core.tile_parents["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IBoardTile.tile-parents", this$);
        }
      }
    }().call(null, this$);
  }
};
om_2048.core.IMergeableTile = function() {
  var obj14146 = {};
  return obj14146;
}();
om_2048.core.mergeable_QMARK_ = function mergeable_QMARK_(this$, other) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om_2048$core$IMergeableTile$mergeable_QMARK_$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om_2048$core$IMergeableTile$mergeable_QMARK_$arity$2(this$, other);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om_2048.core.mergeable_QMARK_[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om_2048.core.mergeable_QMARK_["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMergeableTile.mergeable?", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om_2048.core.merge_tile = function merge_tile(this$, other) {
  if (function() {
    var and__3467__auto__ = this$;
    if (and__3467__auto__) {
      return this$.om_2048$core$IMergeableTile$merge_tile$arity$2;
    } else {
      return and__3467__auto__;
    }
  }()) {
    return this$.om_2048$core$IMergeableTile$merge_tile$arity$2(this$, other);
  } else {
    var x__4106__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3479__auto__ = om_2048.core.merge_tile[goog.typeOf(x__4106__auto__)];
      if (or__3479__auto__) {
        return or__3479__auto__;
      } else {
        var or__3479__auto____$1 = om_2048.core.merge_tile["_"];
        if (or__3479__auto____$1) {
          return or__3479__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMergeableTile.merge-tile", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om_2048.core.gen_tile_id = function gen_tile_id() {
  return[cljs.core.str(cljs.core.gensym.call(null, "tile"))].join("");
};
om_2048.core.BoardTile = function(id, value, parents) {
  this.id = id;
  this.value = value;
  this.parents = parents;
};
om_2048.core.BoardTile.cljs$lang$type = true;
om_2048.core.BoardTile.cljs$lang$ctorStr = "om-2048.core/BoardTile";
om_2048.core.BoardTile.cljs$lang$ctorPrWriter = function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
  return cljs.core._write.call(null, writer__4047__auto__, "om-2048.core/BoardTile");
};
om_2048.core.BoardTile.prototype.om_2048$core$IMergeableTile$ = true;
om_2048.core.BoardTile.prototype.om_2048$core$IMergeableTile$mergeable_QMARK_$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (function() {
    var G__14147 = other;
    if (G__14147) {
      var bit__4129__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3479__auto__ = bit__4129__auto__;
        if (cljs.core.truth_(or__3479__auto__)) {
          return or__3479__auto__;
        } else {
          return G__14147.om_2048$core$IBoardTile$;
        }
      }())) {
        return true;
      } else {
        if (!G__14147.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om_2048.core.IBoardTile, G__14147);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om_2048.core.IBoardTile, G__14147);
    }
  }()) {
    return cljs.core._EQ_.call(null, self__.value, om_2048.core.tile_value.call(null, other));
  } else {
    return null;
  }
};
om_2048.core.BoardTile.prototype.om_2048$core$IMergeableTile$merge_tile$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return new om_2048.core.BoardTile(om_2048.core.gen_tile_id.call(null), self__.value + om_2048.core.tile_value.call(null, other), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1, other], null));
};
om_2048.core.BoardTile.prototype.om_2048$core$IBoardTile$ = true;
om_2048.core.BoardTile.prototype.om_2048$core$IBoardTile$tile_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om_2048.core.BoardTile.prototype.om_2048$core$IBoardTile$tile_id$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.id;
};
om_2048.core.BoardTile.prototype.om_2048$core$IBoardTile$tile_parents$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.parents;
};
om_2048.core.__GT_BoardTile = function __GT_BoardTile(id, value, parents) {
  return new om_2048.core.BoardTile(id, value, parents);
};
om_2048.core.IBoardTile["null"] = true;
om_2048.core.tile_value["null"] = function(_) {
  return null;
};
om_2048.core.tile_id["null"] = function(_) {
  return null;
};
om_2048.core.tile_parents["null"] = function(_) {
  return null;
};
om_2048.core.create_tile = function() {
  var create_tile = null;
  var create_tile__1 = function(value) {
    return create_tile.call(null, value, null);
  };
  var create_tile__2 = function(value, parents) {
    return new om_2048.core.BoardTile(om_2048.core.gen_tile_id.call(null), value, parents);
  };
  create_tile = function(value, parents) {
    switch(arguments.length) {
      case 1:
        return create_tile__1.call(this, value);
      case 2:
        return create_tile__2.call(this, value, parents);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_tile.cljs$core$IFn$_invoke$arity$1 = create_tile__1;
  create_tile.cljs$core$IFn$_invoke$arity$2 = create_tile__2;
  return create_tile;
}();
om_2048.core.walk_board = function walk_board(f, board) {
  return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map_indexed.call(null, function(row, cs) {
    return cljs.core.keep_indexed.call(null, function(col, cell) {
      return f.call(null, row, col, cell);
    }, cs);
  }, board));
};
om_2048.core.empty_cells = function empty_cells(board) {
  return om_2048.core.walk_board.call(null, function(row, col, cell) {
    if (cljs.core.truth_(cell)) {
      return null;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row, col], null);
    }
  }, board);
};
om_2048.core.tiles_by_position = function tiles_by_position(board) {
  return om_2048.core.walk_board.call(null, function(row, col, cell) {
    if (cljs.core.truth_(cell)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row, col], null), cell], null);
    } else {
      return null;
    }
  }, board);
};
om_2048.core.rand_value = function rand_value() {
  if (cljs.core.rand.call(null) < 0.9) {
    return 2;
  } else {
    return 4;
  }
};
om_2048.core.add_rand_tile = function add_rand_tile(board) {
  var temp__4124__auto__ = cljs.core.rand_nth.call(null, om_2048.core.empty_cells.call(null, board));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var coords = temp__4124__auto__;
    return cljs.core.assoc_in.call(null, board, coords, om_2048.core.create_tile.call(null, om_2048.core.rand_value.call(null)));
  } else {
    return board;
  }
};
om_2048.core.empty_board = function empty_board(width, height) {
  return cljs.core.vec.call(null, cljs.core.repeat.call(null, height, cljs.core.vec.call(null, cljs.core.repeat.call(null, width, null))));
};
om_2048.core.create_board = function() {
  var create_board = null;
  var create_board__1 = function(p__14148) {
    var vec__14152 = p__14148;
    var w = cljs.core.nth.call(null, vec__14152, 0, null);
    var h = cljs.core.nth.call(null, vec__14152, 1, null);
    return om_2048.core.empty_board.call(null, w, h);
  };
  var create_board__2 = function(size, spec) {
    return cljs.core.reduce.call(null, function(board, p__14153) {
      var vec__14154 = p__14153;
      var coord = cljs.core.nth.call(null, vec__14154, 0, null);
      var value = cljs.core.nth.call(null, vec__14154, 1, null);
      return cljs.core.assoc_in.call(null, board, coord, om_2048.core.create_tile.call(null, value));
    }, create_board.call(null, size), spec);
  };
  create_board = function(size, spec) {
    switch(arguments.length) {
      case 1:
        return create_board__1.call(this, size);
      case 2:
        return create_board__2.call(this, size, spec);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_board.cljs$core$IFn$_invoke$arity$1 = create_board__1;
  create_board.cljs$core$IFn$_invoke$arity$2 = create_board__2;
  return create_board;
}();
om_2048.core.rand_board = function() {
  var rand_board = null;
  var rand_board__1 = function(size) {
    return rand_board.call(null, size, 2);
  };
  var rand_board__2 = function(size, num_vals) {
    return cljs.core.reduce.call(null, function(board, _) {
      return om_2048.core.add_rand_tile.call(null, board);
    }, om_2048.core.create_board.call(null, size), cljs.core.range.call(null, num_vals));
  };
  rand_board = function(size, num_vals) {
    switch(arguments.length) {
      case 1:
        return rand_board__1.call(this, size);
      case 2:
        return rand_board__2.call(this, size, num_vals);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand_board.cljs$core$IFn$_invoke$arity$1 = rand_board__1;
  rand_board.cljs$core$IFn$_invoke$arity$2 = rand_board__2;
  return rand_board;
}();
om_2048.core.board_size = function board_size(board) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, board), cljs.core.count.call(null, cljs.core.first.call(null, board))], null);
};
om_2048.core.merge_row = function merge_row(row) {
  var n = cljs.core.count.call(null, row);
  var in$ = cljs.core.filterv.call(null, cljs.core.identity, row);
  var end = cljs.core.count.call(null, in$) - 1;
  var i = 0;
  var out = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (i > end) {
      return om_2048.core.pad.call(null, n, null, out);
    } else {
      if (cljs.core._EQ_.call(null, i, end)) {
        return om_2048.core.pad.call(null, n, null, cljs.core.conj.call(null, out, cljs.core.get.call(null, in$, i)));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var m = cljs.core.get.call(null, in$, i);
          var n__$1 = cljs.core.get.call(null, in$, i + 1);
          if (cljs.core.truth_(om_2048.core.mergeable_QMARK_.call(null, m, n__$1))) {
            var G__14155 = i + 2;
            var G__14156 = cljs.core.conj.call(null, out, om_2048.core.merge_tile.call(null, m, n__$1));
            i = G__14155;
            out = G__14156;
            continue;
          } else {
            var G__14157 = i + 1;
            var G__14158 = cljs.core.conj.call(null, out, m);
            i = G__14157;
            out = G__14158;
            continue;
          }
        } else {
          return null;
        }
      }
    }
    break;
  }
};
om_2048.core.merge_left = function merge_left(board) {
  return cljs.core.mapv.call(null, cljs.core.comp.call(null, cljs.core.vec, om_2048.core.merge_row), board);
};
om_2048.core.merge_right = function merge_right(board) {
  return cljs.core.mapv.call(null, cljs.core.comp.call(null, cljs.core.vec, cljs.core.reverse, om_2048.core.merge_row, cljs.core.reverse), board);
};
om_2048.core.merge_up = function merge_up(board) {
  return om_2048.core.transposev.call(null, om_2048.core.merge_left.call(null, om_2048.core.transposev.call(null, board)));
};
om_2048.core.merge_down = function merge_down(board) {
  return om_2048.core.transposev.call(null, om_2048.core.merge_right.call(null, om_2048.core.transposev.call(null, board)));
};
om_2048.core.which_key = function which_key(e) {
  return e.which;
};
om_2048.core._PLUS_keymap_PLUS_ = new cljs.core.PersistentArrayMap(null, 4, [37, new cljs.core.Keyword(null, "left", "left", 1017222009), 38, new cljs.core.Keyword(null, "up", "up", 1013907981), 39, new cljs.core.Keyword(null, "right", "right", 1122416014), 40, new cljs.core.Keyword(null, "down", "down", 1016993812)], null);
om_2048.core._PLUS_keybinds_PLUS_ = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "left", "left", 1017222009), om_2048.core.merge_left, new cljs.core.Keyword(null, "up", "up", 1013907981), om_2048.core.merge_up, new cljs.core.Keyword(null, "right", "right", 1122416014), om_2048.core.merge_right, new cljs.core.Keyword(null, "down", "down", 1016993812), om_2048.core.merge_down], null);
om_2048.core.step_board = function step_board(f, board) {
  var next_board = f.call(null, board);
  if (cljs.core._EQ_.call(null, board, next_board)) {
    return board;
  } else {
    return om_2048.core.add_rand_tile.call(null, next_board);
  }
};
om_2048.core.keyboard_task = function keyboard_task(owner, board, key_chan) {
  var board_fns = cljs.core.async.map_LT_.call(null, function(p1__14159_SHARP_) {
    var or__3479__auto__ = om_2048.core._PLUS_keybinds_PLUS_.call(null, om_2048.core._PLUS_keymap_PLUS_.call(null, om_2048.core.which_key.call(null, p1__14159_SHARP_)));
    if (cljs.core.truth_(or__3479__auto__)) {
      return or__3479__auto__;
    } else {
      return cljs.core.identity;
    }
  }, key_chan);
  var c__10197__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10197__auto__, board_fns) {
    return function() {
      var f__10198__auto__ = function() {
        var switch__10182__auto__ = function(c__10197__auto__, board_fns) {
          return function(state_14204) {
            var state_val_14205 = state_14204[1];
            if (state_val_14205 === 7) {
              var inst_14200 = state_14204[2];
              var state_14204__$1 = state_14204;
              var statearr_14206_14221 = state_14204__$1;
              statearr_14206_14221[2] = inst_14200;
              statearr_14206_14221[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_14205 === 6) {
                var state_14204__$1 = state_14204;
                var statearr_14207_14222 = state_14204__$1;
                statearr_14207_14222[2] = null;
                statearr_14207_14222[1] = 7;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_14205 === 5) {
                  var inst_14193 = state_14204[7];
                  var inst_14195 = function() {
                    var merge_fn = inst_14193;
                    var temp__4126__auto__ = inst_14193;
                    return function(merge_fn, temp__4126__auto__, inst_14193, state_val_14205, c__10197__auto__, board_fns) {
                      return function(p1__14160_SHARP_) {
                        return om_2048.core.step_board.call(null, merge_fn, p1__14160_SHARP_);
                      };
                    }(merge_fn, temp__4126__auto__, inst_14193, state_val_14205, c__10197__auto__, board_fns);
                  }();
                  var inst_14196 = om.core.transact_BANG_.call(null, board, inst_14195);
                  var state_14204__$1 = function() {
                    var statearr_14208 = state_14204;
                    statearr_14208[8] = inst_14196;
                    return statearr_14208;
                  }();
                  var statearr_14209_14223 = state_14204__$1;
                  statearr_14209_14223[2] = null;
                  statearr_14209_14223[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_14205 === 4) {
                    var inst_14193 = state_14204[7];
                    var inst_14193__$1 = state_14204[2];
                    var state_14204__$1 = function() {
                      var statearr_14210 = state_14204;
                      statearr_14210[7] = inst_14193__$1;
                      return statearr_14210;
                    }();
                    if (cljs.core.truth_(inst_14193__$1)) {
                      var statearr_14211_14224 = state_14204__$1;
                      statearr_14211_14224[1] = 5;
                    } else {
                      var statearr_14212_14225 = state_14204__$1;
                      statearr_14212_14225[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_14205 === 3) {
                      var inst_14202 = state_14204[2];
                      var state_14204__$1 = state_14204;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14204__$1, inst_14202);
                    } else {
                      if (state_val_14205 === 2) {
                        var state_14204__$1 = state_14204;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14204__$1, 4, board_fns);
                      } else {
                        if (state_val_14205 === 1) {
                          var state_14204__$1 = state_14204;
                          var statearr_14213_14226 = state_14204__$1;
                          statearr_14213_14226[2] = null;
                          statearr_14213_14226[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10197__auto__, board_fns);
        return function(switch__10182__auto__, c__10197__auto__, board_fns) {
          return function() {
            var state_machine__10183__auto__ = null;
            var state_machine__10183__auto____0 = function() {
              var statearr_14217 = [null, null, null, null, null, null, null, null, null];
              statearr_14217[0] = state_machine__10183__auto__;
              statearr_14217[1] = 1;
              return statearr_14217;
            };
            var state_machine__10183__auto____1 = function(state_14204) {
              while (true) {
                var ret_value__10184__auto__ = function() {
                  try {
                    while (true) {
                      var result__10185__auto__ = switch__10182__auto__.call(null, state_14204);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10185__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__10185__auto__;
                      }
                      break;
                    }
                  } catch (e14218) {
                    if (e14218 instanceof Object) {
                      var ex__10186__auto__ = e14218;
                      var statearr_14219_14227 = state_14204;
                      statearr_14219_14227[5] = ex__10186__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14204);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e14218;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10184__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__14228 = state_14204;
                  state_14204 = G__14228;
                  continue;
                } else {
                  return ret_value__10184__auto__;
                }
                break;
              }
            };
            state_machine__10183__auto__ = function(state_14204) {
              switch(arguments.length) {
                case 0:
                  return state_machine__10183__auto____0.call(this);
                case 1:
                  return state_machine__10183__auto____1.call(this, state_14204);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__10183__auto____0;
            state_machine__10183__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__10183__auto____1;
            return state_machine__10183__auto__;
          }();
        }(switch__10182__auto__, c__10197__auto__, board_fns);
      }();
      var state__10199__auto__ = function() {
        var statearr_14220 = f__10198__auto__.call(null);
        statearr_14220[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10197__auto__;
        return statearr_14220;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10199__auto__);
    };
  }(c__10197__auto__, board_fns));
  return c__10197__auto__;
};
om_2048.core.grid_html = function grid_html(board) {
  var vec__14250 = om_2048.core.board_size.call(null, board);
  var w = cljs.core.nth.call(null, vec__14250, 0, null);
  var h = cljs.core.nth.call(null, vec__14250, 1, null);
  return cljs.core.apply.call(null, React.DOM.div, {"className":"grid-container"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    var iter__4196__auto__ = function(vec__14250, w, h) {
      return function iter__14251(s__14252) {
        return new cljs.core.LazySeq(null, function(vec__14250, w, h) {
          return function() {
            var s__14252__$1 = s__14252;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__14252__$1);
              if (temp__4126__auto__) {
                var s__14252__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__14252__$2)) {
                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14252__$2);
                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                  var b__14254 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                  if (function() {
                    var i__14253 = 0;
                    while (true) {
                      if (i__14253 < size__4195__auto__) {
                        var _ = cljs.core._nth.call(null, c__4194__auto__, i__14253);
                        cljs.core.chunk_append.call(null, b__14254, cljs.core.apply.call(null, React.DOM.div, {"className":"grid-row"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                          var iter__4196__auto__ = function(i__14253, _, c__4194__auto__, size__4195__auto__, b__14254, s__14252__$2, temp__4126__auto__, vec__14250, w, h) {
                            return function iter__14263(s__14264) {
                              return new cljs.core.LazySeq(null, function(i__14253, _, c__4194__auto__, size__4195__auto__, b__14254, s__14252__$2, temp__4126__auto__, vec__14250, w, h) {
                                return function() {
                                  var s__14264__$1 = s__14264;
                                  while (true) {
                                    var temp__4126__auto____$1 = cljs.core.seq.call(null, s__14264__$1);
                                    if (temp__4126__auto____$1) {
                                      var s__14264__$2 = temp__4126__auto____$1;
                                      if (cljs.core.chunked_seq_QMARK_.call(null, s__14264__$2)) {
                                        var c__4194__auto____$1 = cljs.core.chunk_first.call(null, s__14264__$2);
                                        var size__4195__auto____$1 = cljs.core.count.call(null, c__4194__auto____$1);
                                        var b__14266 = cljs.core.chunk_buffer.call(null, size__4195__auto____$1);
                                        if (function() {
                                          var i__14265 = 0;
                                          while (true) {
                                            if (i__14265 < size__4195__auto____$1) {
                                              var ___$1 = cljs.core._nth.call(null, c__4194__auto____$1, i__14265);
                                              cljs.core.chunk_append.call(null, b__14266, React.DOM.div({"className":"grid-cell"}));
                                              var G__14271 = i__14265 + 1;
                                              i__14265 = G__14271;
                                              continue;
                                            } else {
                                              return true;
                                            }
                                            break;
                                          }
                                        }()) {
                                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14266), iter__14263.call(null, cljs.core.chunk_rest.call(null, s__14264__$2)));
                                        } else {
                                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14266), null);
                                        }
                                      } else {
                                        var ___$1 = cljs.core.first.call(null, s__14264__$2);
                                        return cljs.core.cons.call(null, React.DOM.div({"className":"grid-cell"}), iter__14263.call(null, cljs.core.rest.call(null, s__14264__$2)));
                                      }
                                    } else {
                                      return null;
                                    }
                                    break;
                                  }
                                };
                              }(i__14253, _, c__4194__auto__, size__4195__auto__, b__14254, s__14252__$2, temp__4126__auto__, vec__14250, w, h), null, null);
                            };
                          }(i__14253, _, c__4194__auto__, size__4195__auto__, b__14254, s__14252__$2, temp__4126__auto__, vec__14250, w, h);
                          return iter__4196__auto__.call(null, cljs.core.range.call(null, w));
                        }()], null))));
                        var G__14272 = i__14253 + 1;
                        i__14253 = G__14272;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14254), iter__14251.call(null, cljs.core.chunk_rest.call(null, s__14252__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14254), null);
                  }
                } else {
                  var _ = cljs.core.first.call(null, s__14252__$2);
                  return cljs.core.cons.call(null, cljs.core.apply.call(null, React.DOM.div, {"className":"grid-row"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                    var iter__4196__auto__ = function(_, s__14252__$2, temp__4126__auto__, vec__14250, w, h) {
                      return function iter__14267(s__14268) {
                        return new cljs.core.LazySeq(null, function(_, s__14252__$2, temp__4126__auto__, vec__14250, w, h) {
                          return function() {
                            var s__14268__$1 = s__14268;
                            while (true) {
                              var temp__4126__auto____$1 = cljs.core.seq.call(null, s__14268__$1);
                              if (temp__4126__auto____$1) {
                                var s__14268__$2 = temp__4126__auto____$1;
                                if (cljs.core.chunked_seq_QMARK_.call(null, s__14268__$2)) {
                                  var c__4194__auto__ = cljs.core.chunk_first.call(null, s__14268__$2);
                                  var size__4195__auto__ = cljs.core.count.call(null, c__4194__auto__);
                                  var b__14270 = cljs.core.chunk_buffer.call(null, size__4195__auto__);
                                  if (function() {
                                    var i__14269 = 0;
                                    while (true) {
                                      if (i__14269 < size__4195__auto__) {
                                        var ___$1 = cljs.core._nth.call(null, c__4194__auto__, i__14269);
                                        cljs.core.chunk_append.call(null, b__14270, React.DOM.div({"className":"grid-cell"}));
                                        var G__14273 = i__14269 + 1;
                                        i__14269 = G__14273;
                                        continue;
                                      } else {
                                        return true;
                                      }
                                      break;
                                    }
                                  }()) {
                                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14270), iter__14267.call(null, cljs.core.chunk_rest.call(null, s__14268__$2)));
                                  } else {
                                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14270), null);
                                  }
                                } else {
                                  var ___$1 = cljs.core.first.call(null, s__14268__$2);
                                  return cljs.core.cons.call(null, React.DOM.div({"className":"grid-cell"}), iter__14267.call(null, cljs.core.rest.call(null, s__14268__$2)));
                                }
                              } else {
                                return null;
                              }
                              break;
                            }
                          };
                        }(_, s__14252__$2, temp__4126__auto__, vec__14250, w, h), null, null);
                      };
                    }(_, s__14252__$2, temp__4126__auto__, vec__14250, w, h);
                    return iter__4196__auto__.call(null, cljs.core.range.call(null, w));
                  }()], null))), iter__14251.call(null, cljs.core.rest.call(null, s__14252__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(vec__14250, w, h), null, null);
      };
    }(vec__14250, w, h);
    return iter__4196__auto__.call(null, cljs.core.range.call(null, h));
  }()], null)));
};
om_2048.core.tile_html = function tile_html(row, col, tile) {
  var value = om_2048.core.tile_value.call(null, tile);
  var parents_QMARK_ = om_2048.core.tile_parents.call(null, tile);
  return cljs.core.apply.call(null, React.DOM.div, {"key":om_2048.core.tile_id.call(null, tile), "className":[cljs.core.str("tile tile-"), cljs.core.str(value), cljs.core.str(" tile-position-"), cljs.core.str(col + 1), cljs.core.str("-"), cljs.core.str(row + 1), cljs.core.str(om_2048.core.tile_parents.call(null, tile) ? " tile-merged" : " tile-new"), cljs.core.str(om_2048.core.tile_value.call(null, tile) > 2048 ? " tile-super" : null)].join("")}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 
  1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, React.DOM.div, {"className":"tile-inner"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [value], null)))], null)));
};
om_2048.core.tiles_html = function tiles_html(board) {
  return cljs.core.apply.call(null, React.DOM.div, {"className":"tile-container"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.map.call(null, function(p__14277) {
    var vec__14278 = p__14277;
    var vec__14279 = cljs.core.nth.call(null, vec__14278, 0, null);
    var x = cljs.core.nth.call(null, vec__14279, 0, null);
    var y = cljs.core.nth.call(null, vec__14279, 1, null);
    var tile = cljs.core.nth.call(null, vec__14278, 1, null);
    var temp__4124__auto__ = om_2048.core.tile_parents.call(null, tile);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var parents = temp__4124__auto__;
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_2048.core.tile_html.call(null, x, y, cljs.core.second.call(null, parents)), om_2048.core.tile_html.call(null, x, y, cljs.core.first.call(null, parents)), om_2048.core.tile_html.call(null, x, y, tile)], null);
    } else {
      return om_2048.core.tile_html.call(null, x, y, tile);
    }
  }, cljs.core.into.call(null, cljs.core.sorted_map.call(null), om_2048.core.tiles_by_position.call(null, board)))], null)));
};
om_2048.core.game_board = function() {
  var game_board__delegate = function(data__8976__auto__, owner14280, p__14282) {
    var vec__14299 = p__14282;
    var opts__8977__auto__ = cljs.core.nth.call(null, vec__14299, 0, null);
    return function() {
      var ufv__ = schema.utils.use_fn_validation;
      var output_schema14304 = schema.core.Any;
      var input_schema14305 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "owner", "owner", 1120069157), schema.core.Any, new cljs.core.Keyword(null, "shared", "shared", 4405305303), new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "keydown-mult", "keydown-mult", 
      4083544942), schema.core.Any], true, false), new cljs.core.Keyword(null, "data", "data", 1016980252), new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "board", "board", 1107812952), schema.core.Any], true, false)], true, false), new cljs.core.Symbol(null, "map14300", "map14300", -1505905075, null))], null);
      var input_checker14306 = schema.core.checker.call(null, input_schema14305);
      var output_checker14307 = schema.core.checker.call(null, output_schema14304);
      return schema.core.schematize_fn.call(null, function(ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
        return function fnk14303(G__14308) {
          var validate__7177__auto__ = ufv__.get_cell();
          if (cljs.core.truth_(validate__7177__auto__)) {
            var args__7178__auto___14315 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14308], null);
            var temp__4126__auto___14316 = input_checker14306.call(null, args__7178__auto___14315);
            if (cljs.core.truth_(temp__4126__auto___14316)) {
              var error__7179__auto___14317 = temp__4126__auto___14316;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14303", "fnk14303", 1983791977, null), cljs.core.pr_str.call(null, error__7179__auto___14317)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14305, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14315, new cljs.core.Keyword(null, "error", "error", 
              1110689146), error__7179__auto___14317], null));
            } else {
            }
          } else {
          }
          var o__7180__auto__ = function() {
            var map14300 = G__14308;
            while (true) {
              if (cljs.core.map_QMARK_.call(null, map14300)) {
              } else {
                throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "fnk called on non-map: %s", map14300));
              }
              var map14302 = plumbing.fnk.schema.safe_get.call(null, map14300, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.PersistentVector.EMPTY);
              var board = plumbing.fnk.schema.safe_get.call(null, map14302, new cljs.core.Keyword(null, "board", "board", 1107812952), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", 1016980252)], null));
              var map14301 = plumbing.fnk.schema.safe_get.call(null, map14300, new cljs.core.Keyword(null, "shared", "shared", 4405305303), cljs.core.PersistentVector.EMPTY);
              var keydown_mult = plumbing.fnk.schema.safe_get.call(null, map14301, new cljs.core.Keyword(null, "keydown-mult", "keydown-mult", 4083544942), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "shared", "shared", 4405305303)], null));
              var owner = plumbing.fnk.schema.safe_get.call(null, map14300, new cljs.core.Keyword(null, "owner", "owner", 1120069157), cljs.core.PersistentVector.EMPTY);
              if (typeof om_2048.core.t14312 !== "undefined") {
              } else {
                om_2048.core.t14312 = function(fnk14303, vec__14299, p__14282, map14300, game_board, owner, data__8976__auto__, validate__7177__auto__, board, owner14280, map14302, keydown_mult, input_checker14306, output_schema14304, map14301, input_schema14305, G__14308, opts__8977__auto__, ufv__, output_checker14307, meta14313) {
                  this.fnk14303 = fnk14303;
                  this.vec__14299 = vec__14299;
                  this.p__14282 = p__14282;
                  this.map14300 = map14300;
                  this.game_board = game_board;
                  this.owner = owner;
                  this.data__8976__auto__ = data__8976__auto__;
                  this.validate__7177__auto__ = validate__7177__auto__;
                  this.board = board;
                  this.owner14280 = owner14280;
                  this.map14302 = map14302;
                  this.keydown_mult = keydown_mult;
                  this.input_checker14306 = input_checker14306;
                  this.output_schema14304 = output_schema14304;
                  this.map14301 = map14301;
                  this.input_schema14305 = input_schema14305;
                  this.G__14308 = G__14308;
                  this.opts__8977__auto__ = opts__8977__auto__;
                  this.ufv__ = ufv__;
                  this.output_checker14307 = output_checker14307;
                  this.meta14313 = meta14313;
                  this.cljs$lang$protocol_mask$partition1$ = 0;
                  this.cljs$lang$protocol_mask$partition0$ = 393216;
                };
                om_2048.core.t14312.cljs$lang$type = true;
                om_2048.core.t14312.cljs$lang$ctorStr = "om-2048.core/t14312";
                om_2048.core.t14312.cljs$lang$ctorPrWriter = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
                    return cljs.core._write.call(null, writer__4047__auto__, "om-2048.core/t14312");
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.t14312.prototype.om$core$IRender$ = true;
                om_2048.core.t14312.prototype.om$core$IRender$render$arity$1 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(_) {
                    var self__ = this;
                    var ___$1 = this;
                    return cljs.core.apply.call(null, React.DOM.div, {"className":"game-container"}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [om_2048.core.grid_html.call(null, self__.board), om_2048.core.tiles_html.call(null, self__.board)], null)));
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.t14312.prototype.om$core$IWillUnmount$ = true;
                om_2048.core.t14312.prototype.om$core$IWillUnmount$will_unmount$arity$1 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(_) {
                    var self__ = this;
                    var ___$1 = this;
                    var keydown_chan = om.core.get_state.call(null, self__.owner, new cljs.core.Keyword(null, "keydown-chan", "keydown-chan", 4083234192));
                    cljs.core.async.untap.call(null, self__.keydown_mult, keydown_chan);
                    return cljs.core.async.close_BANG_.call(null, keydown_chan);
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.t14312.prototype.om$core$IWillMount$ = true;
                om_2048.core.t14312.prototype.om$core$IWillMount$will_mount$arity$1 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(_) {
                    var self__ = this;
                    var ___$1 = this;
                    var keydown_chan = cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1));
                    cljs.core.async.tap.call(null, self__.keydown_mult, keydown_chan);
                    om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "keydown-chan", "keydown-chan", 4083234192), keydown_chan);
                    return om_2048.core.keyboard_task.call(null, self__.owner, self__.board, keydown_chan);
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.t14312.prototype.cljs$core$IMeta$_meta$arity$1 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(_14314) {
                    var self__ = this;
                    var _14314__$1 = this;
                    return self__.meta14313;
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.t14312.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function(_14314, meta14313__$1) {
                    var self__ = this;
                    var _14314__$1 = this;
                    return new om_2048.core.t14312(self__.fnk14303, self__.vec__14299, self__.p__14282, self__.map14300, self__.game_board, self__.owner, self__.data__8976__auto__, self__.validate__7177__auto__, self__.board, self__.owner14280, self__.map14302, self__.keydown_mult, self__.input_checker14306, self__.output_schema14304, self__.map14301, self__.input_schema14305, self__.G__14308, self__.opts__8977__auto__, self__.ufv__, self__.output_checker14307, meta14313__$1);
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
                om_2048.core.__GT_t14312 = function(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__) {
                  return function __GT_t14312(fnk14303__$1, vec__14299__$1, p__14282__$1, map14300__$1, game_board__$1, owner__$1, data__8976__auto____$1, validate__7177__auto____$1, board__$1, owner14280__$1, map14302__$1, keydown_mult__$1, input_checker14306__$1, output_schema14304__$1, map14301__$1, input_schema14305__$1, G__14308__$1, opts__8977__auto____$1, ufv____$1, output_checker14307__$1, meta14313) {
                    return new om_2048.core.t14312(fnk14303__$1, vec__14299__$1, p__14282__$1, map14300__$1, game_board__$1, owner__$1, data__8976__auto____$1, validate__7177__auto____$1, board__$1, owner14280__$1, map14302__$1, keydown_mult__$1, input_checker14306__$1, output_schema14304__$1, map14301__$1, input_schema14305__$1, G__14308__$1, opts__8977__auto____$1, ufv____$1, output_checker14307__$1, meta14313);
                  };
                }(owner, keydown_mult, map14301, board, map14302, validate__7177__auto__, ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__);
              }
              return new om_2048.core.t14312(fnk14303, vec__14299, p__14282, map14300, game_board, owner, data__8976__auto__, validate__7177__auto__, board, owner14280, map14302, keydown_mult, input_checker14306, output_schema14304, map14301, input_schema14305, G__14308, opts__8977__auto__, ufv__, output_checker14307, null);
              break;
            }
          }();
          if (cljs.core.truth_(validate__7177__auto__)) {
            var temp__4126__auto___14318 = output_checker14307.call(null, o__7180__auto__);
            if (cljs.core.truth_(temp__4126__auto___14318)) {
              var error__7179__auto___14319 = temp__4126__auto___14318;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14303", "fnk14303", 1983791977, null), cljs.core.pr_str.call(null, error__7179__auto___14319)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14304, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, "error", "error", 
              1110689146), error__7179__auto___14319], null));
            } else {
            }
          } else {
          }
          return o__7180__auto__;
        };
      }(ufv__, output_schema14304, input_schema14305, input_checker14306, output_checker14307, vec__14299, opts__8977__auto__), schema.core.make_fn_schema.call(null, output_schema14304, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14305], null)));
    }().call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), opts__8977__auto__, new cljs.core.Keyword(null, "shared", "shared", 4405305303), om.core.get_shared.call(null, owner14280), new cljs.core.Keyword(null, "owner", "owner", 1120069157), owner14280, new cljs.core.Keyword(null, "data", "data", 1016980252), data__8976__auto__], null));
  };
  var game_board = function(data__8976__auto__, owner14280, var_args) {
    var p__14282 = null;
    if (arguments.length > 2) {
      p__14282 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return game_board__delegate.call(this, data__8976__auto__, owner14280, p__14282);
  };
  game_board.cljs$lang$maxFixedArity = 2;
  game_board.cljs$lang$applyTo = function(arglist__14320) {
    var data__8976__auto__ = cljs.core.first(arglist__14320);
    arglist__14320 = cljs.core.next(arglist__14320);
    var owner14280 = cljs.core.first(arglist__14320);
    var p__14282 = cljs.core.rest(arglist__14320);
    return game_board__delegate(data__8976__auto__, owner14280, p__14282);
  };
  game_board.cljs$core$IFn$_invoke$arity$variadic = game_board__delegate;
  return game_board;
}();
om_2048.core.__GT_game_board = function() {
  var __GT_game_board = null;
  var __GT_game_board__1 = function(cursor__8945__auto__) {
    return om.core.build.call(null, om_2048.core.game_board, cursor__8945__auto__);
  };
  var __GT_game_board__2 = function(cursor__8945__auto__, m14281) {
    return om.core.build.call(null, om_2048.core.game_board, cursor__8945__auto__, m14281);
  };
  __GT_game_board = function(cursor__8945__auto__, m14281) {
    switch(arguments.length) {
      case 1:
        return __GT_game_board__1.call(this, cursor__8945__auto__);
      case 2:
        return __GT_game_board__2.call(this, cursor__8945__auto__, m14281);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_game_board.cljs$core$IFn$_invoke$arity$1 = __GT_game_board__1;
  __GT_game_board.cljs$core$IFn$_invoke$arity$2 = __GT_game_board__2;
  return __GT_game_board;
}();
om_2048.core.app = function() {
  var app__delegate = function(data__8976__auto__, owner14322, p__14324) {
    var vec__14343 = p__14324;
    var opts__8977__auto__ = cljs.core.nth.call(null, vec__14343, 0, null);
    return function() {
      var ufv__ = schema.utils.use_fn_validation;
      var output_schema14346 = schema.core.Any;
      var input_schema14347 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one.call(null, new cljs.core.PersistentArrayMap.fromArray([schema.core.Keyword, schema.core.Any, new cljs.core.Keyword(null, "owner", "owner", 1120069157), schema.core.Any, new cljs.core.Keyword(null, "data", "data", 1016980252), schema.core.Any], true, false), new cljs.core.Symbol(null, "map14344", "map14344", -1505904947, null))], null);
      var input_checker14348 = schema.core.checker.call(null, input_schema14347);
      var output_checker14349 = schema.core.checker.call(null, output_schema14346);
      return schema.core.schematize_fn.call(null, function(ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
        return function fnk14345(G__14350) {
          var validate__7177__auto__ = ufv__.get_cell();
          if (cljs.core.truth_(validate__7177__auto__)) {
            var args__7178__auto___14361 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__14350], null);
            var temp__4126__auto___14362 = input_checker14348.call(null, args__7178__auto___14361);
            if (cljs.core.truth_(temp__4126__auto___14362)) {
              var error__7179__auto___14363 = temp__4126__auto___14362;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Input to %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14345", "fnk14345", 1983792103, null), cljs.core.pr_str.call(null, error__7179__auto___14363)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), input_schema14347, new cljs.core.Keyword(null, "value", "value", 1125876963), args__7178__auto___14361, new cljs.core.Keyword(null, "error", "error", 
              1110689146), error__7179__auto___14363], null));
            } else {
            }
          } else {
          }
          var o__7180__auto__ = function() {
            var map14344 = G__14350;
            while (true) {
              if (cljs.core.map_QMARK_.call(null, map14344)) {
              } else {
                throw new java.lang.IllegalArgumentException(schema.utils.format_STAR_.call(null, "fnk called on non-map: %s", map14344));
              }
              var data = plumbing.fnk.schema.safe_get.call(null, map14344, new cljs.core.Keyword(null, "data", "data", 1016980252), cljs.core.PersistentVector.EMPTY);
              var owner = plumbing.fnk.schema.safe_get.call(null, map14344, new cljs.core.Keyword(null, "owner", "owner", 1120069157), cljs.core.PersistentVector.EMPTY);
              if (typeof om_2048.core.t14356 !== "undefined") {
              } else {
                om_2048.core.t14356 = function(input_checker14348, output_schema14346, map14344, output_checker14349, owner, data__8976__auto__, validate__7177__auto__, data, input_schema14347, vec__14343, p__14324, fnk14345, G__14350, app, opts__8977__auto__, ufv__, owner14322, meta14357) {
                  this.input_checker14348 = input_checker14348;
                  this.output_schema14346 = output_schema14346;
                  this.map14344 = map14344;
                  this.output_checker14349 = output_checker14349;
                  this.owner = owner;
                  this.data__8976__auto__ = data__8976__auto__;
                  this.validate__7177__auto__ = validate__7177__auto__;
                  this.data = data;
                  this.input_schema14347 = input_schema14347;
                  this.vec__14343 = vec__14343;
                  this.p__14324 = p__14324;
                  this.fnk14345 = fnk14345;
                  this.G__14350 = G__14350;
                  this.app = app;
                  this.opts__8977__auto__ = opts__8977__auto__;
                  this.ufv__ = ufv__;
                  this.owner14322 = owner14322;
                  this.meta14357 = meta14357;
                  this.cljs$lang$protocol_mask$partition1$ = 0;
                  this.cljs$lang$protocol_mask$partition0$ = 393216;
                };
                om_2048.core.t14356.cljs$lang$type = true;
                om_2048.core.t14356.cljs$lang$ctorStr = "om-2048.core/t14356";
                om_2048.core.t14356.cljs$lang$ctorPrWriter = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function(this__4046__auto__, writer__4047__auto__, opt__4048__auto__) {
                    return cljs.core._write.call(null, writer__4047__auto__, "om-2048.core/t14356");
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
                om_2048.core.t14356.prototype.om$core$IRenderState$ = true;
                om_2048.core.t14356.prototype.om$core$IRenderState$render_state$arity$2 = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function(_, p__14359) {
                    var self__ = this;
                    var map__14360 = p__14359;
                    var map__14360__$1 = cljs.core.seq_QMARK_.call(null, map__14360) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14360) : map__14360;
                    var show_board_QMARK_ = cljs.core.get.call(null, map__14360__$1, new cljs.core.Keyword(null, "show-board?", "show-board?", 3931540059));
                    var ___$1 = this;
                    return om_tools.dom.element.call(null, React.DOM.div, cljs.core.apply.call(null, React.DOM.button, {"onClick":function(___$1, map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                      return function() {
                        return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "show-board?", "show-board?", 3931540059), cljs.core.not.call(null, show_board_QMARK_));
                      };
                    }(___$1, map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__)}, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(show_board_QMARK_) ? "Unmount" : "Remount"], null))), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [React.DOM.button({"onClick":function(___$1, 
                    map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                      return function(p1__14321_SHARP_) {
                        p1__14321_SHARP_.target.blur();
                        return om.core.transact_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "board", "board", 1107812952), function(___$1, map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                          return function(board) {
                            return om_2048.core.rand_board.call(null, om_2048.core.board_size.call(null, board));
                          };
                        }(___$1, map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__));
                      };
                    }(___$1, map__14360, map__14360__$1, show_board_QMARK_, owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__)}, "New Game"), cljs.core.truth_(show_board_QMARK_) ? om.core.build.call(null, om_2048.core.game_board, self__.data) : null], null));
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
                om_2048.core.t14356.prototype.om$core$IInitState$ = true;
                om_2048.core.t14356.prototype.om$core$IInitState$init_state$arity$1 = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function(_) {
                    var self__ = this;
                    var ___$1 = this;
                    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "show-board?", "show-board?", 3931540059), true], null);
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
                om_2048.core.t14356.prototype.cljs$core$IMeta$_meta$arity$1 = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function(_14358) {
                    var self__ = this;
                    var _14358__$1 = this;
                    return self__.meta14357;
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
                om_2048.core.t14356.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function(_14358, meta14357__$1) {
                    var self__ = this;
                    var _14358__$1 = this;
                    return new om_2048.core.t14356(self__.input_checker14348, self__.output_schema14346, self__.map14344, self__.output_checker14349, self__.owner, self__.data__8976__auto__, self__.validate__7177__auto__, self__.data, self__.input_schema14347, self__.vec__14343, self__.p__14324, self__.fnk14345, self__.G__14350, self__.app, self__.opts__8977__auto__, self__.ufv__, self__.owner14322, meta14357__$1);
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
                om_2048.core.__GT_t14356 = function(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__) {
                  return function __GT_t14356(input_checker14348__$1, output_schema14346__$1, map14344__$1, output_checker14349__$1, owner__$1, data__8976__auto____$1, validate__7177__auto____$1, data__$1, input_schema14347__$1, vec__14343__$1, p__14324__$1, fnk14345__$1, G__14350__$1, app__$1, opts__8977__auto____$1, ufv____$1, owner14322__$1, meta14357) {
                    return new om_2048.core.t14356(input_checker14348__$1, output_schema14346__$1, map14344__$1, output_checker14349__$1, owner__$1, data__8976__auto____$1, validate__7177__auto____$1, data__$1, input_schema14347__$1, vec__14343__$1, p__14324__$1, fnk14345__$1, G__14350__$1, app__$1, opts__8977__auto____$1, ufv____$1, owner14322__$1, meta14357);
                  };
                }(owner, data, validate__7177__auto__, ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__);
              }
              return new om_2048.core.t14356(input_checker14348, output_schema14346, map14344, output_checker14349, owner, data__8976__auto__, validate__7177__auto__, data, input_schema14347, vec__14343, p__14324, fnk14345, G__14350, app, opts__8977__auto__, ufv__, owner14322, null);
              break;
            }
          }();
          if (cljs.core.truth_(validate__7177__auto__)) {
            var temp__4126__auto___14364 = output_checker14349.call(null, o__7180__auto__);
            if (cljs.core.truth_(temp__4126__auto___14364)) {
              var error__7179__auto___14365 = temp__4126__auto___14364;
              throw cljs.core.ex_info.call(null, schema.utils.format_STAR_.call(null, "Output of %s does not match schema: %s", new cljs.core.Symbol(null, "fnk14345", "fnk14345", 1983792103, null), cljs.core.pr_str.call(null, error__7179__auto___14365)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), output_schema14346, new cljs.core.Keyword(null, "value", "value", 1125876963), o__7180__auto__, new cljs.core.Keyword(null, "error", "error", 
              1110689146), error__7179__auto___14365], null));
            } else {
            }
          } else {
          }
          return o__7180__auto__;
        };
      }(ufv__, output_schema14346, input_schema14347, input_checker14348, output_checker14349, vec__14343, opts__8977__auto__), schema.core.make_fn_schema.call(null, output_schema14346, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema14347], null)));
    }().call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), opts__8977__auto__, new cljs.core.Keyword(null, "owner", "owner", 1120069157), owner14322, new cljs.core.Keyword(null, "data", "data", 1016980252), data__8976__auto__], null));
  };
  var app = function(data__8976__auto__, owner14322, var_args) {
    var p__14324 = null;
    if (arguments.length > 2) {
      p__14324 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return app__delegate.call(this, data__8976__auto__, owner14322, p__14324);
  };
  app.cljs$lang$maxFixedArity = 2;
  app.cljs$lang$applyTo = function(arglist__14366) {
    var data__8976__auto__ = cljs.core.first(arglist__14366);
    arglist__14366 = cljs.core.next(arglist__14366);
    var owner14322 = cljs.core.first(arglist__14366);
    var p__14324 = cljs.core.rest(arglist__14366);
    return app__delegate(data__8976__auto__, owner14322, p__14324);
  };
  app.cljs$core$IFn$_invoke$arity$variadic = app__delegate;
  return app;
}();
om_2048.core.__GT_app = function() {
  var __GT_app = null;
  var __GT_app__1 = function(cursor__8945__auto__) {
    return om.core.build.call(null, om_2048.core.app, cursor__8945__auto__);
  };
  var __GT_app__2 = function(cursor__8945__auto__, m14323) {
    return om.core.build.call(null, om_2048.core.app, cursor__8945__auto__, m14323);
  };
  __GT_app = function(cursor__8945__auto__, m14323) {
    switch(arguments.length) {
      case 1:
        return __GT_app__1.call(this, cursor__8945__auto__);
      case 2:
        return __GT_app__2.call(this, cursor__8945__auto__, m14323);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_app.cljs$core$IFn$_invoke$arity$1 = __GT_app__1;
  __GT_app.cljs$core$IFn$_invoke$arity$2 = __GT_app__2;
  return __GT_app;
}();
om_2048.core.keydown_chan = cljs.core.async.chan.call(null);
dommy.core.listen_BANG_.call(null, window, new cljs.core.Keyword(null, "keydown", "keydown", 4493897459), function(p1__14367_SHARP_) {
  if (cljs.core._EQ_.call(null, "BODY", p1__14367_SHARP_.target.tagName)) {
    return cljs.core.async.put_BANG_.call(null, om_2048.core.keydown_chan, p1__14367_SHARP_);
  } else {
    return null;
  }
});
om.core.root.call(null, om_2048.core.app, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "board", "board", 1107812952), om_2048.core.rand_board.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 4], null))], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "target", "target", 4427965699), document.getElementById("app"), new cljs.core.Keyword(null, "shared", "shared", 4405305303), new cljs.core.PersistentArrayMap(null, 
1, [new cljs.core.Keyword(null, "keydown-mult", "keydown-mult", 4083544942), cljs.core.async.mult.call(null, om_2048.core.keydown_chan)], null)], null));
